{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3ca4871f",
   "metadata": {
    "papermill": {
     "duration": 0.003756,
     "end_time": "2025-07-13T14:02:45.897365",
     "exception": false,
     "start_time": "2025-07-13T14:02:45.893609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1D: Menggunakan harga emas historis + Money Supply (M2)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d6163e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:02:45.904423Z",
     "iopub.status.busy": "2025-07-13T14:02:45.904110Z",
     "iopub.status.idle": "2025-07-13T14:02:47.776027Z",
     "shell.execute_reply": "2025-07-13T14:02:47.775223Z"
    },
    "papermill": {
     "duration": 1.876665,
     "end_time": "2025-07-13T14:02:47.777216",
     "exception": false,
     "start_time": "2025-07-13T14:02:45.900551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4579639f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:02:47.785454Z",
     "iopub.status.busy": "2025-07-13T14:02:47.784686Z",
     "iopub.status.idle": "2025-07-13T14:03:07.067958Z",
     "shell.execute_reply": "2025-07-13T14:03:07.067364Z"
    },
    "papermill": {
     "duration": 19.288436,
     "end_time": "2025-07-13T14:03:07.069213",
     "exception": false,
     "start_time": "2025-07-13T14:02:47.780777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-13 14:02:52.553764: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752415372.912013      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752415373.015649      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2df2a2ec",
   "metadata": {
    "papermill": {
     "duration": 0.003096,
     "end_time": "2025-07-13T14:03:07.075828",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.072732",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "24ea7bce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.083230Z",
     "iopub.status.busy": "2025-07-13T14:03:07.082816Z",
     "iopub.status.idle": "2025-07-13T14:03:07.116018Z",
     "shell.execute_reply": "2025-07-13T14:03:07.115362Z"
    },
    "papermill": {
     "duration": 0.037943,
     "end_time": "2025-07-13T14:03:07.117041",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.079098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ca80d35",
   "metadata": {
    "papermill": {
     "duration": 0.002993,
     "end_time": "2025-07-13T14:03:07.123434",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.120441",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6d75142a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.130528Z",
     "iopub.status.busy": "2025-07-13T14:03:07.130295Z",
     "iopub.status.idle": "2025-07-13T14:03:07.157981Z",
     "shell.execute_reply": "2025-07-13T14:03:07.157372Z"
    },
    "papermill": {
     "duration": 0.032497,
     "end_time": "2025-07-13T14:03:07.159035",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.126538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ae2ee000",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.166388Z",
     "iopub.status.busy": "2025-07-13T14:03:07.166160Z",
     "iopub.status.idle": "2025-07-13T14:03:07.178430Z",
     "shell.execute_reply": "2025-07-13T14:03:07.177919Z"
    },
    "papermill": {
     "duration": 0.017062,
     "end_time": "2025-07-13T14:03:07.179427",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.162365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0d6db6c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.186860Z",
     "iopub.status.busy": "2025-07-13T14:03:07.186457Z",
     "iopub.status.idle": "2025-07-13T14:03:07.192455Z",
     "shell.execute_reply": "2025-07-13T14:03:07.191912Z"
    },
    "papermill": {
     "duration": 0.010702,
     "end_time": "2025-07-13T14:03:07.193448",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.182746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5971fbff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.201066Z",
     "iopub.status.busy": "2025-07-13T14:03:07.200759Z",
     "iopub.status.idle": "2025-07-13T14:03:07.205422Z",
     "shell.execute_reply": "2025-07-13T14:03:07.204866Z"
    },
    "papermill": {
     "duration": 0.009536,
     "end_time": "2025-07-13T14:03:07.206513",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.196977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dfb42ca8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.213896Z",
     "iopub.status.busy": "2025-07-13T14:03:07.213699Z",
     "iopub.status.idle": "2025-07-13T14:03:07.216984Z",
     "shell.execute_reply": "2025-07-13T14:03:07.216482Z"
    },
    "papermill": {
     "duration": 0.008092,
     "end_time": "2025-07-13T14:03:07.217917",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.209825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Money Supply']\n",
    "\n",
    "# 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e35489dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.225735Z",
     "iopub.status.busy": "2025-07-13T14:03:07.225257Z",
     "iopub.status.idle": "2025-07-13T14:03:07.232932Z",
     "shell.execute_reply": "2025-07-13T14:03:07.232451Z"
    },
    "papermill": {
     "duration": 0.012584,
     "end_time": "2025-07-13T14:03:07.233865",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.221281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "39b339b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.241120Z",
     "iopub.status.busy": "2025-07-13T14:03:07.240924Z",
     "iopub.status.idle": "2025-07-13T14:03:07.247907Z",
     "shell.execute_reply": "2025-07-13T14:03:07.247439Z"
    },
    "papermill": {
     "duration": 0.011705,
     "end_time": "2025-07-13T14:03:07.248913",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.237208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b538a251",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.256125Z",
     "iopub.status.busy": "2025-07-13T14:03:07.255931Z",
     "iopub.status.idle": "2025-07-13T14:03:07.259115Z",
     "shell.execute_reply": "2025-07-13T14:03:07.258635Z"
    },
    "papermill": {
     "duration": 0.007889,
     "end_time": "2025-07-13T14:03:07.260038",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.252149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f20f4c2f",
   "metadata": {
    "papermill": {
     "duration": 0.003144,
     "end_time": "2025-07-13T14:03:07.266603",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.263459",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9d91cae8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:03:07.273909Z",
     "iopub.status.busy": "2025-07-13T14:03:07.273729Z",
     "iopub.status.idle": "2025-07-13T14:04:55.422065Z",
     "shell.execute_reply": "2025-07-13T14:04:55.421375Z"
    },
    "papermill": {
     "duration": 108.153319,
     "end_time": "2025-07-13T14:04:55.423208",
     "exception": false,
     "start_time": "2025-07-13T14:03:07.269889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752415389.404767      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1752415389.405485      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1752415394.642203      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=45210.8777\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=38477.7904\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=30147.1423\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=65920.8660\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=26140.3577\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=40578.8614\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=47907.6030\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=34261.6007\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=22457.3383\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=26086.5856\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=31798.3244\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=30962.4364\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=27588.6820\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=21202.2693\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=30836.6459\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=36653.8250\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "13     64      0.3          0.001          64  21202.269340  0.013422   \n",
      "8      64      0.2          0.001          32  22457.338264  0.013040   \n",
      "9      64      0.2          0.001          64  26086.585553  0.016608   \n",
      "4      32      0.3          0.001          32  26140.357664  0.015282   \n",
      "12     64      0.3          0.001          32  27588.681977  0.017079   \n",
      "\n",
      "          R2  \n",
      "13  0.984501  \n",
      "8   0.982611  \n",
      "9   0.976537  \n",
      "4   0.976440  \n",
      "12  0.973757  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c67a0e41",
   "metadata": {
    "papermill": {
     "duration": 0.005772,
     "end_time": "2025-07-13T14:04:55.435256",
     "exception": false,
     "start_time": "2025-07-13T14:04:55.429484",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c26e471a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:04:55.448103Z",
     "iopub.status.busy": "2025-07-13T14:04:55.447873Z",
     "iopub.status.idle": "2025-07-13T14:05:04.299229Z",
     "shell.execute_reply": "2025-07-13T14:05:04.298683Z"
    },
    "papermill": {
     "duration": 8.858997,
     "end_time": "2025-07-13T14:05:04.300261",
     "exception": false,
     "start_time": "2025-07-13T14:04:55.441264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step - loss: 0.0219 - val_loss: 0.0050\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0017 - val_loss: 0.0048\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0014 - val_loss: 0.0038\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0014 - val_loss: 0.0032\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0014\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0022\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0039\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.4802e-04 - val_loss: 0.0040\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.7300e-04 - val_loss: 0.0016\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.3307e-04 - val_loss: 0.0019\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.5774e-04 - val_loss: 0.0041\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.7070e-04 - val_loss: 0.0030\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.5327e-04 - val_loss: 0.0045\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.2385e-04 - val_loss: 0.0018\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.2224e-04 - val_loss: 0.0042\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76ddecca",
   "metadata": {
    "papermill": {
     "duration": 0.010413,
     "end_time": "2025-07-13T14:05:04.322271",
     "exception": false,
     "start_time": "2025-07-13T14:05:04.311858",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5bf2b052",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:05:04.343913Z",
     "iopub.status.busy": "2025-07-13T14:05:04.343681Z",
     "iopub.status.idle": "2025-07-13T14:05:04.865201Z",
     "shell.execute_reply": "2025-07-13T14:05:04.864542Z"
    },
    "papermill": {
     "duration": 0.533598,
     "end_time": "2025-07-13T14:05:04.866265",
     "exception": false,
     "start_time": "2025-07-13T14:05:04.332667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Final Test RMSE: 36768.5694\n",
      "Final Test MAPE: 0.0220\n",
      "Final Test MSLE: 0.000739\n",
      "Final Test R² Score: 0.9534\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5d6c3e85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:05:04.890927Z",
     "iopub.status.busy": "2025-07-13T14:05:04.890704Z",
     "iopub.status.idle": "2025-07-13T14:05:05.210621Z",
     "shell.execute_reply": "2025-07-13T14:05:05.209946Z"
    },
    "papermill": {
     "duration": 0.334168,
     "end_time": "2025-07-13T14:05:05.212611",
     "exception": false,
     "start_time": "2025-07-13T14:05:04.878443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89bc3c04",
   "metadata": {
    "papermill": {
     "duration": 0.011736,
     "end_time": "2025-07-13T14:05:05.236693",
     "exception": false,
     "start_time": "2025-07-13T14:05:05.224957",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f0ebcc7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-13T14:05:05.262704Z",
     "iopub.status.busy": "2025-07-13T14:05:05.262200Z",
     "iopub.status.idle": "2025-07-13T14:05:05.295018Z",
     "shell.execute_reply": "2025-07-13T14:05:05.294208Z"
    },
    "papermill": {
     "duration": 0.046367,
     "end_time": "2025-07-13T14:05:05.296080",
     "exception": false,
     "start_time": "2025-07-13T14:05:05.249713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 147.978027,
   "end_time": "2025-07-13T14:05:08.250716",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-13T14:02:40.272689",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
