{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "768043fc",
   "metadata": {
    "papermill": {
     "duration": 0.004227,
     "end_time": "2025-07-22T04:45:16.468860",
     "exception": false,
     "start_time": "2025-07-22T04:45:16.464633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with GRU\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f25df6eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:16.477317Z",
     "iopub.status.busy": "2025-07-22T04:45:16.477055Z",
     "iopub.status.idle": "2025-07-22T04:45:18.512899Z",
     "shell.execute_reply": "2025-07-22T04:45:18.512029Z"
    },
    "papermill": {
     "duration": 2.041617,
     "end_time": "2025-07-22T04:45:18.514232",
     "exception": false,
     "start_time": "2025-07-22T04:45:16.472615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f9bf6eca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:18.522954Z",
     "iopub.status.busy": "2025-07-22T04:45:18.522606Z",
     "iopub.status.idle": "2025-07-22T04:45:40.525682Z",
     "shell.execute_reply": "2025-07-22T04:45:40.524781Z"
    },
    "papermill": {
     "duration": 22.009054,
     "end_time": "2025-07-22T04:45:40.527279",
     "exception": false,
     "start_time": "2025-07-22T04:45:18.518225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-22 04:45:23.707515: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753159524.084970      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753159524.195879      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9e47634",
   "metadata": {
    "papermill": {
     "duration": 0.003567,
     "end_time": "2025-07-22T04:45:40.534794",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.531227",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ccad5cc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.543068Z",
     "iopub.status.busy": "2025-07-22T04:45:40.542589Z",
     "iopub.status.idle": "2025-07-22T04:45:40.580317Z",
     "shell.execute_reply": "2025-07-22T04:45:40.579395Z"
    },
    "papermill": {
     "duration": 0.043304,
     "end_time": "2025-07-22T04:45:40.581643",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.538339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('../input/Dataset Harga Emas dan Indikator Moneter.csv')\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "169bd1c0",
   "metadata": {
    "papermill": {
     "duration": 0.003423,
     "end_time": "2025-07-22T04:45:40.589129",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.585706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "992a0704",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.597480Z",
     "iopub.status.busy": "2025-07-22T04:45:40.596903Z",
     "iopub.status.idle": "2025-07-22T04:45:40.629362Z",
     "shell.execute_reply": "2025-07-22T04:45:40.628524Z"
    },
    "papermill": {
     "duration": 0.038147,
     "end_time": "2025-07-22T04:45:40.630667",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.592520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0c6775c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.640031Z",
     "iopub.status.busy": "2025-07-22T04:45:40.639774Z",
     "iopub.status.idle": "2025-07-22T04:45:40.654235Z",
     "shell.execute_reply": "2025-07-22T04:45:40.653366Z"
    },
    "papermill": {
     "duration": 0.020644,
     "end_time": "2025-07-22T04:45:40.655453",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.634809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e7a9fce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.664011Z",
     "iopub.status.busy": "2025-07-22T04:45:40.663414Z",
     "iopub.status.idle": "2025-07-22T04:45:40.670970Z",
     "shell.execute_reply": "2025-07-22T04:45:40.670157Z"
    },
    "papermill": {
     "duration": 0.012874,
     "end_time": "2025-07-22T04:45:40.672082",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.659208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bd4f5a59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.680336Z",
     "iopub.status.busy": "2025-07-22T04:45:40.680117Z",
     "iopub.status.idle": "2025-07-22T04:45:40.685448Z",
     "shell.execute_reply": "2025-07-22T04:45:40.684877Z"
    },
    "papermill": {
     "duration": 0.010826,
     "end_time": "2025-07-22T04:45:40.686517",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.675691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b56b4107",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.694719Z",
     "iopub.status.busy": "2025-07-22T04:45:40.694476Z",
     "iopub.status.idle": "2025-07-22T04:45:40.697951Z",
     "shell.execute_reply": "2025-07-22T04:45:40.697337Z"
    },
    "papermill": {
     "duration": 0.008859,
     "end_time": "2025-07-22T04:45:40.699091",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.690232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price']\n",
    "\n",
    "# 'Kurs', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b3576696",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.707449Z",
     "iopub.status.busy": "2025-07-22T04:45:40.707188Z",
     "iopub.status.idle": "2025-07-22T04:45:40.714103Z",
     "shell.execute_reply": "2025-07-22T04:45:40.713521Z"
    },
    "papermill": {
     "duration": 0.012318,
     "end_time": "2025-07-22T04:45:40.715259",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.702941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c969211a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.723866Z",
     "iopub.status.busy": "2025-07-22T04:45:40.723646Z",
     "iopub.status.idle": "2025-07-22T04:45:40.730570Z",
     "shell.execute_reply": "2025-07-22T04:45:40.730028Z"
    },
    "papermill": {
     "duration": 0.012509,
     "end_time": "2025-07-22T04:45:40.731711",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.719202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49c09af4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.739959Z",
     "iopub.status.busy": "2025-07-22T04:45:40.739710Z",
     "iopub.status.idle": "2025-07-22T04:45:40.743249Z",
     "shell.execute_reply": "2025-07-22T04:45:40.742655Z"
    },
    "papermill": {
     "duration": 0.009063,
     "end_time": "2025-07-22T04:45:40.744389",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.735326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d28476a5",
   "metadata": {
    "papermill": {
     "duration": 0.003538,
     "end_time": "2025-07-22T04:45:40.752316",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.748778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bbf2fb83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:45:40.760382Z",
     "iopub.status.busy": "2025-07-22T04:45:40.760133Z",
     "iopub.status.idle": "2025-07-22T04:48:19.689691Z",
     "shell.execute_reply": "2025-07-22T04:48:19.688727Z"
    },
    "papermill": {
     "duration": 158.935545,
     "end_time": "2025-07-22T04:48:19.691315",
     "exception": false,
     "start_time": "2025-07-22T04:45:40.755770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753159543.109952      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753159543.110718      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753159548.736385      61 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=15596.1579\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=15292.2493\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=32878.0282\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=21751.3654\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=42534.5126\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=42928.7978\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=16580.6094\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=29794.6086\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=15549.6975\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=15316.4416\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=15256.1112\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=16358.2454\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 28ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=15515.1277\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=15989.4165\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=16129.4546\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=17185.3337\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "10     64      0.2         0.0005          32  15256.111229  0.009398   \n",
      "1      32      0.2         0.0010          64  15292.249333  0.009365   \n",
      "9      64      0.2         0.0010          64  15316.441562  0.008824   \n",
      "12     64      0.3         0.0010          32  15515.127750  0.010015   \n",
      "8      64      0.2         0.0010          32  15549.697451  0.010168   \n",
      "\n",
      "          R2  \n",
      "10  0.991975  \n",
      "1   0.991937  \n",
      "9   0.991912  \n",
      "12  0.991700  \n",
      "8   0.991663  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(GRU(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(GRU(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6810b1f",
   "metadata": {
    "papermill": {
     "duration": 0.007758,
     "end_time": "2025-07-22T04:48:19.707401",
     "exception": false,
     "start_time": "2025-07-22T04:48:19.699643",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6630d67c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:48:19.724727Z",
     "iopub.status.busy": "2025-07-22T04:48:19.724398Z",
     "iopub.status.idle": "2025-07-22T04:48:33.801999Z",
     "shell.execute_reply": "2025-07-22T04:48:33.801238Z"
    },
    "papermill": {
     "duration": 14.088358,
     "end_time": "2025-07-22T04:48:33.803549",
     "exception": false,
     "start_time": "2025-07-22T04:48:19.715191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 23ms/step - loss: 0.0238 - val_loss: 0.0026\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0017 - val_loss: 4.3087e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0011 - val_loss: 4.7340e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0012 - val_loss: 9.4069e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0011 - val_loss: 0.0012\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0011 - val_loss: 0.0013\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 9.2443e-04 - val_loss: 2.2993e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 8.9015e-04 - val_loss: 2.2414e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 8.4315e-04 - val_loss: 9.5107e-04\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 7.1197e-04 - val_loss: 4.9514e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 7.7340e-04 - val_loss: 5.3524e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 7.2488e-04 - val_loss: 9.2885e-04\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 7.5925e-04 - val_loss: 9.9381e-04\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.2564e-04 - val_loss: 3.0428e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.6986e-04 - val_loss: 4.3839e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.5044e-04 - val_loss: 0.0014\n",
      "Epoch 17/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 7.1677e-04 - val_loss: 3.0492e-04\n",
      "Epoch 18/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.3865e-04 - val_loss: 0.0010\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(GRU(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(GRU(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baf6332a",
   "metadata": {
    "papermill": {
     "duration": 0.015569,
     "end_time": "2025-07-22T04:48:33.835718",
     "exception": false,
     "start_time": "2025-07-22T04:48:33.820149",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "38ff72ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:48:33.868621Z",
     "iopub.status.busy": "2025-07-22T04:48:33.868279Z",
     "iopub.status.idle": "2025-07-22T04:48:34.488730Z",
     "shell.execute_reply": "2025-07-22T04:48:34.487649Z"
    },
    "papermill": {
     "duration": 0.63846,
     "end_time": "2025-07-22T04:48:34.490392",
     "exception": false,
     "start_time": "2025-07-22T04:48:33.851932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 27ms/step\n",
      "Final Test RMSE: 14522.1778\n",
      "Final Test MAPE: 0.0088\n",
      "Final Test MSLE: 0.000130\n",
      "Final Test R² Score: 0.9927\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "85903332",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:48:34.527249Z",
     "iopub.status.busy": "2025-07-22T04:48:34.526907Z",
     "iopub.status.idle": "2025-07-22T04:48:34.941431Z",
     "shell.execute_reply": "2025-07-22T04:48:34.940484Z"
    },
    "papermill": {
     "duration": 0.435375,
     "end_time": "2025-07-22T04:48:34.943619",
     "exception": false,
     "start_time": "2025-07-22T04:48:34.508244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9726fe9",
   "metadata": {
    "papermill": {
     "duration": 0.017218,
     "end_time": "2025-07-22T04:48:34.978347",
     "exception": false,
     "start_time": "2025-07-22T04:48:34.961129",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "49bfc38c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T04:48:35.014158Z",
     "iopub.status.busy": "2025-07-22T04:48:35.013835Z",
     "iopub.status.idle": "2025-07-22T04:48:35.059797Z",
     "shell.execute_reply": "2025-07-22T04:48:35.058856Z"
    },
    "papermill": {
     "duration": 0.065587,
     "end_time": "2025-07-22T04:48:35.061119",
     "exception": false,
     "start_time": "2025-07-22T04:48:34.995532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 208.072368,
   "end_time": "2025-07-22T04:48:38.569118",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-22T04:45:10.496750",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
