{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d1ef760f",
   "metadata": {
    "papermill": {
     "duration": 0.004195,
     "end_time": "2025-05-30T03:11:16.072907",
     "exception": false,
     "start_time": "2025-05-30T03:11:16.068712",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with GRU\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f168eb9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:16.080362Z",
     "iopub.status.busy": "2025-05-30T03:11:16.080066Z",
     "iopub.status.idle": "2025-05-30T03:11:17.674614Z",
     "shell.execute_reply": "2025-05-30T03:11:17.673910Z"
    },
    "papermill": {
     "duration": 1.599723,
     "end_time": "2025-05-30T03:11:17.675871",
     "exception": false,
     "start_time": "2025-05-30T03:11:16.076148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dd4a5e96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:17.684722Z",
     "iopub.status.busy": "2025-05-30T03:11:17.683934Z",
     "iopub.status.idle": "2025-05-30T03:11:33.607938Z",
     "shell.execute_reply": "2025-05-30T03:11:33.607015Z"
    },
    "papermill": {
     "duration": 15.929818,
     "end_time": "2025-05-30T03:11:33.609517",
     "exception": false,
     "start_time": "2025-05-30T03:11:17.679699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-30 03:11:21.067891: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748574681.401431      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748574681.471569      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85d2dfb6",
   "metadata": {
    "papermill": {
     "duration": 0.003115,
     "end_time": "2025-05-30T03:11:33.616170",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.613055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2df42bfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.623706Z",
     "iopub.status.busy": "2025-05-30T03:11:33.623256Z",
     "iopub.status.idle": "2025-05-30T03:11:33.653181Z",
     "shell.execute_reply": "2025-05-30T03:11:33.652497Z"
    },
    "papermill": {
     "duration": 0.03504,
     "end_time": "2025-05-30T03:11:33.654353",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.619313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
      "0  1/3/2017  606000  13485            116.9         4936881.99\n",
      "1  1/4/2017  606000  13478            116.9         4936881.99\n",
      "2  1/5/2017  607000  13370            116.9         4936881.99\n",
      "3  1/6/2017  606000  13347            116.9         4936881.99\n",
      "4  1/9/2017  602000  13385            116.9         4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('../input/Final Dataset Gold Prediction.csv')  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfbb26d1",
   "metadata": {
    "papermill": {
     "duration": 0.002993,
     "end_time": "2025-05-30T03:11:33.660560",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.657567",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5168c92d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.667525Z",
     "iopub.status.busy": "2025-05-30T03:11:33.667298Z",
     "iopub.status.idle": "2025-05-30T03:11:33.689891Z",
     "shell.execute_reply": "2025-05-30T03:11:33.689281Z"
    },
    "papermill": {
     "duration": 0.027212,
     "end_time": "2025-05-30T03:11:33.690839",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.663627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8a5c1dec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.697990Z",
     "iopub.status.busy": "2025-05-30T03:11:33.697785Z",
     "iopub.status.idle": "2025-05-30T03:11:33.709265Z",
     "shell.execute_reply": "2025-05-30T03:11:33.708719Z"
    },
    "papermill": {
     "duration": 0.016296,
     "end_time": "2025-05-30T03:11:33.710333",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.694037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6963ec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.717512Z",
     "iopub.status.busy": "2025-05-30T03:11:33.717303Z",
     "iopub.status.idle": "2025-05-30T03:11:33.723195Z",
     "shell.execute_reply": "2025-05-30T03:11:33.722670Z"
    },
    "papermill": {
     "duration": 0.010506,
     "end_time": "2025-05-30T03:11:33.724164",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.713658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "79d6e16c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.731459Z",
     "iopub.status.busy": "2025-05-30T03:11:33.731226Z",
     "iopub.status.idle": "2025-05-30T03:11:33.736265Z",
     "shell.execute_reply": "2025-05-30T03:11:33.735564Z"
    },
    "papermill": {
     "duration": 0.010031,
     "end_time": "2025-05-30T03:11:33.737448",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.727417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ba078096",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.745490Z",
     "iopub.status.busy": "2025-05-30T03:11:33.744924Z",
     "iopub.status.idle": "2025-05-30T03:11:33.747861Z",
     "shell.execute_reply": "2025-05-30T03:11:33.747385Z"
    },
    "papermill": {
     "duration": 0.008032,
     "end_time": "2025-05-30T03:11:33.748996",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.740964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price']\n",
    "\n",
    "# 'Kurs', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a3bff0ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.756417Z",
     "iopub.status.busy": "2025-05-30T03:11:33.756164Z",
     "iopub.status.idle": "2025-05-30T03:11:33.763516Z",
     "shell.execute_reply": "2025-05-30T03:11:33.762096Z"
    },
    "papermill": {
     "duration": 0.012181,
     "end_time": "2025-05-30T03:11:33.764576",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.752395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "89dc82f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.772747Z",
     "iopub.status.busy": "2025-05-30T03:11:33.772546Z",
     "iopub.status.idle": "2025-05-30T03:11:33.779385Z",
     "shell.execute_reply": "2025-05-30T03:11:33.778800Z"
    },
    "papermill": {
     "duration": 0.012096,
     "end_time": "2025-05-30T03:11:33.780587",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.768491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f42423a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.788076Z",
     "iopub.status.busy": "2025-05-30T03:11:33.787908Z",
     "iopub.status.idle": "2025-05-30T03:11:33.791093Z",
     "shell.execute_reply": "2025-05-30T03:11:33.790615Z"
    },
    "papermill": {
     "duration": 0.008175,
     "end_time": "2025-05-30T03:11:33.792083",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.783908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b16842e",
   "metadata": {
    "papermill": {
     "duration": 0.003062,
     "end_time": "2025-05-30T03:11:33.798819",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.795757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dd29f73e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:11:33.805996Z",
     "iopub.status.busy": "2025-05-30T03:11:33.805822Z",
     "iopub.status.idle": "2025-05-30T03:13:38.864020Z",
     "shell.execute_reply": "2025-05-30T03:13:38.863190Z"
    },
    "papermill": {
     "duration": 125.063194,
     "end_time": "2025-05-30T03:13:38.865208",
     "exception": false,
     "start_time": "2025-05-30T03:11:33.802014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748574695.133615      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748574695.134398      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1748574699.959355      63 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=20197.7816\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=29137.9848\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=21195.8366\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=27890.1406\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=20516.1580\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=26112.0958\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=24173.0110\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=24678.3508\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=16168.9603\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=16158.2978\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=15784.2033\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=14488.7428\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=15725.3097\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=19578.9644\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=17735.8156\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=16914.9499\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "11     64      0.2         0.0005          64  14488.742771  0.008546   \n",
      "12     64      0.3         0.0010          32  15725.309669  0.009297   \n",
      "10     64      0.2         0.0005          32  15784.203286  0.009444   \n",
      "9      64      0.2         0.0010          64  16158.297841  0.009256   \n",
      "8      64      0.2         0.0010          32  16168.960282  0.009515   \n",
      "\n",
      "          R2  \n",
      "11  0.992762  \n",
      "12  0.991474  \n",
      "10  0.991410  \n",
      "9   0.990998  \n",
      "8   0.990986  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(GRU(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(GRU(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a6011a2",
   "metadata": {
    "papermill": {
     "duration": 0.005921,
     "end_time": "2025-05-30T03:13:38.877511",
     "exception": false,
     "start_time": "2025-05-30T03:13:38.871590",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ff912bb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:13:38.889907Z",
     "iopub.status.busy": "2025-05-30T03:13:38.889689Z",
     "iopub.status.idle": "2025-05-30T03:13:47.072541Z",
     "shell.execute_reply": "2025-05-30T03:13:47.071984Z"
    },
    "papermill": {
     "duration": 8.190572,
     "end_time": "2025-05-30T03:13:47.073774",
     "exception": false,
     "start_time": "2025-05-30T03:13:38.883202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 0.0264 - val_loss: 8.2272e-04\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0015 - val_loss: 2.5717e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0013 - val_loss: 0.0014\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0012 - val_loss: 4.4331e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0011 - val_loss: 0.0011\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.8636e-04 - val_loss: 9.0156e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.4234e-04 - val_loss: 3.8344e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.7630e-04 - val_loss: 3.3322e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 7.9231e-04 - val_loss: 0.0011\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.0372e-04 - val_loss: 0.0012\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 7.9389e-04 - val_loss: 3.2050e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 7.6537e-04 - val_loss: 5.4146e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(GRU(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(GRU(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42bf9285",
   "metadata": {
    "papermill": {
     "duration": 0.009824,
     "end_time": "2025-05-30T03:13:47.094775",
     "exception": false,
     "start_time": "2025-05-30T03:13:47.084951",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5653712a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:13:47.117291Z",
     "iopub.status.busy": "2025-05-30T03:13:47.117063Z",
     "iopub.status.idle": "2025-05-30T03:13:47.577574Z",
     "shell.execute_reply": "2025-05-30T03:13:47.576927Z"
    },
    "papermill": {
     "duration": 0.473846,
     "end_time": "2025-05-30T03:13:47.578626",
     "exception": false,
     "start_time": "2025-05-30T03:13:47.104780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Final Test RMSE: 15555.2929\n",
      "Final Test MAPE: 0.0095\n",
      "Final Test MSLE: 0.000151\n",
      "Final Test R² Score: 0.9917\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e335ca9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:13:47.601222Z",
     "iopub.status.busy": "2025-05-30T03:13:47.601012Z",
     "iopub.status.idle": "2025-05-30T03:13:47.894032Z",
     "shell.execute_reply": "2025-05-30T03:13:47.893152Z"
    },
    "papermill": {
     "duration": 0.305356,
     "end_time": "2025-05-30T03:13:47.895418",
     "exception": false,
     "start_time": "2025-05-30T03:13:47.590062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01556699",
   "metadata": {
    "papermill": {
     "duration": 0.011041,
     "end_time": "2025-05-30T03:13:47.918749",
     "exception": false,
     "start_time": "2025-05-30T03:13:47.907708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5bfc9c42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T03:13:47.941757Z",
     "iopub.status.busy": "2025-05-30T03:13:47.941537Z",
     "iopub.status.idle": "2025-05-30T03:13:47.975681Z",
     "shell.execute_reply": "2025-05-30T03:13:47.974866Z"
    },
    "papermill": {
     "duration": 0.04693,
     "end_time": "2025-05-30T03:13:47.976764",
     "exception": false,
     "start_time": "2025-05-30T03:13:47.929834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 159.581302,
   "end_time": "2025-05-30T03:13:50.998989",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-30T03:11:11.417687",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
