{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "61a30f1c",
   "metadata": {
    "papermill": {
     "duration": 0.00295,
     "end_time": "2025-05-25T09:35:12.985578",
     "exception": false,
     "start_time": "2025-05-25T09:35:12.982628",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# GRU Model\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2319bf2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:12.991299Z",
     "iopub.status.busy": "2025-05-25T09:35:12.991094Z",
     "iopub.status.idle": "2025-05-25T09:35:15.116428Z",
     "shell.execute_reply": "2025-05-25T09:35:15.115775Z"
    },
    "papermill": {
     "duration": 2.129612,
     "end_time": "2025-05-25T09:35:15.117785",
     "exception": false,
     "start_time": "2025-05-25T09:35:12.988173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0157e015",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:15.124429Z",
     "iopub.status.busy": "2025-05-25T09:35:15.123814Z",
     "iopub.status.idle": "2025-05-25T09:35:37.954056Z",
     "shell.execute_reply": "2025-05-25T09:35:37.953244Z"
    },
    "papermill": {
     "duration": 22.834724,
     "end_time": "2025-05-25T09:35:37.955399",
     "exception": false,
     "start_time": "2025-05-25T09:35:15.120675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-25 09:35:18.994224: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748165719.454794      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748165719.600129      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import GRU, Dense, Dropout, Input\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "78b8baaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:37.961966Z",
     "iopub.status.busy": "2025-05-25T09:35:37.961534Z",
     "iopub.status.idle": "2025-05-25T09:35:38.019058Z",
     "shell.execute_reply": "2025-05-25T09:35:38.018241Z"
    },
    "papermill": {
     "duration": 0.061902,
     "end_time": "2025-05-25T09:35:38.020197",
     "exception": false,
     "start_time": "2025-05-25T09:35:37.958295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Inflasi            1932 non-null   float64\n",
      " 4   IndONIA            1932 non-null   float64\n",
      " 5   Cadangan Devisa    1932 non-null   float64\n",
      " 6   Money Supply (M2)  1932 non-null   float64\n",
      " 7   Minyak             1932 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 120.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f312ce74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.027669Z",
     "iopub.status.busy": "2025-05-25T09:35:38.027050Z",
     "iopub.status.idle": "2025-05-25T09:35:38.043472Z",
     "shell.execute_reply": "2025-05-25T09:35:38.042992Z"
    },
    "papermill": {
     "duration": 0.021615,
     "end_time": "2025-05-25T09:35:38.044489",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.022874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Inflasi', 'IndONIA', 'Cadangan Devisa','Money Supply (M2)', 'Minyak'], axis=1, inplace=True)\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# 'Kurs', "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6cc0822a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.050761Z",
     "iopub.status.busy": "2025-05-25T09:35:38.050231Z",
     "iopub.status.idle": "2025-05-25T09:35:38.059094Z",
     "shell.execute_reply": "2025-05-25T09:35:38.058356Z"
    },
    "papermill": {
     "duration": 0.013059,
     "end_time": "2025-05-25T09:35:38.060147",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.047088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 3 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   Date    1932 non-null   datetime64[ns]\n",
      " 1   Price   1932 non-null   float64       \n",
      " 2   Kurs    1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(2)\n",
      "memory usage: 45.4 KB\n"
     ]
    }
   ],
   "source": [
    "# Preprocess numeric columns\n",
    "NumCols = df.columns.drop(['Date'])\n",
    "df[NumCols] = df[NumCols].astype('float64')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4b81cbad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.066158Z",
     "iopub.status.busy": "2025-05-25T09:35:38.065945Z",
     "iopub.status.idle": "2025-05-25T09:35:38.071202Z",
     "shell.execute_reply": "2025-05-25T09:35:38.070533Z"
    },
    "papermill": {
     "duration": 0.009486,
     "end_time": "2025-05-25T09:35:38.072228",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.062742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values: 0\n",
      "Duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "# Cek data\n",
    "print(\"Missing values:\", df.isnull().sum().sum())\n",
    "print(\"Duplicates:\", df.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "af717a5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.078067Z",
     "iopub.status.busy": "2025-05-25T09:35:38.077866Z",
     "iopub.status.idle": "2025-05-25T09:35:38.086461Z",
     "shell.execute_reply": "2025-05-25T09:35:38.085764Z"
    },
    "papermill": {
     "duration": 0.012872,
     "end_time": "2025-05-25T09:35:38.087670",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.074798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test size: 720\n"
     ]
    }
   ],
   "source": [
    "# Split train/test by date\n",
    "df_train = df[df['Date'].dt.year < 2022]\n",
    "df_test = df[df['Date'].dt.year >= 2022]\n",
    "test_size = df_test.shape[0]\n",
    "print(\"Test size:\", test_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "037c512a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.094203Z",
     "iopub.status.busy": "2025-05-25T09:35:38.093802Z",
     "iopub.status.idle": "2025-05-25T09:35:38.099769Z",
     "shell.execute_reply": "2025-05-25T09:35:38.099255Z"
    },
    "papermill": {
     "duration": 0.010152,
     "end_time": "2025-05-25T09:35:38.100802",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.090650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling\n",
    "scaler = MinMaxScaler()\n",
    "scaled_data = scaler.fit_transform(df[NumCols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "73bb8ae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.107042Z",
     "iopub.status.busy": "2025-05-25T09:35:38.106439Z",
     "iopub.status.idle": "2025-05-25T09:35:38.116608Z",
     "shell.execute_reply": "2025-05-25T09:35:38.115949Z"
    },
    "papermill": {
     "duration": 0.014241,
     "end_time": "2025-05-25T09:35:38.117619",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.103378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (1152, 60, 2) (1152,)\n",
      "Test shape: (720, 60, 2) (720,)\n"
     ]
    }
   ],
   "source": [
    "# Sliding window multivariate\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "\n",
    "for i in range(window_size, len(scaled_data)):\n",
    "    X.append(scaled_data[i-window_size:i])\n",
    "    y.append(scaled_data[i, 0])  # Index 0 = 'Price'\n",
    "\n",
    "X = np.array(X)\n",
    "y = np.array(y)\n",
    "\n",
    "# Split back to train/test\n",
    "X_train, X_test = X[:-test_size], X[-test_size:]\n",
    "y_train, y_test = y[:-test_size], y[-test_size:]\n",
    "\n",
    "print(\"Train shape:\", X_train.shape, y_train.shape)\n",
    "print(\"Test shape:\", X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "31a38489",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.123480Z",
     "iopub.status.busy": "2025-05-25T09:35:38.123292Z",
     "iopub.status.idle": "2025-05-25T09:35:38.128566Z",
     "shell.execute_reply": "2025-05-25T09:35:38.127917Z"
    },
    "papermill": {
     "duration": 0.00937,
     "end_time": "2025-05-25T09:35:38.129551",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.120181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define model builder for Keras Tuner\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_1', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_1', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_2', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_2', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_3', 32, 128, step=32)))\n",
    "    model.add(Dropout(hp.Float('dropout_3', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(Dense(1))\n",
    "\n",
    "    lr = hp.Float('lr', 1e-4, 1e-2, sampling='log')\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), loss='mean_squared_error')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8793eee2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:38.135265Z",
     "iopub.status.busy": "2025-05-25T09:35:38.135053Z",
     "iopub.status.idle": "2025-05-25T09:35:42.848278Z",
     "shell.execute_reply": "2025-05-25T09:35:42.847680Z"
    },
    "papermill": {
     "duration": 4.717643,
     "end_time": "2025-05-25T09:35:42.849713",
     "exception": false,
     "start_time": "2025-05-25T09:35:38.132070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748165740.910831      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748165740.911578      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "# Keras Tuner Random Search\n",
    "tuner = kt.RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='gru_tuner_dir',\n",
    "    project_name='gru_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3b027709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:35:42.856618Z",
     "iopub.status.busy": "2025-05-25T09:35:42.856383Z",
     "iopub.status.idle": "2025-05-25T09:37:00.060628Z",
     "shell.execute_reply": "2025-05-25T09:37:00.059823Z"
    },
    "papermill": {
     "duration": 77.209064,
     "end_time": "2025-05-25T09:37:00.061848",
     "exception": false,
     "start_time": "2025-05-25T09:35:42.852784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 08s]\n",
      "val_loss: 0.00036394764902070165\n",
      "\n",
      "Best val_loss So Far: 0.00018379239190835506\n",
      "Total elapsed time: 00h 01m 17s\n"
     ]
    }
   ],
   "source": [
    "# Tuning\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "tuner.search(X_train, y_train, validation_data=(X_test, y_test),\n",
    "             epochs=20, batch_size=32,\n",
    "             callbacks=[early_stop], verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ac1bf12c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:37:00.068400Z",
     "iopub.status.busy": "2025-05-25T09:37:00.068206Z",
     "iopub.status.idle": "2025-05-25T09:37:01.620827Z",
     "shell.execute_reply": "2025-05-25T09:37:01.619978Z"
    },
    "papermill": {
     "duration": 1.557226,
     "end_time": "2025-05-25T09:37:01.622014",
     "exception": false,
     "start_time": "2025-05-25T09:37:00.064788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:713: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 24 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step\n",
      "MSLE: 7.124434449751413e-05\n",
      "TUNED GRU -> RMSE: 0.013557005227096018, MAE: 0.010252967652569254, MAPE: 0.019250936645099095, R2: 0.9947741172928899\n"
     ]
    }
   ],
   "source": [
    "# Best model from tuning\n",
    "best_model = tuner.get_best_models(num_models=1)[0]\n",
    "\n",
    "# Evaluation\n",
    "preds = best_model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, preds)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, preds)\n",
    "mape = mean_absolute_percentage_error(y_test, preds)\n",
    "r2 = r2_score(y_test, preds)\n",
    "\n",
    "msle = mean_squared_log_error(y_test, preds)\n",
    "print(f\"MSLE: {msle}\")\n",
    "print(f\"TUNED GRU -> RMSE: {rmse}, MAE: {mae}, MAPE: {mape}, R2: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c2246181",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T09:37:01.630387Z",
     "iopub.status.busy": "2025-05-25T09:37:01.630120Z",
     "iopub.status.idle": "2025-05-25T09:37:02.022241Z",
     "shell.execute_reply": "2025-05-25T09:37:02.021462Z"
    },
    "papermill": {
     "duration": 0.398526,
     "end_time": "2025-05-25T09:37:02.024201",
     "exception": false,
     "start_time": "2025-05-25T09:37:01.625675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisasi Prediksi vs Aktual\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(y_test, label='Actual Price')\n",
    "plt.plot(preds, label='Predicted Price')\n",
    "plt.title('GRU Prediction vs Actual')\n",
    "plt.xlabel('Time Step')\n",
    "plt.ylabel('Normalized Price')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 118.394203,
   "end_time": "2025-05-25T09:37:04.938464",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-25T09:35:06.544261",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
