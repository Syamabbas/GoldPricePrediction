{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e7a29227",
   "metadata": {
    "papermill": {
     "duration": 0.004155,
     "end_time": "2025-07-18T02:24:45.637509",
     "exception": false,
     "start_time": "2025-07-18T02:24:45.633354",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1H: Using all data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23b1fb78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:24:45.645745Z",
     "iopub.status.busy": "2025-07-18T02:24:45.645412Z",
     "iopub.status.idle": "2025-07-18T02:24:47.131495Z",
     "shell.execute_reply": "2025-07-18T02:24:47.130699Z"
    },
    "papermill": {
     "duration": 1.491853,
     "end_time": "2025-07-18T02:24:47.132873",
     "exception": false,
     "start_time": "2025-07-18T02:24:45.641020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "185c8a0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:24:47.141856Z",
     "iopub.status.busy": "2025-07-18T02:24:47.141519Z",
     "iopub.status.idle": "2025-07-18T02:25:01.270402Z",
     "shell.execute_reply": "2025-07-18T02:25:01.269617Z"
    },
    "papermill": {
     "duration": 14.135419,
     "end_time": "2025-07-18T02:25:01.271963",
     "exception": false,
     "start_time": "2025-07-18T02:24:47.136544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-18 02:24:49.925047: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752805490.138239      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752805490.194077      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6abc520f",
   "metadata": {
    "papermill": {
     "duration": 0.003067,
     "end_time": "2025-07-18T02:25:01.278720",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.275653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "79ae009e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.286534Z",
     "iopub.status.busy": "2025-07-18T02:25:01.286105Z",
     "iopub.status.idle": "2025-07-18T02:25:01.313546Z",
     "shell.execute_reply": "2025-07-18T02:25:01.312842Z"
    },
    "papermill": {
     "duration": 0.032511,
     "end_time": "2025-07-18T02:25:01.314560",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.282049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db19ab49",
   "metadata": {
    "papermill": {
     "duration": 0.003053,
     "end_time": "2025-07-18T02:25:01.320986",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.317933",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "50658a05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.328438Z",
     "iopub.status.busy": "2025-07-18T02:25:01.327894Z",
     "iopub.status.idle": "2025-07-18T02:25:01.349855Z",
     "shell.execute_reply": "2025-07-18T02:25:01.348905Z"
    },
    "papermill": {
     "duration": 0.02712,
     "end_time": "2025-07-18T02:25:01.351191",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.324071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d87ab93f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.360421Z",
     "iopub.status.busy": "2025-07-18T02:25:01.359636Z",
     "iopub.status.idle": "2025-07-18T02:25:01.372561Z",
     "shell.execute_reply": "2025-07-18T02:25:01.372004Z"
    },
    "papermill": {
     "duration": 0.018795,
     "end_time": "2025-07-18T02:25:01.373845",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.355050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b28f8686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.382486Z",
     "iopub.status.busy": "2025-07-18T02:25:01.381946Z",
     "iopub.status.idle": "2025-07-18T02:25:01.389202Z",
     "shell.execute_reply": "2025-07-18T02:25:01.388451Z"
    },
    "papermill": {
     "duration": 0.012531,
     "end_time": "2025-07-18T02:25:01.390279",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.377748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c6e6f262",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.397908Z",
     "iopub.status.busy": "2025-07-18T02:25:01.397658Z",
     "iopub.status.idle": "2025-07-18T02:25:01.402777Z",
     "shell.execute_reply": "2025-07-18T02:25:01.402174Z"
    },
    "papermill": {
     "duration": 0.010081,
     "end_time": "2025-07-18T02:25:01.403772",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.393691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "84dd8d10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.411137Z",
     "iopub.status.busy": "2025-07-18T02:25:01.410932Z",
     "iopub.status.idle": "2025-07-18T02:25:01.414066Z",
     "shell.execute_reply": "2025-07-18T02:25:01.413355Z"
    },
    "papermill": {
     "duration": 0.008052,
     "end_time": "2025-07-18T02:25:01.415247",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.407195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate', 'Foreign Exchange Reserves', 'Money Supply']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1cace850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.422902Z",
     "iopub.status.busy": "2025-07-18T02:25:01.422653Z",
     "iopub.status.idle": "2025-07-18T02:25:01.430875Z",
     "shell.execute_reply": "2025-07-18T02:25:01.430100Z"
    },
    "papermill": {
     "duration": 0.013373,
     "end_time": "2025-07-18T02:25:01.432011",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.418638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a23b57c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.439740Z",
     "iopub.status.busy": "2025-07-18T02:25:01.439494Z",
     "iopub.status.idle": "2025-07-18T02:25:01.449580Z",
     "shell.execute_reply": "2025-07-18T02:25:01.449098Z"
    },
    "papermill": {
     "duration": 0.015066,
     "end_time": "2025-07-18T02:25:01.450564",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.435498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3cf85d82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.458311Z",
     "iopub.status.busy": "2025-07-18T02:25:01.458102Z",
     "iopub.status.idle": "2025-07-18T02:25:01.461458Z",
     "shell.execute_reply": "2025-07-18T02:25:01.460923Z"
    },
    "papermill": {
     "duration": 0.008565,
     "end_time": "2025-07-18T02:25:01.462517",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.453952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "accec303",
   "metadata": {
    "papermill": {
     "duration": 0.003371,
     "end_time": "2025-07-18T02:25:01.469609",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.466238",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "69849850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:25:01.477470Z",
     "iopub.status.busy": "2025-07-18T02:25:01.477286Z",
     "iopub.status.idle": "2025-07-18T02:27:06.117250Z",
     "shell.execute_reply": "2025-07-18T02:27:06.116529Z"
    },
    "papermill": {
     "duration": 124.645377,
     "end_time": "2025-07-18T02:27:06.118363",
     "exception": false,
     "start_time": "2025-07-18T02:25:01.472986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752805502.766399      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1752805502.767149      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1752805507.841708      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=120275.6216\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=72503.7432\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=137333.1434\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 61ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=78772.3930\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=76857.0486\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=110247.2004\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=98257.3342\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=89078.8900\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=35868.5708\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=50001.1771\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=47019.9596\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=40785.5582\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=43420.2863\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=57079.3858\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=53490.0923\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=29201.0570\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "15     64      0.3         0.0005          64  29201.057031  0.019949   \n",
      "8      64      0.2         0.0010          32  35868.570761  0.019292   \n",
      "11     64      0.2         0.0005          64  40785.558151  0.023181   \n",
      "12     64      0.3         0.0010          32  43420.286311  0.025406   \n",
      "10     64      0.2         0.0005          32  47019.959599  0.028144   \n",
      "\n",
      "          R2  \n",
      "15  0.970600  \n",
      "8   0.955641  \n",
      "11  0.942646  \n",
      "12  0.934997  \n",
      "10  0.923772  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a351dc18",
   "metadata": {
    "papermill": {
     "duration": 0.006118,
     "end_time": "2025-07-18T02:27:06.131137",
     "exception": false,
     "start_time": "2025-07-18T02:27:06.125019",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "66b58d4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:27:06.144210Z",
     "iopub.status.busy": "2025-07-18T02:27:06.143971Z",
     "iopub.status.idle": "2025-07-18T02:27:14.247805Z",
     "shell.execute_reply": "2025-07-18T02:27:14.247222Z"
    },
    "papermill": {
     "duration": 8.1116,
     "end_time": "2025-07-18T02:27:14.249042",
     "exception": false,
     "start_time": "2025-07-18T02:27:06.137442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step - loss: 0.0269 - val_loss: 0.0236\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0024 - val_loss: 0.0020\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0018 - val_loss: 0.0069\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0015 - val_loss: 0.0038\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0024\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0051\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0032\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0061\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0055\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0037\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.2422e-04 - val_loss: 0.0048\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.8645e-04 - val_loss: 0.0027\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ec41be5",
   "metadata": {
    "papermill": {
     "duration": 0.01031,
     "end_time": "2025-07-18T02:27:14.270486",
     "exception": false,
     "start_time": "2025-07-18T02:27:14.260176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fd51b480",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:27:14.292275Z",
     "iopub.status.busy": "2025-07-18T02:27:14.292058Z",
     "iopub.status.idle": "2025-07-18T02:27:14.855136Z",
     "shell.execute_reply": "2025-07-18T02:27:14.854417Z"
    },
    "papermill": {
     "duration": 0.575009,
     "end_time": "2025-07-18T02:27:14.856354",
     "exception": false,
     "start_time": "2025-07-18T02:27:14.281345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Final Test RMSE: 43779.3825\n",
      "Final Test MAPE: 0.0261\n",
      "Final Test MSLE: 0.001031\n",
      "Final Test R² Score: 0.9339\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a7a3c47d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:27:14.878932Z",
     "iopub.status.busy": "2025-07-18T02:27:14.878729Z",
     "iopub.status.idle": "2025-07-18T02:27:15.173783Z",
     "shell.execute_reply": "2025-07-18T02:27:15.173148Z"
    },
    "papermill": {
     "duration": 0.308562,
     "end_time": "2025-07-18T02:27:15.175945",
     "exception": false,
     "start_time": "2025-07-18T02:27:14.867383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "649bd1b9",
   "metadata": {
    "papermill": {
     "duration": 0.011493,
     "end_time": "2025-07-18T02:27:15.199589",
     "exception": false,
     "start_time": "2025-07-18T02:27:15.188096",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4716f98d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T02:27:15.223492Z",
     "iopub.status.busy": "2025-07-18T02:27:15.223251Z",
     "iopub.status.idle": "2025-07-18T02:27:15.256463Z",
     "shell.execute_reply": "2025-07-18T02:27:15.255600Z"
    },
    "papermill": {
     "duration": 0.046445,
     "end_time": "2025-07-18T02:27:15.257572",
     "exception": false,
     "start_time": "2025-07-18T02:27:15.211127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 157.349536,
   "end_time": "2025-07-18T02:27:18.703098",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-18T02:24:41.353562",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
