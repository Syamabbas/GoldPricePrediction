{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dbd2884d",
   "metadata": {
    "papermill": {
     "duration": 0.003934,
     "end_time": "2025-07-22T07:06:56.853915",
     "exception": false,
     "start_time": "2025-07-22T07:06:56.849981",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with GRU\n",
    "- Skenario 1C: Menggunakan harga emas historis + Cadangan Devisa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bef8f03e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:06:56.861195Z",
     "iopub.status.busy": "2025-07-22T07:06:56.860908Z",
     "iopub.status.idle": "2025-07-22T07:06:58.708480Z",
     "shell.execute_reply": "2025-07-22T07:06:58.707684Z"
    },
    "papermill": {
     "duration": 1.852566,
     "end_time": "2025-07-22T07:06:58.709696",
     "exception": false,
     "start_time": "2025-07-22T07:06:56.857130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eac22e6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:06:58.717477Z",
     "iopub.status.busy": "2025-07-22T07:06:58.717199Z",
     "iopub.status.idle": "2025-07-22T07:07:19.437197Z",
     "shell.execute_reply": "2025-07-22T07:07:19.436430Z"
    },
    "papermill": {
     "duration": 20.725285,
     "end_time": "2025-07-22T07:07:19.438720",
     "exception": false,
     "start_time": "2025-07-22T07:06:58.713435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-22 07:07:03.795546: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753168024.151349      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753168024.256972      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4a71c37",
   "metadata": {
    "papermill": {
     "duration": 0.003346,
     "end_time": "2025-07-22T07:07:19.445759",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.442413",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3da031d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.453375Z",
     "iopub.status.busy": "2025-07-22T07:07:19.452914Z",
     "iopub.status.idle": "2025-07-22T07:07:19.485475Z",
     "shell.execute_reply": "2025-07-22T07:07:19.484735Z"
    },
    "papermill": {
     "duration": 0.037801,
     "end_time": "2025-07-22T07:07:19.486682",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.448881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('../input/Dataset Harga Emas dan Indikator Moneter.csv')\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78d46d73",
   "metadata": {
    "papermill": {
     "duration": 0.003224,
     "end_time": "2025-07-22T07:07:19.493249",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.490025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "74cac8f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.500386Z",
     "iopub.status.busy": "2025-07-22T07:07:19.500164Z",
     "iopub.status.idle": "2025-07-22T07:07:19.529446Z",
     "shell.execute_reply": "2025-07-22T07:07:19.528795Z"
    },
    "papermill": {
     "duration": 0.034193,
     "end_time": "2025-07-22T07:07:19.530591",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.496398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9c46a172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.538085Z",
     "iopub.status.busy": "2025-07-22T07:07:19.537834Z",
     "iopub.status.idle": "2025-07-22T07:07:19.550406Z",
     "shell.execute_reply": "2025-07-22T07:07:19.549880Z"
    },
    "papermill": {
     "duration": 0.01736,
     "end_time": "2025-07-22T07:07:19.551458",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.534098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c60d9dec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.559144Z",
     "iopub.status.busy": "2025-07-22T07:07:19.558898Z",
     "iopub.status.idle": "2025-07-22T07:07:19.565843Z",
     "shell.execute_reply": "2025-07-22T07:07:19.565138Z"
    },
    "papermill": {
     "duration": 0.011879,
     "end_time": "2025-07-22T07:07:19.566821",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.554942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8e85c366",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.574465Z",
     "iopub.status.busy": "2025-07-22T07:07:19.574263Z",
     "iopub.status.idle": "2025-07-22T07:07:19.579164Z",
     "shell.execute_reply": "2025-07-22T07:07:19.578464Z"
    },
    "papermill": {
     "duration": 0.010142,
     "end_time": "2025-07-22T07:07:19.580330",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.570188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "adb64d34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.588061Z",
     "iopub.status.busy": "2025-07-22T07:07:19.587596Z",
     "iopub.status.idle": "2025-07-22T07:07:19.590850Z",
     "shell.execute_reply": "2025-07-22T07:07:19.590185Z"
    },
    "papermill": {
     "duration": 0.008292,
     "end_time": "2025-07-22T07:07:19.591963",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.583671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Foreign Exchange Reserves']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "75f4e32b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.599443Z",
     "iopub.status.busy": "2025-07-22T07:07:19.599239Z",
     "iopub.status.idle": "2025-07-22T07:07:19.607536Z",
     "shell.execute_reply": "2025-07-22T07:07:19.607000Z"
    },
    "papermill": {
     "duration": 0.013205,
     "end_time": "2025-07-22T07:07:19.608547",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.595342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "36fa5f84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.616294Z",
     "iopub.status.busy": "2025-07-22T07:07:19.616075Z",
     "iopub.status.idle": "2025-07-22T07:07:19.623538Z",
     "shell.execute_reply": "2025-07-22T07:07:19.622832Z"
    },
    "papermill": {
     "duration": 0.012506,
     "end_time": "2025-07-22T07:07:19.624602",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.612096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "caf24416",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.631837Z",
     "iopub.status.busy": "2025-07-22T07:07:19.631639Z",
     "iopub.status.idle": "2025-07-22T07:07:19.635119Z",
     "shell.execute_reply": "2025-07-22T07:07:19.634424Z"
    },
    "papermill": {
     "duration": 0.008272,
     "end_time": "2025-07-22T07:07:19.636188",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.627916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e0f1e89",
   "metadata": {
    "papermill": {
     "duration": 0.003297,
     "end_time": "2025-07-22T07:07:19.643244",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.639947",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "989f78e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:07:19.650544Z",
     "iopub.status.busy": "2025-07-22T07:07:19.650375Z",
     "iopub.status.idle": "2025-07-22T07:09:37.625992Z",
     "shell.execute_reply": "2025-07-22T07:09:37.625104Z"
    },
    "papermill": {
     "duration": 137.980794,
     "end_time": "2025-07-22T07:09:37.627332",
     "exception": false,
     "start_time": "2025-07-22T07:07:19.646538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753168041.655245      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753168041.656108      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753168046.798131      62 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=20433.5588\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=26570.5959\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=21356.9616\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=31853.9230\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=25176.5898\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=26442.1463\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=43267.4154\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=33839.8896\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=15156.6062\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=16840.9182\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=17883.7502\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=16097.1693\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=16744.2150\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=15718.6737\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=22163.3158\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=17720.8613\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "8      64      0.2         0.0010          32  15156.606219  0.009540   \n",
      "13     64      0.3         0.0010          64  15718.673743  0.009652   \n",
      "11     64      0.2         0.0005          64  16097.169320  0.009499   \n",
      "12     64      0.3         0.0010          32  16744.215024  0.009562   \n",
      "9      64      0.2         0.0010          64  16840.918198  0.009944   \n",
      "\n",
      "          R2  \n",
      "8   0.992079  \n",
      "13  0.991481  \n",
      "11  0.991066  \n",
      "12  0.990333  \n",
      "9   0.990221  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(GRU(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(GRU(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b77270fd",
   "metadata": {
    "papermill": {
     "duration": 0.00702,
     "end_time": "2025-07-22T07:09:37.641707",
     "exception": false,
     "start_time": "2025-07-22T07:09:37.634687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "61eb93c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:09:37.656504Z",
     "iopub.status.busy": "2025-07-22T07:09:37.656298Z",
     "iopub.status.idle": "2025-07-22T07:09:48.418411Z",
     "shell.execute_reply": "2025-07-22T07:09:48.417740Z"
    },
    "papermill": {
     "duration": 10.770969,
     "end_time": "2025-07-22T07:09:48.419523",
     "exception": false,
     "start_time": "2025-07-22T07:09:37.648554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 0.0388 - val_loss: 0.0023\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0018 - val_loss: 4.0262e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0015 - val_loss: 0.0013\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0013 - val_loss: 2.8831e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0014 - val_loss: 7.9532e-04\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0012 - val_loss: 0.0011\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0011 - val_loss: 2.4954e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0010 - val_loss: 5.6564e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.4836e-04 - val_loss: 0.0010\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.5519e-04 - val_loss: 2.5916e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.0456e-04 - val_loss: 8.6332e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.8642e-04 - val_loss: 5.6918e-04\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.8656e-04 - val_loss: 0.0015\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.3829e-04 - val_loss: 0.0011\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 9.2992e-04 - val_loss: 4.5710e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 7.2808e-04 - val_loss: 7.7452e-04\n",
      "Epoch 17/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.5996e-04 - val_loss: 3.7782e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(GRU(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(GRU(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff8483ae",
   "metadata": {
    "papermill": {
     "duration": 0.011863,
     "end_time": "2025-07-22T07:09:48.444271",
     "exception": false,
     "start_time": "2025-07-22T07:09:48.432408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d0d9941e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:09:48.468762Z",
     "iopub.status.busy": "2025-07-22T07:09:48.468488Z",
     "iopub.status.idle": "2025-07-22T07:09:48.946034Z",
     "shell.execute_reply": "2025-07-22T07:09:48.945113Z"
    },
    "papermill": {
     "duration": 0.491262,
     "end_time": "2025-07-22T07:09:48.947239",
     "exception": false,
     "start_time": "2025-07-22T07:09:48.455977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Final Test RMSE: 15322.7789\n",
      "Final Test MAPE: 0.0097\n",
      "Final Test MSLE: 0.000150\n",
      "Final Test R² Score: 0.9919\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8967d1a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:09:48.973324Z",
     "iopub.status.busy": "2025-07-22T07:09:48.972805Z",
     "iopub.status.idle": "2025-07-22T07:09:49.293488Z",
     "shell.execute_reply": "2025-07-22T07:09:49.292733Z"
    },
    "papermill": {
     "duration": 0.335497,
     "end_time": "2025-07-22T07:09:49.295404",
     "exception": false,
     "start_time": "2025-07-22T07:09:48.959907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28d440e2",
   "metadata": {
    "papermill": {
     "duration": 0.013191,
     "end_time": "2025-07-22T07:09:49.322553",
     "exception": false,
     "start_time": "2025-07-22T07:09:49.309362",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1f32735f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T07:09:49.349231Z",
     "iopub.status.busy": "2025-07-22T07:09:49.349007Z",
     "iopub.status.idle": "2025-07-22T07:09:49.389884Z",
     "shell.execute_reply": "2025-07-22T07:09:49.389169Z"
    },
    "papermill": {
     "duration": 0.05574,
     "end_time": "2025-07-22T07:09:49.391202",
     "exception": false,
     "start_time": "2025-07-22T07:09:49.335462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 181.06306,
   "end_time": "2025-07-22T07:09:52.171655",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-22T07:06:51.108595",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
