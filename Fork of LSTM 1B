{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9013d338",
   "metadata": {
    "papermill": {
     "duration": 0.006762,
     "end_time": "2025-09-14T05:03:08.720187",
     "exception": false,
     "start_time": "2025-09-14T05:03:08.713425",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "66066266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:08.732678Z",
     "iopub.status.busy": "2025-09-14T05:03:08.732307Z",
     "iopub.status.idle": "2025-09-14T05:03:11.209475Z",
     "shell.execute_reply": "2025-09-14T05:03:11.208263Z"
    },
    "papermill": {
     "duration": 2.485136,
     "end_time": "2025-09-14T05:03:11.211523",
     "exception": false,
     "start_time": "2025-09-14T05:03:08.726387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4afea77c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:11.225402Z",
     "iopub.status.busy": "2025-09-14T05:03:11.224551Z",
     "iopub.status.idle": "2025-09-14T05:03:34.674953Z",
     "shell.execute_reply": "2025-09-14T05:03:34.673743Z"
    },
    "papermill": {
     "duration": 23.459292,
     "end_time": "2025-09-14T05:03:34.677277",
     "exception": false,
     "start_time": "2025-09-14T05:03:11.217985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-14 05:03:15.879722: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1757826196.176229      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1757826196.279358      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbf5b61f",
   "metadata": {
    "papermill": {
     "duration": 0.004602,
     "end_time": "2025-09-14T05:03:34.687049",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.682447",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51f42074",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.699769Z",
     "iopub.status.busy": "2025-09-14T05:03:34.699114Z",
     "iopub.status.idle": "2025-09-14T05:03:34.735056Z",
     "shell.execute_reply": "2025-09-14T05:03:34.733710Z"
    },
    "papermill": {
     "duration": 0.045522,
     "end_time": "2025-09-14T05:03:34.737492",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.691970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply\n",
      "0  1/3/2017  606000          13485                      116.9    4936881.99\n",
      "1  1/4/2017  606000          13478                      116.9    4936881.99\n",
      "2  1/5/2017  607000          13370                      116.9    4936881.99\n",
      "3  1/6/2017  606000          13347                      116.9    4936881.99\n",
      "4  1/9/2017  602000          13385                      116.9    4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5eab70f",
   "metadata": {
    "papermill": {
     "duration": 0.005122,
     "end_time": "2025-09-14T05:03:34.748214",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.743092",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "41d562d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.760416Z",
     "iopub.status.busy": "2025-09-14T05:03:34.760100Z",
     "iopub.status.idle": "2025-09-14T05:03:34.787336Z",
     "shell.execute_reply": "2025-09-14T05:03:34.785764Z"
    },
    "papermill": {
     "duration": 0.034985,
     "end_time": "2025-09-14T05:03:34.789161",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.754176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d887203f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.802523Z",
     "iopub.status.busy": "2025-09-14T05:03:34.801404Z",
     "iopub.status.idle": "2025-09-14T05:03:34.820763Z",
     "shell.execute_reply": "2025-09-14T05:03:34.819317Z"
    },
    "papermill": {
     "duration": 0.028459,
     "end_time": "2025-09-14T05:03:34.822824",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.794365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e7e028c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.834484Z",
     "iopub.status.busy": "2025-09-14T05:03:34.834178Z",
     "iopub.status.idle": "2025-09-14T05:03:34.844696Z",
     "shell.execute_reply": "2025-09-14T05:03:34.843695Z"
    },
    "papermill": {
     "duration": 0.018486,
     "end_time": "2025-09-14T05:03:34.846529",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.828043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6023c5f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.859979Z",
     "iopub.status.busy": "2025-09-14T05:03:34.859609Z",
     "iopub.status.idle": "2025-09-14T05:03:34.868551Z",
     "shell.execute_reply": "2025-09-14T05:03:34.867191Z"
    },
    "papermill": {
     "duration": 0.01846,
     "end_time": "2025-09-14T05:03:34.870618",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.852158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "580e39ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.882969Z",
     "iopub.status.busy": "2025-09-14T05:03:34.882530Z",
     "iopub.status.idle": "2025-09-14T05:03:34.887680Z",
     "shell.execute_reply": "2025-09-14T05:03:34.886539Z"
    },
    "papermill": {
     "duration": 0.013338,
     "end_time": "2025-09-14T05:03:34.889445",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.876107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c6e6a11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.901432Z",
     "iopub.status.busy": "2025-09-14T05:03:34.901045Z",
     "iopub.status.idle": "2025-09-14T05:03:34.911292Z",
     "shell.execute_reply": "2025-09-14T05:03:34.910273Z"
    },
    "papermill": {
     "duration": 0.018657,
     "end_time": "2025-09-14T05:03:34.913491",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.894834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0364c413",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.926510Z",
     "iopub.status.busy": "2025-09-14T05:03:34.925259Z",
     "iopub.status.idle": "2025-09-14T05:03:34.938037Z",
     "shell.execute_reply": "2025-09-14T05:03:34.936991Z"
    },
    "papermill": {
     "duration": 0.021343,
     "end_time": "2025-09-14T05:03:34.940081",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.918738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4e038134",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.951600Z",
     "iopub.status.busy": "2025-09-14T05:03:34.951292Z",
     "iopub.status.idle": "2025-09-14T05:03:34.957532Z",
     "shell.execute_reply": "2025-09-14T05:03:34.956267Z"
    },
    "papermill": {
     "duration": 0.014342,
     "end_time": "2025-09-14T05:03:34.959666",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.945324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Validation-Test split (70:15:15)\n",
    "train_size = int(0.7 * len(X))\n",
    "val_size   = int(0.15 * len(X))\n",
    "\n",
    "X_train = X[:train_size]\n",
    "y_train = y[:train_size]\n",
    "\n",
    "X_val = X[train_size:train_size + val_size]\n",
    "y_val = y[train_size:train_size + val_size]\n",
    "\n",
    "X_test = X[train_size + val_size:]\n",
    "y_test = y[train_size + val_size:]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8b6defb",
   "metadata": {
    "papermill": {
     "duration": 0.004901,
     "end_time": "2025-09-14T05:03:34.969932",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.965031",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0338e198",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:03:34.981706Z",
     "iopub.status.busy": "2025-09-14T05:03:34.981367Z",
     "iopub.status.idle": "2025-09-14T05:11:39.977498Z",
     "shell.execute_reply": "2025-09-14T05:11:39.975841Z"
    },
    "papermill": {
     "duration": 485.004227,
     "end_time": "2025-09-14T05:11:39.979264",
     "exception": false,
     "start_time": "2025-09-14T05:03:34.975037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-14 05:03:34.996365: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 74ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=38287.8279\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 90ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=82330.3586\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 136ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=58952.7763\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 80ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=62266.9623\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 73ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=94804.8133\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 80ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=68797.8430\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=33184.9284\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=50478.7709\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 76ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=61361.3515\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 84ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=55594.3513\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=63409.9014\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 90ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=32414.2552\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 96ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=67820.5829\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=52151.6383\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 75ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=70715.5036\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=43366.9917\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "11     64      0.2         0.0005          64  32414.255172  0.018814   \n",
      "6      32      0.3         0.0005          32  33184.928426  0.018640   \n",
      "0      32      0.2         0.0010          32  38287.827935  0.022065   \n",
      "15     64      0.3         0.0005          64  43366.991735  0.025301   \n",
      "7      32      0.3         0.0005          64  50478.770900  0.029581   \n",
      "\n",
      "          R2  \n",
      "11  0.954677  \n",
      "6   0.952496  \n",
      "0   0.936763  \n",
      "15  0.918873  \n",
      "7   0.890083  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_val, y_val), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f0c57d",
   "metadata": {
    "papermill": {
     "duration": 0.010415,
     "end_time": "2025-09-14T05:11:40.000545",
     "exception": false,
     "start_time": "2025-09-14T05:11:39.990130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "063fd536",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:11:40.023482Z",
     "iopub.status.busy": "2025-09-14T05:11:40.023150Z",
     "iopub.status.idle": "2025-09-14T05:12:35.739629Z",
     "shell.execute_reply": "2025-09-14T05:12:35.738614Z"
    },
    "papermill": {
     "duration": 55.73024,
     "end_time": "2025-09-14T05:12:35.741547",
     "exception": false,
     "start_time": "2025-09-14T05:11:40.011307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 69ms/step - loss: 0.0162 - val_loss: 7.7577e-04\n",
      "Epoch 2/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 0.0013 - val_loss: 5.9430e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 9.4634e-04 - val_loss: 6.5012e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 58ms/step - loss: 0.0011 - val_loss: 4.4821e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 8.6789e-04 - val_loss: 6.0014e-04\n",
      "Epoch 6/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 8.8969e-04 - val_loss: 3.6582e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 8.4690e-04 - val_loss: 2.7094e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 7.5548e-04 - val_loss: 5.3884e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 7.8322e-04 - val_loss: 5.7194e-04\n",
      "Epoch 10/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 7.2926e-04 - val_loss: 2.7109e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 7.1958e-04 - val_loss: 2.5738e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 6.9085e-04 - val_loss: 2.1690e-04\n",
      "Epoch 13/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 56ms/step - loss: 6.8508e-04 - val_loss: 3.1394e-04\n",
      "Epoch 14/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 5.7127e-04 - val_loss: 8.6813e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 6.8876e-04 - val_loss: 4.2231e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 6.1031e-04 - val_loss: 3.9531e-04\n",
      "Epoch 17/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 56ms/step - loss: 5.9519e-04 - val_loss: 5.2882e-04\n",
      "Epoch 18/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - loss: 5.9797e-04 - val_loss: 3.7653e-04\n",
      "Epoch 19/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 6.3633e-04 - val_loss: 0.0011\n",
      "Epoch 20/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - loss: 6.3906e-04 - val_loss: 4.3198e-04\n",
      "Epoch 21/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 6.5222e-04 - val_loss: 4.8282e-04\n",
      "Epoch 22/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - loss: 5.2018e-04 - val_loss: 3.1272e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_val, y_val),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d4504aa",
   "metadata": {
    "papermill": {
     "duration": 0.106255,
     "end_time": "2025-09-14T05:12:35.892666",
     "exception": false,
     "start_time": "2025-09-14T05:12:35.786411",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5dbf17b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:12:35.981932Z",
     "iopub.status.busy": "2025-09-14T05:12:35.981544Z",
     "iopub.status.idle": "2025-09-14T05:12:37.155999Z",
     "shell.execute_reply": "2025-09-14T05:12:37.154696Z"
    },
    "papermill": {
     "duration": 1.222449,
     "end_time": "2025-09-14T05:12:37.157936",
     "exception": false,
     "start_time": "2025-09-14T05:12:35.935487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 79ms/step\n",
      "Final Test RMSE: 71053.1448\n",
      "Final Test MAPE: 0.0418\n",
      "Final Test MSLE: 0.002602\n",
      "Final Test R² Score: 0.7822\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "51ff0cdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:12:37.252110Z",
     "iopub.status.busy": "2025-09-14T05:12:37.251760Z",
     "iopub.status.idle": "2025-09-14T05:12:37.563483Z",
     "shell.execute_reply": "2025-09-14T05:12:37.562350Z"
    },
    "papermill": {
     "duration": 0.362302,
     "end_time": "2025-09-14T05:12:37.565221",
     "exception": false,
     "start_time": "2025-09-14T05:12:37.202919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Validation RMSE: 14285.5376\n",
      "Validation MAPE: 0.0109\n",
      "Validation R² Score: 0.9151\n"
     ]
    }
   ],
   "source": [
    "# Evaluation on Validation set\n",
    "y_val_pred = final_model.predict(X_val)\n",
    "\n",
    "# inverse transform\n",
    "y_val_pred_inv = scaler.inverse_transform(\n",
    "    np.concatenate((y_val_pred, np.zeros((y_val_pred.shape[0], scaled_features.shape[1]-1))), axis=1)\n",
    ")[:,0]\n",
    "\n",
    "y_val_inv = scaler.inverse_transform(\n",
    "    np.concatenate((y_val.reshape(-1,1), np.zeros((y_val.shape[0], scaled_features.shape[1]-1))), axis=1)\n",
    ")[:,0]\n",
    "\n",
    "# metrics\n",
    "val_rmse = np.sqrt(mean_squared_error(y_val_inv, y_val_pred_inv))\n",
    "val_mape = mean_absolute_percentage_error(y_val_inv, y_val_pred_inv)\n",
    "val_r2   = r2_score(y_val_inv, y_val_pred_inv)\n",
    "\n",
    "print(f\"Validation RMSE: {val_rmse:.4f}\")\n",
    "print(f\"Validation MAPE: {val_mape:.4f}\")\n",
    "print(f\"Validation R² Score: {val_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6c582dd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:12:37.657663Z",
     "iopub.status.busy": "2025-09-14T05:12:37.657274Z",
     "iopub.status.idle": "2025-09-14T05:12:38.147747Z",
     "shell.execute_reply": "2025-09-14T05:12:38.146522Z"
    },
    "papermill": {
     "duration": 0.539216,
     "end_time": "2025-09-14T05:12:38.149294",
     "exception": false,
     "start_time": "2025-09-14T05:12:37.610078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f513aefe",
   "metadata": {
    "papermill": {
     "duration": 0.050302,
     "end_time": "2025-09-14T05:12:38.245968",
     "exception": false,
     "start_time": "2025-09-14T05:12:38.195666",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9c4971f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:12:38.346299Z",
     "iopub.status.busy": "2025-09-14T05:12:38.345974Z",
     "iopub.status.idle": "2025-09-14T05:12:38.392275Z",
     "shell.execute_reply": "2025-09-14T05:12:38.390622Z"
    },
    "papermill": {
     "duration": 0.098415,
     "end_time": "2025-09-14T05:12:38.394557",
     "exception": false,
     "start_time": "2025-09-14T05:12:38.296142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 579.483061,
   "end_time": "2025-09-14T05:12:41.064145",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-14T05:03:01.581084",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
