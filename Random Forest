{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ec3d73cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:17.811730Z",
     "iopub.status.busy": "2025-06-29T08:32:17.811419Z",
     "iopub.status.idle": "2025-06-29T08:32:19.534040Z",
     "shell.execute_reply": "2025-06-29T08:32:19.533175Z"
    },
    "papermill": {
     "duration": 1.732444,
     "end_time": "2025-06-29T08:32:19.535546",
     "exception": false,
     "start_time": "2025-06-29T08:32:17.803102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77a0efeb",
   "metadata": {
    "papermill": {
     "duration": 0.005483,
     "end_time": "2025-06-29T08:32:19.547164",
     "exception": false,
     "start_time": "2025-06-29T08:32:19.541681",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Random Forest\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29afe9ff",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:19.559935Z",
     "iopub.status.busy": "2025-06-29T08:32:19.559508Z",
     "iopub.status.idle": "2025-06-29T08:32:21.871593Z",
     "shell.execute_reply": "2025-06-29T08:32:21.870519Z"
    },
    "papermill": {
     "duration": 2.320465,
     "end_time": "2025-06-29T08:32:21.873383",
     "exception": false,
     "start_time": "2025-06-29T08:32:19.552918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aa3df35f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:21.889248Z",
     "iopub.status.busy": "2025-06-29T08:32:21.888781Z",
     "iopub.status.idle": "2025-06-29T08:32:21.910838Z",
     "shell.execute_reply": "2025-06-29T08:32:21.909677Z"
    },
    "papermill": {
     "duration": 0.032375,
     "end_time": "2025-06-29T08:32:21.912441",
     "exception": false,
     "start_time": "2025-06-29T08:32:21.880066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gold_data = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1a94a0ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:21.925326Z",
     "iopub.status.busy": "2025-06-29T08:32:21.924655Z",
     "iopub.status.idle": "2025-06-29T08:32:21.947846Z",
     "shell.execute_reply": "2025-06-29T08:32:21.946973Z"
    },
    "papermill": {
     "duration": 0.030986,
     "end_time": "2025-06-29T08:32:21.949312",
     "exception": false,
     "start_time": "2025-06-29T08:32:21.918326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Kurs</th>\n",
       "      <th>Cadangan Devisa</th>\n",
       "      <th>Money Supply (M2)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/3/2017</td>\n",
       "      <td>606000</td>\n",
       "      <td>13485</td>\n",
       "      <td>116.9</td>\n",
       "      <td>4936881.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/4/2017</td>\n",
       "      <td>606000</td>\n",
       "      <td>13478</td>\n",
       "      <td>116.9</td>\n",
       "      <td>4936881.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/5/2017</td>\n",
       "      <td>607000</td>\n",
       "      <td>13370</td>\n",
       "      <td>116.9</td>\n",
       "      <td>4936881.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/6/2017</td>\n",
       "      <td>606000</td>\n",
       "      <td>13347</td>\n",
       "      <td>116.9</td>\n",
       "      <td>4936881.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/9/2017</td>\n",
       "      <td>602000</td>\n",
       "      <td>13385</td>\n",
       "      <td>116.9</td>\n",
       "      <td>4936881.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
       "0  1/3/2017  606000  13485            116.9         4936881.99\n",
       "1  1/4/2017  606000  13478            116.9         4936881.99\n",
       "2  1/5/2017  607000  13370            116.9         4936881.99\n",
       "3  1/6/2017  606000  13347            116.9         4936881.99\n",
       "4  1/9/2017  602000  13385            116.9         4936881.99"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1a3064a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:21.962209Z",
     "iopub.status.busy": "2025-06-29T08:32:21.961503Z",
     "iopub.status.idle": "2025-06-29T08:32:21.970806Z",
     "shell.execute_reply": "2025-06-29T08:32:21.970083Z"
    },
    "papermill": {
     "duration": 0.016926,
     "end_time": "2025-06-29T08:32:21.972116",
     "exception": false,
     "start_time": "2025-06-29T08:32:21.955190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Kurs</th>\n",
       "      <th>Cadangan Devisa</th>\n",
       "      <th>Money Supply (M2)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1927</th>\n",
       "      <td>12/23/2024</td>\n",
       "      <td>1533000</td>\n",
       "      <td>16159</td>\n",
       "      <td>155.7</td>\n",
       "      <td>9210815.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1928</th>\n",
       "      <td>12/24/2024</td>\n",
       "      <td>1520000</td>\n",
       "      <td>16208</td>\n",
       "      <td>155.7</td>\n",
       "      <td>9210815.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1929</th>\n",
       "      <td>12/27/2024</td>\n",
       "      <td>1528000</td>\n",
       "      <td>16251</td>\n",
       "      <td>155.7</td>\n",
       "      <td>9210815.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1930</th>\n",
       "      <td>12/30/2024</td>\n",
       "      <td>1528000</td>\n",
       "      <td>16162</td>\n",
       "      <td>155.7</td>\n",
       "      <td>9210815.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1931</th>\n",
       "      <td>12/31/2024</td>\n",
       "      <td>1515000</td>\n",
       "      <td>16157</td>\n",
       "      <td>155.7</td>\n",
       "      <td>9210815.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
       "1927  12/23/2024  1533000  16159            155.7         9210815.72\n",
       "1928  12/24/2024  1520000  16208            155.7         9210815.72\n",
       "1929  12/27/2024  1528000  16251            155.7         9210815.72\n",
       "1930  12/30/2024  1528000  16162            155.7         9210815.72\n",
       "1931  12/31/2024  1515000  16157            155.7         9210815.72"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " gold_data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "60b1782c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:21.985282Z",
     "iopub.status.busy": "2025-06-29T08:32:21.984542Z",
     "iopub.status.idle": "2025-06-29T08:32:21.989727Z",
     "shell.execute_reply": "2025-06-29T08:32:21.989105Z"
    },
    "papermill": {
     "duration": 0.012819,
     "end_time": "2025-06-29T08:32:21.990935",
     "exception": false,
     "start_time": "2025-06-29T08:32:21.978116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1932, 5)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b1a1602f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.003838Z",
     "iopub.status.busy": "2025-06-29T08:32:22.003558Z",
     "iopub.status.idle": "2025-06-29T08:32:22.024071Z",
     "shell.execute_reply": "2025-06-29T08:32:22.023220Z"
    },
    "papermill": {
     "duration": 0.028588,
     "end_time": "2025-06-29T08:32:22.025537",
     "exception": false,
     "start_time": "2025-06-29T08:32:21.996949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "gold_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fd3de061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.039331Z",
     "iopub.status.busy": "2025-06-29T08:32:22.038573Z",
     "iopub.status.idle": "2025-06-29T08:32:22.050082Z",
     "shell.execute_reply": "2025-06-29T08:32:22.049239Z"
    },
    "papermill": {
     "duration": 0.019646,
     "end_time": "2025-06-29T08:32:22.051332",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.031686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 3 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   Date    1932 non-null   object\n",
      " 1   Price   1932 non-null   int64 \n",
      " 2   Kurs    1932 non-null   int64 \n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 45.4+ KB\n"
     ]
    }
   ],
   "source": [
    "gold_data.drop(['Cadangan Devisa', 'Money Supply (M2)'], axis=1, inplace=True)\n",
    "gold_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "211a0174",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.065096Z",
     "iopub.status.busy": "2025-06-29T08:32:22.064487Z",
     "iopub.status.idle": "2025-06-29T08:32:22.078300Z",
     "shell.execute_reply": "2025-06-29T08:32:22.077605Z"
    },
    "papermill": {
     "duration": 0.021849,
     "end_time": "2025-06-29T08:32:22.079670",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.057821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gold_data['Date'] = pd.to_datetime(gold_data['Date'])\n",
    "gold_data.sort_values(by='Date', ascending=True, inplace=True)\n",
    "gold_data.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "529df111",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.093576Z",
     "iopub.status.busy": "2025-06-29T08:32:22.092759Z",
     "iopub.status.idle": "2025-06-29T08:32:22.103962Z",
     "shell.execute_reply": "2025-06-29T08:32:22.103106Z"
    },
    "papermill": {
     "duration": 0.019327,
     "end_time": "2025-06-29T08:32:22.105345",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.086018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 3 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   Date    1932 non-null   datetime64[ns]\n",
      " 1   Price   1932 non-null   float64       \n",
      " 2   Kurs    1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(2)\n",
      "memory usage: 45.4 KB\n"
     ]
    }
   ],
   "source": [
    "# Preprocess numeric columns\n",
    "NumCols = gold_data.columns.drop(['Date'])\n",
    "gold_data[NumCols] = gold_data[NumCols].astype('float64')\n",
    "gold_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5d3c815d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.118782Z",
     "iopub.status.busy": "2025-06-29T08:32:22.118228Z",
     "iopub.status.idle": "2025-06-29T08:32:22.124714Z",
     "shell.execute_reply": "2025-06-29T08:32:22.123992Z"
    },
    "papermill": {
     "duration": 0.014413,
     "end_time": "2025-06-29T08:32:22.125915",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.111502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date     0\n",
       "Price    0\n",
       "Kurs     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0f48e4e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.139068Z",
     "iopub.status.busy": "2025-06-29T08:32:22.138780Z",
     "iopub.status.idle": "2025-06-29T08:32:22.144579Z",
     "shell.execute_reply": "2025-06-29T08:32:22.143816Z"
    },
    "papermill": {
     "duration": 0.013819,
     "end_time": "2025-06-29T08:32:22.145841",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.132022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "print(\"Duplicates:\", gold_data.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "aa435747",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.162575Z",
     "iopub.status.busy": "2025-06-29T08:32:22.162296Z",
     "iopub.status.idle": "2025-06-29T08:32:22.187082Z",
     "shell.execute_reply": "2025-06-29T08:32:22.186289Z"
    },
    "papermill": {
     "duration": 0.033543,
     "end_time": "2025-06-29T08:32:22.188425",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.154882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Kurs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1932</td>\n",
       "      <td>1.932000e+03</td>\n",
       "      <td>1932.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2020-12-31 10:34:17.142857216</td>\n",
       "      <td>9.065005e+05</td>\n",
       "      <td>14578.114389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2017-01-03 00:00:00</td>\n",
       "      <td>5.970000e+05</td>\n",
       "      <td>13154.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2019-01-09 18:00:00</td>\n",
       "      <td>6.710000e+05</td>\n",
       "      <td>14078.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2021-01-04 12:00:00</td>\n",
       "      <td>9.340000e+05</td>\n",
       "      <td>14418.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2022-12-19 06:00:00</td>\n",
       "      <td>1.024000e+06</td>\n",
       "      <td>15178.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2024-12-31 00:00:00</td>\n",
       "      <td>1.567000e+06</td>\n",
       "      <td>16741.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.332594e+05</td>\n",
       "      <td>801.869612</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Date         Price          Kurs\n",
       "count                           1932  1.932000e+03   1932.000000\n",
       "mean   2020-12-31 10:34:17.142857216  9.065005e+05  14578.114389\n",
       "min              2017-01-03 00:00:00  5.970000e+05  13154.000000\n",
       "25%              2019-01-09 18:00:00  6.710000e+05  14078.500000\n",
       "50%              2021-01-04 12:00:00  9.340000e+05  14418.000000\n",
       "75%              2022-12-19 06:00:00  1.024000e+06  15178.000000\n",
       "max              2024-12-31 00:00:00  1.567000e+06  16741.000000\n",
       "std                              NaN  2.332594e+05    801.869612"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "11432480",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.203697Z",
     "iopub.status.busy": "2025-06-29T08:32:22.203419Z",
     "iopub.status.idle": "2025-06-29T08:32:22.208897Z",
     "shell.execute_reply": "2025-06-29T08:32:22.208186Z"
    },
    "papermill": {
     "duration": 0.014429,
     "end_time": "2025-06-29T08:32:22.210213",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.195784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = gold_data.drop([\"Date\", \"Price\"], axis=1)\n",
    "Y = gold_data[\"Price\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e107d6a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.223737Z",
     "iopub.status.busy": "2025-06-29T08:32:22.223483Z",
     "iopub.status.idle": "2025-06-29T08:32:22.229778Z",
     "shell.execute_reply": "2025-06-29T08:32:22.228873Z"
    },
    "papermill": {
     "duration": 0.014461,
     "end_time": "2025-06-29T08:32:22.231096",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.216635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Kurs\n",
      "0     13485.0\n",
      "1     13478.0\n",
      "2     13370.0\n",
      "3     13347.0\n",
      "4     13385.0\n",
      "...       ...\n",
      "1927  16159.0\n",
      "1928  16208.0\n",
      "1929  16251.0\n",
      "1930  16162.0\n",
      "1931  16157.0\n",
      "\n",
      "[1932 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "81d3b0b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.244419Z",
     "iopub.status.busy": "2025-06-29T08:32:22.244171Z",
     "iopub.status.idle": "2025-06-29T08:32:22.249635Z",
     "shell.execute_reply": "2025-06-29T08:32:22.248625Z"
    },
    "papermill": {
     "duration": 0.013611,
     "end_time": "2025-06-29T08:32:22.250993",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.237382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        606000.0\n",
      "1        606000.0\n",
      "2        607000.0\n",
      "3        606000.0\n",
      "4        602000.0\n",
      "          ...    \n",
      "1927    1533000.0\n",
      "1928    1520000.0\n",
      "1929    1528000.0\n",
      "1930    1528000.0\n",
      "1931    1515000.0\n",
      "Name: Price, Length: 1932, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cb36a90c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.265160Z",
     "iopub.status.busy": "2025-06-29T08:32:22.264436Z",
     "iopub.status.idle": "2025-06-29T08:32:22.268900Z",
     "shell.execute_reply": "2025-06-29T08:32:22.268227Z"
    },
    "papermill": {
     "duration": 0.012776,
     "end_time": "2025-06-29T08:32:22.270221",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.257445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_size = int(len(X) * 0.8)\n",
    "X_train, X_test = X[:train_size], X[train_size:]\n",
    "Y_train, Y_test = Y[:train_size], Y[train_size:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "747549fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.284407Z",
     "iopub.status.busy": "2025-06-29T08:32:22.283939Z",
     "iopub.status.idle": "2025-06-29T08:32:22.287643Z",
     "shell.execute_reply": "2025-06-29T08:32:22.286892Z"
    },
    "papermill": {
     "duration": 0.012113,
     "end_time": "2025-06-29T08:32:22.288808",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.276695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0dd04c38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.303051Z",
     "iopub.status.busy": "2025-06-29T08:32:22.302526Z",
     "iopub.status.idle": "2025-06-29T08:32:22.306384Z",
     "shell.execute_reply": "2025-06-29T08:32:22.305727Z"
    },
    "papermill": {
     "duration": 0.012218,
     "end_time": "2025-06-29T08:32:22.307548",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.295330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "regressor = RandomForestRegressor(n_estimators=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "27d31faf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.321447Z",
     "iopub.status.busy": "2025-06-29T08:32:22.320875Z",
     "iopub.status.idle": "2025-06-29T08:32:22.586694Z",
     "shell.execute_reply": "2025-06-29T08:32:22.585870Z"
    },
    "papermill": {
     "duration": 0.274085,
     "end_time": "2025-06-29T08:32:22.588000",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.313915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e80be6e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.604074Z",
     "iopub.status.busy": "2025-06-29T08:32:22.603425Z",
     "iopub.status.idle": "2025-06-29T08:32:22.615358Z",
     "shell.execute_reply": "2025-06-29T08:32:22.614544Z"
    },
    "papermill": {
     "duration": 0.021796,
     "end_time": "2025-06-29T08:32:22.617071",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.595275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data_prediction = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ab89a9a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.631759Z",
     "iopub.status.busy": "2025-06-29T08:32:22.631226Z",
     "iopub.status.idle": "2025-06-29T08:32:22.638421Z",
     "shell.execute_reply": "2025-06-29T08:32:22.637279Z"
    },
    "papermill": {
     "duration": 0.015812,
     "end_time": "2025-06-29T08:32:22.639729",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.623917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 788250.         1027880.          897757.47619048 1003270.\n",
      " 1004896.66666667  780796.66666667  925200.          959066.83333333\n",
      " 1020420.          807462.75       1007401.64285714  965047.73809524\n",
      "  984760.          988989.97619048 1029300.          697922.33333333\n",
      " 1013390.          957100.          973379.66666667  944130.\n",
      "  963094.85714286 1000143.66666667  965485.5         975570.\n",
      "  965485.5         940140.          983050.          947230.\n",
      " 1037800.          937160.          697680.83333333  962009.\n",
      "  828309.5         990706.61904762  957100.          934420.83333333\n",
      "  973379.66666667 1024201.33333333  975570.          954140.\n",
      "  934420.83333333  940140.          959066.83333333  825129.5\n",
      "  980098.33333333  962190.         1028347.          970160.\n",
      " 1028347.          791340.          741750.          690260.\n",
      "  697000.          777955.         1021480.         1050450.\n",
      " 1021480.         1021480.         1063690.         1034860.\n",
      " 1021480.          782690.          956880.          955360.\n",
      "  790100.          761240.          714240.          782690.\n",
      "  903548.          784320.         1021480.         1051000.\n",
      " 1050450.         1050450.         1050450.         1042380.\n",
      "  973670.         1042380.          995530.         1047960.\n",
      "  964710.          964910.         1029540.          956020.\n",
      " 1001200.         1009710.          946730.         1012530.\n",
      "  990188.66666667 1004600.         1002136.66666667  984915.\n",
      "  952880.          957869.28571429  872687.66666667  976876.66666667\n",
      "  957849.28571429  941775.          957855.          996400.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  959690.          959690.          959690.          958840.\n",
      "  946740.         1011326.66666667  985505.          956672.5\n",
      "  966303.9047619   874386.66666667  976121.66666667  957260.\n",
      "  993089.33333333  957260.         1023850.         1018800.\n",
      "  987440.         1011326.66666667 1008206.66666667 1009370.\n",
      " 1018830.         1029540.          939370.         1009710.\n",
      " 1018950.          957260.          957260.          948160.\n",
      "  965050.         1000758.          986105.          985505.\n",
      "  962920.          957260.         1013130.          957260.\n",
      "  965010.         1009410.          946730.          976450.\n",
      "  978130.         1018800.          962450.          964220.\n",
      " 1009710.         1012530.         1011230.         1012530.\n",
      "  956620.          960290.          968530.          955100.\n",
      " 1001306.66666667 1002725.          985965.          984915.\n",
      "  995088.33333333  971507.5         958090.          958840.\n",
      "  959690.          959690.          955920.          955920.\n",
      "  958840.          971800.          997848.66666667  955690.\n",
      "  959405.          981711.42857143 1007906.66666667 1002391.66666667\n",
      "  962192.5         985965.          996970.          996970.\n",
      "  985965.         1018086.66666667 1011245.          963527.5\n",
      "  970680.          941775.          965843.9047619   963240.\n",
      "  977200.          963240.          996970.         1007810.\n",
      "  988540.          958900.         1000740.          971640.\n",
      "  874386.66666667  982470.          994160.          958840.\n",
      "  955920.          955920.          959690.          959690.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  959690.          933480.          941220.          933480.\n",
      "  868860.          933480.          944100.          933480.\n",
      "  933480.          933480.          944100.          868860.\n",
      "  933480.          933760.          948010.          936320.\n",
      "  933760.          933760.          933480.          933760.\n",
      "  959690.          959690.          959690.          948010.\n",
      "  953140.          933760.          933760.          933480.\n",
      "  938100.          944100.          933480.          933480.\n",
      "  868860.          868860.          933480.          864900.\n",
      "  864500.          864500.          868340.          940530.\n",
      "  933110.          934470.          944670.          934420.\n",
      "  940080.          934420.          934470.          953900.\n",
      "  933110.          941030.          941030.          927560.\n",
      "  920580.          868860.          868860.          938100.\n",
      "  933480.          933480.          933480.          933480.\n",
      "  933480.          933480.          933480.          933480.\n",
      "  933480.          933480.          868860.          864500.\n",
      "  868340.          920580.          864500.          941220.\n",
      "  933480.          933480.          933480.          933760.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  965133.9047619   971800.          941775.          959892.\n",
      "  938950.         1012410.          954920.          955240.\n",
      " 1047960.          957260.          943870.          989640.\n",
      "  962450.          948160.          955650.          946260.\n",
      "  991560.         1048810.         1018950.         1018950.\n",
      "  978130.         1024250.          989640.         1050450.\n",
      " 1050450.          948660.          949981.66666667  777275.83333333\n",
      "  870183.          980098.33333333 1028347.          999980.\n",
      " 1020800.          697000.          903548.          971210.\n",
      "  964220.          948000.          981650.         1002391.66666667\n",
      "  996970.          994805.83333333  955690.          955100.\n",
      "  948160.         1013130.          999510.         1000360.\n",
      "  969110.          996949.4047619  1011326.66666667  985505.\n",
      "  982470.          975920.          996400.          997848.66666667\n",
      "  963240.          977200.          958840.          959690.\n",
      "  958840.          981650.          947910.          958840.\n",
      "  958840.          959690.          959690.          959690.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  959690.          959690.          959690.          959690.\n",
      "  954520.          948010.          936320.          933760.\n",
      "  868860.          868860.          933480.          933480.\n",
      "  944100.          933480.          933480.        ]\n"
     ]
    }
   ],
   "source": [
    "print(test_data_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "df605991",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.654801Z",
     "iopub.status.busy": "2025-06-29T08:32:22.654507Z",
     "iopub.status.idle": "2025-06-29T08:32:22.665575Z",
     "shell.execute_reply": "2025-06-29T08:32:22.664762Z"
    },
    "papermill": {
     "duration": 0.019914,
     "end_time": "2025-06-29T08:32:22.666814",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.646900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R squared error:  -3.113630708301492\n",
      "RMSE: 347335.1745\n",
      "MAPE: 0.2212\n",
      "MSLE: 0.091961\n"
     ]
    }
   ],
   "source": [
    "# Evaluasi\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, mean_squared_log_error\n",
    "\n",
    "rmse = np.sqrt(mean_squared_error(Y_test, test_data_prediction))\n",
    "mape = mean_absolute_percentage_error(Y_test, test_data_prediction)\n",
    "msle = mean_squared_log_error(Y_test, test_data_prediction)\n",
    "error_score = metrics.r2_score(Y_test, test_data_prediction)\n",
    "\n",
    "print(\"R squared error: \", error_score)\n",
    "print(f\"RMSE: {rmse:.4f}\")\n",
    "print(f\"MAPE: {mape:.4f}\")\n",
    "print(f\"MSLE: {msle:.6f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b92b259f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.681986Z",
     "iopub.status.busy": "2025-06-29T08:32:22.681476Z",
     "iopub.status.idle": "2025-06-29T08:32:22.685492Z",
     "shell.execute_reply": "2025-06-29T08:32:22.684661Z"
    },
    "papermill": {
     "duration": 0.012904,
     "end_time": "2025-06-29T08:32:22.686781",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.673877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Y_test = list(Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8fc4a4c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.701553Z",
     "iopub.status.busy": "2025-06-29T08:32:22.701260Z",
     "iopub.status.idle": "2025-06-29T08:32:22.969949Z",
     "shell.execute_reply": "2025-06-29T08:32:22.969072Z"
    },
    "papermill": {
     "duration": 0.27829,
     "end_time": "2025-06-29T08:32:22.971918",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.693628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Y_test, color=\"blue\", label=\"Actual Value\")\n",
    "plt.plot(test_data_prediction, color=\"green\", label=\"Predicted Value\")\n",
    "plt.title(\"Actual Price vs Predicted Price\")\n",
    "plt.xlabel(\"Number of values\")\n",
    "plt.ylabel(\"GLD Price\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ce4182bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:22.989442Z",
     "iopub.status.busy": "2025-06-29T08:32:22.989147Z",
     "iopub.status.idle": "2025-06-29T08:32:23.138011Z",
     "shell.execute_reply": "2025-06-29T08:32:23.137063Z"
    },
    "papermill": {
     "duration": 0.159078,
     "end_time": "2025-06-29T08:32:23.139389",
     "exception": false,
     "start_time": "2025-06-29T08:32:22.980311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/categorical.py:645: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  g_vals = grouped_vals.get_group(g)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Feature Importance dari Random Forest\n",
    "importances = regressor.feature_importances_\n",
    "features = X.columns\n",
    "feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})\n",
    "feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(x='Importance', y='Feature', data=feature_importance_df)\n",
    "plt.title('Feature Importance from Random Forest')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "df2ef300",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:23.157548Z",
     "iopub.status.busy": "2025-06-29T08:32:23.156773Z",
     "iopub.status.idle": "2025-06-29T08:32:23.427870Z",
     "shell.execute_reply": "2025-06-29T08:32:23.427085Z"
    },
    "papermill": {
     "duration": 0.282565,
     "end_time": "2025-06-29T08:32:23.430470",
     "exception": false,
     "start_time": "2025-06-29T08:32:23.147905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisasi Prediksi vs Aktual dengan Penambahan Styling\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(Y_test, label='Actual Price', color='blue')\n",
    "plt.plot(test_data_prediction, label='Predicted Price', color='green')\n",
    "plt.title(\"Gold Price Prediction - Random Forest\")\n",
    "plt.xlabel(\"Observation Index\")\n",
    "plt.ylabel(\"Price (Rp)\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f07573da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:23.452379Z",
     "iopub.status.busy": "2025-06-29T08:32:23.452072Z",
     "iopub.status.idle": "2025-06-29T08:32:23.456289Z",
     "shell.execute_reply": "2025-06-29T08:32:23.455570Z"
    },
    "papermill": {
     "duration": 0.016475,
     "end_time": "2025-06-29T08:32:23.457543",
     "exception": false,
     "start_time": "2025-06-29T08:32:23.441068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from scipy.stats import randint\n",
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c7d271f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:23.479129Z",
     "iopub.status.busy": "2025-06-29T08:32:23.478781Z",
     "iopub.status.idle": "2025-06-29T08:32:23.485757Z",
     "shell.execute_reply": "2025-06-29T08:32:23.484723Z"
    },
    "papermill": {
     "duration": 0.01943,
     "end_time": "2025-06-29T08:32:23.487302",
     "exception": false,
     "start_time": "2025-06-29T08:32:23.467872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameter grid\n",
    "param_dist = {\n",
    "    'n_estimators': randint(100, 500),\n",
    "    'max_depth': [None] + list(np.arange(5, 30, 5)),\n",
    "    'min_samples_split': randint(2, 10),\n",
    "    'min_samples_leaf': randint(1, 10),\n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'bootstrap': [True, False]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ad9b2b62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:23.508829Z",
     "iopub.status.busy": "2025-06-29T08:32:23.508517Z",
     "iopub.status.idle": "2025-06-29T08:32:23.512755Z",
     "shell.execute_reply": "2025-06-29T08:32:23.511928Z"
    },
    "papermill": {
     "duration": 0.016624,
     "end_time": "2025-06-29T08:32:23.514138",
     "exception": false,
     "start_time": "2025-06-29T08:32:23.497514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Inisiasi model\n",
    "rf = RandomForestRegressor(random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b2768c78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:23.535777Z",
     "iopub.status.busy": "2025-06-29T08:32:23.535471Z",
     "iopub.status.idle": "2025-06-29T08:32:23.540023Z",
     "shell.execute_reply": "2025-06-29T08:32:23.539127Z"
    },
    "papermill": {
     "duration": 0.016938,
     "end_time": "2025-06-29T08:32:23.541483",
     "exception": false,
     "start_time": "2025-06-29T08:32:23.524545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# RandomizedSearchCV\n",
    "random_search = RandomizedSearchCV(\n",
    "    estimator=rf,\n",
    "    param_distributions=param_dist,\n",
    "    n_iter=50,  # jumlah kombinasi yang dicoba\n",
    "    cv=5,\n",
    "    verbose=2,\n",
    "    random_state=42,\n",
    "    n_jobs=-1,\n",
    "    scoring='neg_mean_squared_error'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "362004b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:32:23.564054Z",
     "iopub.status.busy": "2025-06-29T08:32:23.563424Z",
     "iopub.status.idle": "2025-06-29T08:33:22.098063Z",
     "shell.execute_reply": "2025-06-29T08:33:22.097233Z"
    },
    "papermill": {
     "duration": 58.547694,
     "end_time": "2025-06-29T08:33:22.099574",
     "exception": false,
     "start_time": "2025-06-29T08:32:23.551880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END bootstrap=True, max_depth=15, max_features=auto, min_samples_leaf=8, min_samples_split=6, n_estimators=120; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=auto, min_samples_leaf=8, min_samples_split=6, n_estimators=120; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=log2, min_samples_leaf=7, min_samples_split=4, n_estimators=187; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=6, n_estimators=357; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=3, n_estimators=291; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=6, min_samples_split=6, n_estimators=335; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=6, min_samples_split=6, n_estimators=335; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=3, min_samples_split=5, n_estimators=154; total time=   0.7s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=5, min_samples_split=4, n_estimators=234; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=188; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=sqrt, min_samples_leaf=9, min_samples_split=3, n_estimators=152; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=7, min_samples_split=5, n_estimators=363; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=149; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=149; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=7, n_estimators=205; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=3, n_estimators=143; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=3, n_estimators=143; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=4, min_samples_split=7, n_estimators=450; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=7, n_estimators=395; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=9, n_estimators=316; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=auto, min_samples_leaf=9, min_samples_split=6, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=auto, min_samples_leaf=9, min_samples_split=6, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=auto, min_samples_leaf=9, min_samples_split=6, n_estimators=114; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=7, min_samples_split=2, n_estimators=443; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=3, min_samples_split=2, n_estimators=491; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=3, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=3, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=9, min_samples_split=9, n_estimators=367; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=7, min_samples_split=7, n_estimators=315; total time=   0.9s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=3, min_samples_split=2, n_estimators=326; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=3, min_samples_split=2, n_estimators=326; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=6, n_estimators=317; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=8, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=451; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=7, n_estimators=330; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=4, min_samples_split=6, n_estimators=259; total time=   0.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=4, min_samples_split=6, n_estimators=259; total time=   0.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=6, min_samples_split=5, n_estimators=165; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=9, min_samples_split=6, n_estimators=233; total time=   0.7s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=7, min_samples_split=5, n_estimators=330; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=7, min_samples_split=5, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=297; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=297; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=406; total time=   1.2s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=9, n_estimators=195; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=151; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=2, min_samples_split=4, n_estimators=212; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=2, min_samples_split=4, n_estimators=212; total time=   1.2s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=229; total time=   1.2s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=5, min_samples_split=9, n_estimators=324; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=6, n_estimators=271; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=4, min_samples_split=8, n_estimators=302; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=424; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=6, min_samples_split=4, n_estimators=339; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=6, min_samples_split=4, n_estimators=339; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=448; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=4, min_samples_split=4, n_estimators=445; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=227; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=227; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=auto, min_samples_leaf=9, min_samples_split=2, n_estimators=250; total time=   0.7s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END bootstrap=True, max_depth=15, max_features=auto, min_samples_leaf=8, min_samples_split=6, n_estimators=120; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=log2, min_samples_leaf=7, min_samples_split=4, n_estimators=187; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=6, n_estimators=357; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=3, n_estimators=291; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=3, n_estimators=291; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=6, min_samples_split=6, n_estimators=335; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=3, min_samples_split=5, n_estimators=154; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=5, min_samples_split=4, n_estimators=234; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=5, min_samples_split=4, n_estimators=234; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=188; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=sqrt, min_samples_leaf=9, min_samples_split=3, n_estimators=152; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=7, min_samples_split=5, n_estimators=363; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=149; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=7, n_estimators=205; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=7, n_estimators=205; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=3, n_estimators=143; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=4, min_samples_split=7, n_estimators=450; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=7, n_estimators=395; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=9, n_estimators=316; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=9, n_estimators=316; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=auto, min_samples_leaf=9, min_samples_split=6, n_estimators=114; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=7, min_samples_split=2, n_estimators=443; total time=   1.3s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=3, min_samples_split=2, n_estimators=491; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=3, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=3, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=9, min_samples_split=9, n_estimators=367; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=7, min_samples_split=7, n_estimators=315; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=7, min_samples_split=7, n_estimators=315; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=3, min_samples_split=2, n_estimators=326; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=6, n_estimators=317; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=8, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=451; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=7, n_estimators=330; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=7, n_estimators=330; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=4, min_samples_split=6, n_estimators=259; total time=   0.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=6, min_samples_split=5, n_estimators=165; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=9, min_samples_split=6, n_estimators=233; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=7, min_samples_split=5, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=9, min_samples_split=4, n_estimators=220; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=9, min_samples_split=4, n_estimators=220; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=297; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=406; total time=   1.2s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=9, n_estimators=195; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=9, n_estimators=195; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=151; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=2, min_samples_split=4, n_estimators=212; total time=   0.9s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=229; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=229; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=5, min_samples_split=9, n_estimators=324; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=6, n_estimators=271; total time=   0.9s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=6, n_estimators=271; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=4, min_samples_split=8, n_estimators=302; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=424; total time=   1.2s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=6, min_samples_split=4, n_estimators=339; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=448; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=448; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=4, min_samples_split=4, n_estimators=445; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=227; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=auto, min_samples_leaf=9, min_samples_split=2, n_estimators=250; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=sqrt, min_samples_leaf=3, min_samples_split=8, n_estimators=351; total time=   1.1s[CV] END bootstrap=True, max_depth=15, max_features=auto, min_samples_leaf=8, min_samples_split=6, n_estimators=120; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=log2, min_samples_leaf=7, min_samples_split=4, n_estimators=187; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=6, n_estimators=357; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=6, n_estimators=357; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=3, n_estimators=291; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=6, min_samples_split=6, n_estimators=335; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=3, min_samples_split=5, n_estimators=154; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=5, min_samples_split=4, n_estimators=234; total time=   0.9s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=188; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=sqrt, min_samples_leaf=9, min_samples_split=3, n_estimators=152; total time=   0.7s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=sqrt, min_samples_leaf=9, min_samples_split=3, n_estimators=152; total time=   0.4s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=7, min_samples_split=5, n_estimators=363; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=149; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=149; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=7, n_estimators=205; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=3, n_estimators=143; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=4, min_samples_split=7, n_estimators=450; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=4, min_samples_split=7, n_estimators=450; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=7, n_estimators=395; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=9, n_estimators=316; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=auto, min_samples_leaf=9, min_samples_split=6, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=7, min_samples_split=2, n_estimators=443; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=3, min_samples_split=2, n_estimators=491; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=3, min_samples_split=2, n_estimators=491; total time=   1.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=9, min_samples_split=9, n_estimators=367; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=9, min_samples_split=9, n_estimators=367; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=7, min_samples_split=7, n_estimators=315; total time=   0.9s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=3, min_samples_split=2, n_estimators=326; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=6, n_estimators=317; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=8, n_estimators=114; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=8, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=451; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=451; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=7, n_estimators=330; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=4, min_samples_split=6, n_estimators=259; total time=   0.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=6, min_samples_split=5, n_estimators=165; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=9, min_samples_split=6, n_estimators=233; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=7, min_samples_split=5, n_estimators=330; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=9, min_samples_split=4, n_estimators=220; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=9, min_samples_split=4, n_estimators=220; total time=   0.7s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=297; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=406; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=9, n_estimators=195; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=9, n_estimators=195; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=151; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=2, min_samples_split=4, n_estimators=212; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=229; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=5, min_samples_split=9, n_estimators=324; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=5, min_samples_split=9, n_estimators=324; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=6, n_estimators=271; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=4, min_samples_split=8, n_estimators=302; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=4, min_samples_split=8, n_estimators=302; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=424; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=6, min_samples_split=4, n_estimators=339; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=448; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=4, min_samples_split=4, n_estimators=445; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=4, min_samples_split=4, n_estimators=445; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=auto, min_samples_leaf=9, min_samples_split=2, n_estimators=250; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=auto, min_samples_leaf=9, min_samples_split=2, n_estimators=250; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=sqrt, min_samples_leaf=3, min_samples_split=8, n_estimators=351; total time=   1.1s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END bootstrap=True, max_depth=15, max_features=auto, min_samples_leaf=8, min_samples_split=6, n_estimators=120; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=log2, min_samples_leaf=7, min_samples_split=4, n_estimators=187; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=log2, min_samples_leaf=7, min_samples_split=4, n_estimators=187; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=6, min_samples_split=6, n_estimators=357; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=3, n_estimators=291; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=6, min_samples_split=6, n_estimators=335; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=3, min_samples_split=5, n_estimators=154; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=3, min_samples_split=5, n_estimators=154; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=5, min_samples_split=4, n_estimators=234; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=188; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=188; total time=   0.7s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=sqrt, min_samples_leaf=9, min_samples_split=3, n_estimators=152; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=7, min_samples_split=5, n_estimators=363; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=log2, min_samples_leaf=7, min_samples_split=5, n_estimators=363; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=6, min_samples_split=7, n_estimators=205; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=3, n_estimators=143; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=4, min_samples_split=7, n_estimators=450; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=7, n_estimators=395; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=7, n_estimators=395; total time=   1.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=9, n_estimators=316; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=7, min_samples_split=2, n_estimators=443; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=7, min_samples_split=2, n_estimators=443; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=3, min_samples_split=2, n_estimators=491; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=3, n_estimators=330; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=9, min_samples_split=9, n_estimators=367; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=7, min_samples_split=7, n_estimators=315; total time=   0.9s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=3, min_samples_split=2, n_estimators=326; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=6, n_estimators=317; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=6, n_estimators=317; total time=   1.2s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=log2, min_samples_leaf=9, min_samples_split=8, n_estimators=114; total time=   0.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=451; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=7, n_estimators=330; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=auto, min_samples_leaf=4, min_samples_split=6, n_estimators=259; total time=   0.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=6, min_samples_split=5, n_estimators=165; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=6, min_samples_split=5, n_estimators=165; total time=   0.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=9, min_samples_split=6, n_estimators=233; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=9, min_samples_split=6, n_estimators=233; total time=   0.7s\n",
      "[CV] END bootstrap=False, max_depth=15, max_features=sqrt, min_samples_leaf=7, min_samples_split=5, n_estimators=330; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=9, min_samples_split=4, n_estimators=220; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=3, min_samples_split=8, n_estimators=297; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=406; total time=   1.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=406; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=151; total time=   0.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=151; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=2, min_samples_split=4, n_estimators=212; total time=   1.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=1, min_samples_split=3, n_estimators=229; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=5, min_samples_split=9, n_estimators=324; total time=   1.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=6, n_estimators=271; total time=   0.9s\n",
      "[CV] END bootstrap=False, max_depth=25, max_features=log2, min_samples_leaf=4, min_samples_split=8, n_estimators=302; total time=   1.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=424; total time=   1.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=424; total time=   1.3s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=sqrt, min_samples_leaf=6, min_samples_split=4, n_estimators=339; total time=   0.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=auto, min_samples_leaf=6, min_samples_split=9, n_estimators=448; total time=   1.3s\n",
      "[CV] END bootstrap=True, max_depth=15, max_features=log2, min_samples_leaf=4, min_samples_split=4, n_estimators=445; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=227; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=227; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=5, max_features=auto, min_samples_leaf=9, min_samples_split=2, n_estimators=250; total time=   0.7s\n",
      "[CV] END bootstrap=True, max_depth=25, max_features=sqrt, min_samples_leaf=3, min_samples_split=8, n_estimators=351; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=4, min_samples_split=5, n_estimators=468; total time=   1.1s\n",
      "[CV] END bootstrap=False, max_depth=5, max_features=auto, min_samples_leaf=4, min_samples_split=5, n_estimators=468; total time=   1.1s"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
       "                   n_iter=50, n_jobs=-1,\n",
       "                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n",
       "                                        &#x27;max_depth&#x27;: [None, 5, 10, 15, 20, 25],\n",
       "                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;,\n",
       "                                                         &#x27;log2&#x27;],\n",
       "                                        &#x27;min_samples_leaf&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54f11abd50&gt;,\n",
       "                                        &#x27;min_samples_split&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54dfbb5890&gt;,\n",
       "                                        &#x27;n_estimators&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54dfcaf3d0&gt;},\n",
       "                   random_state=42, scoring=&#x27;neg_mean_squared_error&#x27;,\n",
       "                   verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
       "                   n_iter=50, n_jobs=-1,\n",
       "                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n",
       "                                        &#x27;max_depth&#x27;: [None, 5, 10, 15, 20, 25],\n",
       "                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;,\n",
       "                                                         &#x27;log2&#x27;],\n",
       "                                        &#x27;min_samples_leaf&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54f11abd50&gt;,\n",
       "                                        &#x27;min_samples_split&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54dfbb5890&gt;,\n",
       "                                        &#x27;n_estimators&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54dfcaf3d0&gt;},\n",
       "                   random_state=42, scoring=&#x27;neg_mean_squared_error&#x27;,\n",
       "                   verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
       "                   n_iter=50, n_jobs=-1,\n",
       "                   param_distributions={'bootstrap': [True, False],\n",
       "                                        'max_depth': [None, 5, 10, 15, 20, 25],\n",
       "                                        'max_features': ['auto', 'sqrt',\n",
       "                                                         'log2'],\n",
       "                                        'min_samples_leaf': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54f11abd50>,\n",
       "                                        'min_samples_split': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54dfbb5890>,\n",
       "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7d54dfcaf3d0>},\n",
       "                   random_state=42, scoring='neg_mean_squared_error',\n",
       "                   verbose=2)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training\n",
    "random_search.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f283eb37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:33:22.186396Z",
     "iopub.status.busy": "2025-06-29T08:33:22.185521Z",
     "iopub.status.idle": "2025-06-29T08:33:22.190345Z",
     "shell.execute_reply": "2025-06-29T08:33:22.189461Z"
    },
    "papermill": {
     "duration": 0.021002,
     "end_time": "2025-06-29T08:33:22.191669",
     "exception": false,
     "start_time": "2025-06-29T08:33:22.170667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'bootstrap': True, 'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 7, 'min_samples_split': 4, 'n_estimators': 187}\n"
     ]
    }
   ],
   "source": [
    "# Output best parameters\n",
    "print(\"Best Parameters:\", random_search.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d2b270c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:33:22.221017Z",
     "iopub.status.busy": "2025-06-29T08:33:22.220391Z",
     "iopub.status.idle": "2025-06-29T08:33:22.234824Z",
     "shell.execute_reply": "2025-06-29T08:33:22.233794Z"
    },
    "papermill": {
     "duration": 0.030794,
     "end_time": "2025-06-29T08:33:22.236416",
     "exception": false,
     "start_time": "2025-06-29T08:33:22.205622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE setelah tuning: 116833094608.78067\n"
     ]
    }
   ],
   "source": [
    "# Model terbaik\n",
    "best_rf = random_search.best_estimator_\n",
    "\n",
    "# Prediksi dan evaluasi\n",
    "y_pred = best_rf.predict(X_test)\n",
    "mse = mean_squared_error(Y_test, y_pred)\n",
    "print(\"MSE setelah tuning:\", mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a4cb2637",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:33:22.266174Z",
     "iopub.status.busy": "2025-06-29T08:33:22.265313Z",
     "iopub.status.idle": "2025-06-29T08:33:22.271133Z",
     "shell.execute_reply": "2025-06-29T08:33:22.270409Z"
    },
    "papermill": {
     "duration": 0.02195,
     "end_time": "2025-06-29T08:33:22.272360",
     "exception": false,
     "start_time": "2025-06-29T08:33:22.250410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score setelah tuning: -2.9837644218636057\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "r2 = r2_score(Y_test, y_pred)\n",
    "print(\"R2 Score setelah tuning:\", r2)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 71.667235,
   "end_time": "2025-06-29T08:33:24.905977",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-29T08:32:13.238742",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
