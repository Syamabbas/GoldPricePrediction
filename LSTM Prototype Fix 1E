{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "46691279",
   "metadata": {
    "papermill": {
     "duration": 0.003862,
     "end_time": "2025-07-17T13:04:22.322135",
     "exception": false,
     "start_time": "2025-07-17T13:04:22.318273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1E: Menggunakan harga emas historis + Kurs + Cadangan Devisa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "088580fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:22.329480Z",
     "iopub.status.busy": "2025-07-17T13:04:22.329237Z",
     "iopub.status.idle": "2025-07-17T13:04:23.796430Z",
     "shell.execute_reply": "2025-07-17T13:04:23.795667Z"
    },
    "papermill": {
     "duration": 1.472189,
     "end_time": "2025-07-17T13:04:23.797581",
     "exception": false,
     "start_time": "2025-07-17T13:04:22.325392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6819f81f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:23.805625Z",
     "iopub.status.busy": "2025-07-17T13:04:23.805320Z",
     "iopub.status.idle": "2025-07-17T13:04:37.335350Z",
     "shell.execute_reply": "2025-07-17T13:04:37.334713Z"
    },
    "papermill": {
     "duration": 13.535601,
     "end_time": "2025-07-17T13:04:37.336758",
     "exception": false,
     "start_time": "2025-07-17T13:04:23.801157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-17 13:04:26.573413: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752757466.787299      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752757466.844827      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bc7a389",
   "metadata": {
    "papermill": {
     "duration": 0.003108,
     "end_time": "2025-07-17T13:04:37.343414",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.340306",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c2fe86c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.351208Z",
     "iopub.status.busy": "2025-07-17T13:04:37.350735Z",
     "iopub.status.idle": "2025-07-17T13:04:37.383773Z",
     "shell.execute_reply": "2025-07-17T13:04:37.382975Z"
    },
    "papermill": {
     "duration": 0.03826,
     "end_time": "2025-07-17T13:04:37.384823",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.346563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75d5d56d",
   "metadata": {
    "papermill": {
     "duration": 0.002978,
     "end_time": "2025-07-17T13:04:37.391150",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.388172",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa5b2bc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.398359Z",
     "iopub.status.busy": "2025-07-17T13:04:37.398136Z",
     "iopub.status.idle": "2025-07-17T13:04:37.418761Z",
     "shell.execute_reply": "2025-07-17T13:04:37.418067Z"
    },
    "papermill": {
     "duration": 0.025488,
     "end_time": "2025-07-17T13:04:37.419782",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.394294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b12282fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.427505Z",
     "iopub.status.busy": "2025-07-17T13:04:37.427316Z",
     "iopub.status.idle": "2025-07-17T13:04:37.438427Z",
     "shell.execute_reply": "2025-07-17T13:04:37.437878Z"
    },
    "papermill": {
     "duration": 0.015958,
     "end_time": "2025-07-17T13:04:37.439439",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.423481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e1cb02c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.446613Z",
     "iopub.status.busy": "2025-07-17T13:04:37.446412Z",
     "iopub.status.idle": "2025-07-17T13:04:37.452647Z",
     "shell.execute_reply": "2025-07-17T13:04:37.451977Z"
    },
    "papermill": {
     "duration": 0.010922,
     "end_time": "2025-07-17T13:04:37.453651",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.442729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "49c0f28a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.461188Z",
     "iopub.status.busy": "2025-07-17T13:04:37.460761Z",
     "iopub.status.idle": "2025-07-17T13:04:37.465747Z",
     "shell.execute_reply": "2025-07-17T13:04:37.464985Z"
    },
    "papermill": {
     "duration": 0.009766,
     "end_time": "2025-07-17T13:04:37.466745",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.456979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24e43e3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.474018Z",
     "iopub.status.busy": "2025-07-17T13:04:37.473793Z",
     "iopub.status.idle": "2025-07-17T13:04:37.476842Z",
     "shell.execute_reply": "2025-07-17T13:04:37.476342Z"
    },
    "papermill": {
     "duration": 0.007731,
     "end_time": "2025-07-17T13:04:37.477792",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.470061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate', 'Foreign Exchange Reserves']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "218d73f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.485322Z",
     "iopub.status.busy": "2025-07-17T13:04:37.485118Z",
     "iopub.status.idle": "2025-07-17T13:04:37.492592Z",
     "shell.execute_reply": "2025-07-17T13:04:37.492105Z"
    },
    "papermill": {
     "duration": 0.012348,
     "end_time": "2025-07-17T13:04:37.493529",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.481181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1c41a94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.500757Z",
     "iopub.status.busy": "2025-07-17T13:04:37.500565Z",
     "iopub.status.idle": "2025-07-17T13:04:37.510673Z",
     "shell.execute_reply": "2025-07-17T13:04:37.510191Z"
    },
    "papermill": {
     "duration": 0.014864,
     "end_time": "2025-07-17T13:04:37.511710",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.496846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "80291c93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.519006Z",
     "iopub.status.busy": "2025-07-17T13:04:37.518778Z",
     "iopub.status.idle": "2025-07-17T13:04:37.522173Z",
     "shell.execute_reply": "2025-07-17T13:04:37.521633Z"
    },
    "papermill": {
     "duration": 0.008101,
     "end_time": "2025-07-17T13:04:37.523132",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.515031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdcc46f0",
   "metadata": {
    "papermill": {
     "duration": 0.003088,
     "end_time": "2025-07-17T13:04:37.529685",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.526597",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "55fc5bba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:04:37.537109Z",
     "iopub.status.busy": "2025-07-17T13:04:37.536919Z",
     "iopub.status.idle": "2025-07-17T13:06:23.353281Z",
     "shell.execute_reply": "2025-07-17T13:06:23.352593Z"
    },
    "papermill": {
     "duration": 105.821513,
     "end_time": "2025-07-17T13:06:23.354390",
     "exception": false,
     "start_time": "2025-07-17T13:04:37.532877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752757478.823598      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1752757478.824334      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1752757483.423093      61 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=67048.6334\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=49506.4191\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=64422.2540\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=31601.6627\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=60137.3187\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=122479.0885\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=48885.5152\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=52538.2491\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=41409.1617\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=51769.0273\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=45599.3108\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=27575.1764\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=24958.4380\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=27726.2422\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=63370.0999\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=49725.2040\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "12     64      0.3         0.0010          32  24958.437966  0.016026   \n",
      "11     64      0.2         0.0005          64  27575.176396  0.016671   \n",
      "13     64      0.3         0.0010          64  27726.242208  0.018154   \n",
      "3      32      0.2         0.0005          64  31601.662749  0.020780   \n",
      "8      64      0.2         0.0010          32  41409.161690  0.023719   \n",
      "\n",
      "          R2  \n",
      "12  0.978522  \n",
      "11  0.973783  \n",
      "13  0.973495  \n",
      "3   0.965567  \n",
      "8   0.940879  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb55b18f",
   "metadata": {
    "papermill": {
     "duration": 0.005825,
     "end_time": "2025-07-17T13:06:23.366541",
     "exception": false,
     "start_time": "2025-07-17T13:06:23.360716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "217d5636",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:06:23.378853Z",
     "iopub.status.busy": "2025-07-17T13:06:23.378654Z",
     "iopub.status.idle": "2025-07-17T13:06:30.792256Z",
     "shell.execute_reply": "2025-07-17T13:06:30.791518Z"
    },
    "papermill": {
     "duration": 7.421322,
     "end_time": "2025-07-17T13:06:30.793555",
     "exception": false,
     "start_time": "2025-07-17T13:06:23.372233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step - loss: 0.0269 - val_loss: 0.0028\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0017 - val_loss: 0.0047\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0015 - val_loss: 0.0038\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0016 - val_loss: 0.0052\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0034\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0049\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0053\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0058\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0011 - val_loss: 0.0067\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0011 - val_loss: 0.0056\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.5549e-04 - val_loss: 0.0033\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "209b886b",
   "metadata": {
    "papermill": {
     "duration": 0.009459,
     "end_time": "2025-07-17T13:06:30.813411",
     "exception": false,
     "start_time": "2025-07-17T13:06:30.803952",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f1f2fffb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:06:30.833470Z",
     "iopub.status.busy": "2025-07-17T13:06:30.833239Z",
     "iopub.status.idle": "2025-07-17T13:06:31.812957Z",
     "shell.execute_reply": "2025-07-17T13:06:31.812198Z"
    },
    "papermill": {
     "duration": 0.991064,
     "end_time": "2025-07-17T13:06:31.814086",
     "exception": false,
     "start_time": "2025-07-17T13:06:30.823022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 64ms/step\n",
      "Final Test RMSE: 51418.4999\n",
      "Final Test MAPE: 0.0283\n",
      "Final Test MSLE: 0.001379\n",
      "Final Test R² Score: 0.9088\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "36938291",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:06:31.834605Z",
     "iopub.status.busy": "2025-07-17T13:06:31.834380Z",
     "iopub.status.idle": "2025-07-17T13:06:32.129778Z",
     "shell.execute_reply": "2025-07-17T13:06:32.129060Z"
    },
    "papermill": {
     "duration": 0.30697,
     "end_time": "2025-07-17T13:06:32.131181",
     "exception": false,
     "start_time": "2025-07-17T13:06:31.824211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABW4AAAJOCAYAAAAnP56mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3iUddbG8e9Meg/pCSmE3quADQHBAujaK65Y1o6udVffdVXUtay66tpdEexdURAVRJEi0nsvIQlJSO91MvO8fzzJQEgCCSSZQO7PdeVK5qlnJkHizZnzsxiGYSAiIiIiIiIiIiIi7YbV1QWIiIiIiIiIiIiISF0KbkVERERERERERETaGQW3IiIiIiIiIiIiIu2MglsRERERERERERGRdkbBrYiIiIiIiIiIiEg7o+BWREREREREREREpJ1RcCsiIiIiIiIiIiLSzii4FREREREREREREWlnFNyKiIiIiIiIiIiItDMKbkVERERa2cyZM7FYLOzdu/eIx3bp0oXrrruu1WtauHAhFouFhQsXtvq92pPHHnsMi8VSZ1tLv+bXXXcdXbp0abHrucqYMWMYM2ZMq96joe9He3Isf06a8+deREREpCEKbkVEREQOkpSUxNSpU+nZsye+vr74+vrSt29f7rjjDjZs2ODq8pwsFovzw2q1EhMTw9lnn93ug9jjte5Dpaen89hjj7Fu3TpXl3LUDv5eHPwRFRXl6tLque6667BYLAQGBlJeXl5v/86dO531P//88y6oUERERKTlubu6ABEREZH2Ys6cOVxxxRW4u7szefJkBg0ahNVqZdu2bXz99de88cYbJCUlkZCQ4OpSATjrrLO49tprMQyDpKQkXn/9dc4880y+//57JkyYcNhzzzjjDMrLy/H09Gyjag84lrpbw/bt27Fam9fPkJ6ezrRp0+jSpQuDBw+us+9///sfDoejBStsPbXfi4P5+PgAMG/ePFeU1Ch3d3fKysqYPXs2l19+eZ19H330Ed7e3lRUVLioOhEREZGWp+BWREREBNi9ezdXXnklCQkJLFiwgOjo6Dr7n332WV5//fVmB3ytqWfPnlxzzTXOxxdddBEDBw7kpZdeajQAraiowNPTE6vVire3d1uVWsex1t3SvLy8WvR6Hh4eLXq91nTo9+Jgrgj1D8fLy4vTTjuNTz75pF5w+/HHHzNp0iS++uorF1UnIiIi0vLaz/95iIiIiLjQv//9b0pLS5kxY0a90BbMbr+77rqLuLi4Ott/+eUXRo0ahZ+fH8HBwVxwwQVs3br1iPczDIMnn3yS2NhYfH19GTt2LJs3bz6m5zBgwADCwsJISkoCDszn/PTTT3n44Yfp3Lkzvr6+FBUVNTq7c/ny5UycOJFOnTrh5+fHwIEDefnll+scs23bNi699FJCQkLw9vbmpJNO4rvvvmuTumtrPPfccwkKCsLX15fRo0ezdOnSetddsmQJw4cPx9vbm27duvHWW281eP+GZtwWFBRwzz330KVLF7y8vIiNjeXaa68lJyeHhQsXMnz4cACuv/5651v0Z86cCTQ847a0tJT77ruPuLg4vLy86NWrF88//zyGYdQ5zmKxMHXqVGbNmkX//v3x8vKiX79+/Pjjj819WY/ZoTNua78vn3/+Of/617+IjY3F29ubcePGsWvXrjrnLl68mMsuu4z4+Hi8vLyIi4vjnnvuaXDMQXNcffXV/PDDDxQUFDi3rVy5kp07d3L11Vc3eM6ePXu47LLLCAkJwdfXl5NPPpnvv/++3nH79u3jwgsvxM/Pj4iICO655x4qKysbvGZTfwZFREREjoU6bkVEREQwxyR0796dkSNHNvmcn3/+mQkTJtC1a1cee+wxysvLeeWVVzjttNNYs2bNYReoeuSRR3jyySeZOHEiEydOZM2aNZx99tlUVVUd9XPIz88nPz+f7t2719n+xBNP4Onpyf33309lZWWjnZTz58/nvPPOIzo6mr/+9a9ERUWxdetW5syZw1//+lcANm/ezGmnnUbnzp158MEH8fPz4/PPP+fCCy/kq6++4qKLLmrVun/55RcmTJjAsGHDePTRR7FarcyYMYMzzzyTxYsXM2LECAA2btzI2WefTXh4OI899hjV1dU8+uijREZGHrGekpISRo0axdatW7nhhhsYOnQoOTk5fPfdd+zbt48+ffrw+OOP88gjj3DzzTczatQoAE499dQGr2cYBn/605/49ddfufHGGxk8eDA//fQTDzzwAGlpabz44ot1jl+yZAlff/01t99+OwEBAfz3v//lkksuISUlhdDQ0Ga/vodTUVFBTk5OnW0BAQGH7UJ+5plnsFqt3H///RQWFvLvf/+byZMns3z5cucxX3zxBWVlZdx2222EhoayYsUKXnnlFfbt28cXX3xx1PVefPHF3HrrrXz99dfccMMNgNlt27t3b4YOHVrv+MzMTE499VTKysq46667CA0N5b333uNPf/oTX375pfPntby8nHHjxpGSksJdd91FTEwMH3zwAb/88ku9azb1Z1BERETkmBkiIiIiHVxhYaEBGBdeeGG9ffn5+UZ2drbzo6yszLlv8ODBRkREhJGbm+vctn79esNqtRrXXnutc9uMGTMMwEhKSjIMwzCysrIMT09PY9KkSYbD4XAe93//938GYEyZMuWINQPGjTfeaGRnZxtZWVnG8uXLjXHjxhmA8cILLxiGYRi//vqrARhdu3atU/fB+3799VfDMAyjurraSExMNBISEoz8/Pw6xx5c47hx44wBAwYYFRUVdfafeuqpRo8ePVq1bofDYfTo0cM455xz6tRUVlZmJCYmGmeddZZz24UXXmh4e3sbycnJzm1btmwx3NzcjEN/BU5ISKjzmj/yyCMGYHz99df16q+978qVKw3AmDFjRr1jpkyZYiQkJDgfz5o1ywCMJ598ss5xl156qWGxWIxdu3bVeX08PT3rbFu/fr0BGK+88kq9ex0LoMGP2uc0evRoY/To0c7ja78vffr0MSorK53bX375ZQMwNm7c6Nx26M+bYRjG008/bVgsljrfk0cffbTe96MhU6ZMMfz8/AzDMF+3cePGGYZhGHa73YiKijKmTZtmJCUlGYDx3HPPOc+7++67DcBYvHixc1txcbGRmJhodOnSxbDb7YZhGMZLL71kAMbnn3/uPK60tNTo3r17nT8nzfkZPPTPvYiIiEhzaVSCiIiIdHi1b8H39/evt2/MmDGEh4c7P1577TUAMjIyWLduHddddx0hISHO4wcOHMhZZ53F3LlzG73fzz//TFVVFXfeeScWi8W5/e67725W3dOnTyc8PJyIiAhGjhzJ0qVLuffee+tdZ8qUKc4Fpxqzdu1akpKSuPvuuwkODq6zr7bGvLw8fvnlFy6//HKKi4vJyckhJyeH3NxczjnnHHbu3ElaWlqr1b1u3TrnW+Jzc3Od9y8tLWXcuHEsWrQIh8OB3W7np59+4sILLyQ+Pt55fp8+fTjnnHOOWN9XX33FoEGDGuwePvj71VRz587Fzc2Nu+66q872++67D8Mw+OGHH+psHz9+PN26dXM+HjhwIIGBgezZs6fZ9z6SCy64gPnz59f5ONJrdP3119fp2q7tOD64voO/b6WlpeTk5HDqqadiGAZr1649ppqvvvpqFi5cyP79+/nll1/Yv39/o2MS5s6dy4gRIzj99NOd2/z9/bn55pvZu3cvW7ZscR4XHR3NpZde6jzO19eXm2++uc71mvozKCIiItISOvSohEWLFvHcc8+xevVqMjIy+Oabb7jwwgubdQ3DMHjhhRd4++23SU5OJiwsjNtvv51//OMfrVO0iIiItLiAgADAfIv8od566y2Ki4vJzMyss4hTcnIyAL169ap3Tp8+ffjpp58oLS3Fz8+v3v7ac3v06FFne3h4OJ06dWpy3RdccAFTp07FYrEQEBBAv379GrxfYmLiEa+1e/duAPr379/oMbt27cIwDP75z3/yz3/+s8FjsrKy6Ny5c6vUvXPnTsAMdBtTWFhIZWUl5eXl9V5fML9fhwvVwXwtLrnkksMe0xzJycnExMQ4f85q9enTx7n/YAeHzbU6depEfn7+Ye+zf//+Oo+DgoKOGNjHxsYyfvz4wx5zqEPrq/2ZPbi+lJQUHnnkEb777rt6dRcWFjbrfoeaOHEiAQEBfPbZZ6xbt47hw4fTvXt39u7dW+/Y5OTkBsefHPza9+/fn+TkZLp3714vmD/0z3dTfwab8+dYREREpDEdOrgtLS1l0KBB3HDDDVx88cVHdY2//vWvzJs3j+eff54BAwaQl5dHXl5eC1cqIiIirSkoKIjo6Gg2bdpUb19t6NNQKORqTQ3djhTeNVVtJ+H999/faFfmoXNqG3K0ddfe/7nnnmPw4MENnuPv79/oglLHCzc3twa3G4csZHaoQxfVmzFjRr1F11rCkeqz2+2cddZZ5OXl8fe//53evXvj5+dHWloa11133TF3pHp5eXHxxRfz3nvvsWfPHh577LFjul5zNPVnUERERKQldOjgdsKECUyYMKHR/ZWVlfzjH//gk08+oaCggP79+/Pss886V9fdunUrb7zxBps2bXL+a3xTOlpERESk/Zk0aRLvvPMOK1asaNLiQgkJCQBs37693r5t27YRFhbWYBfpwefu3LmTrl27OrdnZ2cfsauytdS+NX/Tpk2Nhqq1tXp4eDS7S7Ml1NYYGBh42PuHh4fj4+Pj7I48WEPfr4bu01CIf7DmjExISEjg559/pri4uE7X7bZt25z7W8L8+fPrPO7Xr1+LXLe5Nm7cyI4dO3jvvfe49tprndsPre9YXH311bz77rtYrVauvPLKRo9LSEho9M9o7f7az5s2bcIwjDrf20PPberPoIiIiEhL0Izbw5g6dSrLli3j008/ZcOGDVx22WWce+65zv8JmD17Nl27dmXOnDkkJibSpUsX/vKXv6jjVkRE5Dj0t7/9DV9fX2644QYyMzPr7T+02zE6OprBgwfz3nvvUVBQ4Ny+adMm5s2bx8SJExu91/jx4/Hw8OCVV16pc92XXnrpmJ/H0Ro6dCiJiYm89NJLdZ4PHHjuERERjBkzhrfeeouMjIx618jOzm7VGocNG0a3bt14/vnnGxxrUXt/Nzc3zjnnHGbNmkVKSopz/9atW/npp5+OeJ9LLrmE9evX880339TbV/ta1Ibyh75WDZk4cSJ2u51XX321zvYXX3wRi8Vy2EaC5hg/fnydj0M7cNtKbUfuwT/bhmHw8ssvt9g9xo4dyxNPPMGrr75KVFRUo8dNnDiRFStWsGzZMue20tJS3n77bbp06ULfvn2dx6Wnp/Pll186jysrK+Ptt9+uc72m/gyKiIiItIQO3XF7OCkpKcyYMYOUlBRiYmIA822BP/74IzNmzOCpp55iz549JCcn88UXX/D+++9jt9u55557uPTSS/nll19c/AxERESkOXr06MHHH3/MVVddRa9evZg8eTKDBg3CMAySkpL4+OOPsVqtxMbGOs957rnnmDBhAqeccgo33ngj5eXlvPLKKwQFBR327dvh4eHcf//9PP3005x33nlMnDiRtWvX8sMPPxAWFtYGz7Y+q9XKG2+8wfnnn8/gwYO5/vrriY6OZtu2bWzevNkZeL722mucfvrpDBgwgJtuuomuXbuSmZnJsmXL2LdvH+vXr2/VGt955x0mTJhAv379uP766+ncuTNpaWn8+uuvBAYGMnv2bACmTZvGjz/+yKhRo7j99tuprq7mlVdeoV+/fmzYsOGw93nggQf48ssvueyyy7jhhhsYNmwYeXl5fPfdd7z55psMGjSIbt26ERwczJtvvklAQAB+fn6MHDmywXdfnX/++YwdO5Z//OMf7N27l0GDBjFv3jy+/fZb7r777joLkZ0IevfuTbdu3bj//vtJS0sjMDCQr776qkW7ya1WKw8//PARj3vwwQf55JNPmDBhAnfddRchISG89957JCUl8dVXX2G1mn0sN910E6+++irXXnstq1evJjo6mg8++ABfX996923qz6CIiIjIsVJw24iNGzdit9vp2bNnne2VlZWEhoYC5oyryspK3n//fedx06dPZ9iwYWzfvr3BxUpERESk/brgggvYuHEjL7zwAvPmzePdd9/FYrGQkJDApEmTuPXWWxk0aJDz+PHjx/Pjjz/y6KOP8sgjj+Dh4cHo0aN59tlnjzg+6cknn8Tb25s333yTX3/9lZEjRzJv3jwmTZrU2k+zUeeccw6//vor06ZN44UXXsDhcNCtWzduuukm5zF9+/Zl1apVTJs2jZkzZ5Kbm0tERARDhgzhkUceafUax4wZw7Jly5zdliUlJURFRTFy5EhuueUW53EDBw7kp59+4t577+WRRx4hNjaWadOmkZGRccTg1t/fn8WLF/Poo4/yzTff8N577xEREcG4ceOcwb2HhwfvvfceDz30ELfeeivV1dXMmDGjwe+71Wrlu+++45FHHuGzzz5jxowZdOnSheeee4777ruvZV+gdsDDw4PZs2dz11138fTTT+Pt7c1FF13E1KlT6/z5aQuRkZH8/vvv/P3vf+eVV16hoqKCgQMHMnv27Dp/1nx9fVmwYAF33nknr7zyCr6+vkyePJkJEyZw7rnn1rlmU38GRURERI6VxTjSKgcdhMVi4ZtvvuHCCy8E4LPPPmPy5Mls3ry53gIM/v7+REVF8eijj/LUU09hs9mc+8rLy/H19WXevHmcddZZbfkURERERERERERE5AShjttGDBkyBLvdTlZWFqNGjWrwmNNOO43q6mp2797tfIvbjh07gJZbZEJEREREREREREQ6ng7dcVtSUsKuXbsAM6j9z3/+w9ixYwkJCSE+Pp5rrrmGpUuX8sILLzBkyBCys7NZsGABAwcOZNKkSTgcDoYPH46/vz8vvfQSDoeDO+64g8DAQObNm+fiZyciIiIiIiIiIiLHqw4d3C5cuJCxY8fW2z5lyhRmzpyJzWbjySef5P333yctLY2wsDBOPvlkpk2bxoABAwBIT0/nzjvvZN68efj5+TFhwgReeOEFQkJC2vrpiIiIiIiIiIiIyAmiQwe3IiIiIiIiIiIiIu2R1dUFiIiIiIiIiIiIiEhdCm5FRERERERERERE2hl3VxfQ1hwOB+np6QQEBGCxWFxdjoiIiIiIiIiIiHQQhmFQXFxMTEwMVuvhe2o7XHCbnp5OXFycq8sQERERERERERGRDio1NZXY2NjDHtPhgtuAgADAfHECAwNdXI2IiIg0xmazMW/ePM4++2w8PDxcXY6IiIiIiLSijvL7f1FREXFxcc6M8nA6XHBbOx4hMDBQwa2IiEg7ZrPZ8PX1JTAw8IT+xU1ERERERDre7/9NGeGqxclERERERERERERE2hkFtyIiIiIiIiIiIiLtjIJbERERERERERERkXamw824bSq73Y7NZnN1GXKC8fDwwM3NzdVliIiIiIiIiIhIO6fg9hCGYbB//34KCgpcXYqcoIKDg4mKimrSEGoREREREREREemYFNweoja0jYiIwNfXV+GatBjDMCgrKyMrKwuA6OhoF1ckIiIiIiIiIiLtlYLbg9jtdmdoGxoa6upy5ATk4+MDQFZWFhERERqbICIiIiIiIiIiDdLiZAepnWnr6+vr4krkRFb786UZyiIiIiIiIiIi0hgFtw3QeARpTfr5EhERERERERGRI1FwKyIiIiIiIiIiItLOKLiVNmGxWJg1a1aLX7dLly689NJLLX5dERERERERERERV1Jwe4JZtmwZbm5uTJo0qdnnujIEve6667BYLFgsFjw9PenevTuPP/441dXVhz1v5cqV3HzzzW1UpYiIiIiIiIiISNtQcHuCmT59OnfeeSeLFi0iPT3d1eU0y7nnnktGRgY7d+7kvvvu47HHHuO5555r8NiqqioAwsPDtZiciIiIiIiIiIiccBTcnkBKSkr47LPPuO2225g0aRIzZ86sd8zs2bMZPnw43t7ehIWFcdFFFwEwZswYkpOTueeee5ydrwCPPfYYgwcPrnONl156iS5dujgfr1y5krPOOouwsDCCgoIYPXo0a9asaXb9Xl5eREVFkZCQwG233cb48eP57rvvALMj98ILL+Rf//oXMTEx9OrVC6jfJVxQUMAtt9xCZGQk3t7e9O/fnzlz5jj3L1myhFGjRuHj40NcXBx33XUXpaWlza5VRERERERERESkNSm4PQLDMCirqnbJh2EYzar1888/p3fv3vTq1YtrrrmGd999t841vv/+ey666CImTpzI2rVrWbBgASNGjADg66+/JjY2lscff5yMjAwyMjKafN/i4mKmTJnCkiVL+OOPP+jRowcTJ06kuLi4WfUfysfHx9lZC7BgwQK2b9/O/Pnz64SxtRwOBxMmTGDp0qV8+OGHbNmyhWeeeQY3NzcAdu/ezbnnnssll1zChg0b+Oyzz1iyZAlTp049pjpFRERERERERERamrurC2jvym12+j7yk0vuveXxc/D1bPq3aPr06VxzzTWAOXagsLCQ3377jTFjxgDwr3/9iyuvvJJp06Y5zxk0aBAAISEhuLm5ERAQQFRUVLPqPPPMM+s8fvvttwkODua3337jvPPOa9a1wAzLFyxYwE8//cSdd97p3O7n58c777yDp6dng+f9/PPPrFixgq1bt9KzZ08Aunbt6tz/9NNPM3nyZO6++24AevTowX//+19Gjx7NG2+8gbe3d7NrFRERERERERERaQ3quD1BbN++nRUrVnDVVVcB4O7uzhVXXMH06dOdx6xbt45x48a1+L0zMzO56aab6NGjB0FBQQQGBlJSUkJKSkqzrjNnzhz8/f3x9vZmwoQJXHHFFTz22GPO/QMGDGg0tAXz+cXGxjpD20OtX7+emTNn4u/v7/w455xzcDgcJCUlNatWERERERERERGR1qSO2yPw8XBjy+PnuOzeTTV9+nSqq6uJiYlxbjMMAy8vL1599VWCgoLw8fFpdg1Wq7XeyAabzVbn8ZQpU8jNzeXll18mISEBLy8vTjnllDpjDppi7NixvPHGG3h6ehITE4O7e90fTz8/v8Oef6TnV1JSwi233MJdd91Vb198fHyzahUREREREREREWlNCm6PwGKxNGtcgStUV1fz/vvv88ILL3D22WfX2XfhhRfyySefcOuttzJw4EAWLFjA9ddf3+B1PD09sdvtdbaFh4ezf/9+DMNwLli2bt26OscsXbqU119/nYkTJwKQmppKTk5Os5+Hn58f3bt3b/Z5tQYOHMi+ffvYsWNHg123Q4cOZcuWLcd0DxERERERERERkbagUQkngDlz5pCfn8+NN95I//7963xccsklznEJjz76KJ988gmPPvooW7duZePGjTz77LPO63Tp0oVFixaRlpbmDF7HjBlDdnY2//73v9m9ezevvfYaP/zwQ5379+jRgw8++ICtW7eyfPlyJk+efFTdvcdq9OjRnHHGGVxyySXMnz+fpKQkfvjhB3788UcA/v73v/P7778zdepU1q1bx86dO/n222+1OJmIiIiIiIiIixiGwYvzd/DfBTtdXYpIu6Pg9gQwffp0xo8fT1BQUL19l1xyCatWrWLDhg2MGTOGL774gu+++47Bgwdz5plnsmLFCuexjz/+OHv37qVbt26Eh4cD0KdPH15//XVee+01Bg0axIoVK7j//vvr3T8/P5+hQ4fy5z//mbvuuouIiIjWfdKN+Oqrrxg+fDhXXXUVffv25W9/+5uzi3jgwIH89ttv7Nixg1GjRjFkyBAeeeSROuMlRERERERERKTtbM0o5uUFO/nP/B3kllS6uhyRdsViHDrA9ARXVFREUFAQhYWFBAYG1tlXUVFBUlISiYmJeHt7u6hCOdHp50xEpGlsNhtz585l4sSJeHh4uLocEREREWkFz/64jTcW7gbgu6mnMTA22LUFict0lN//D5dNHkodtyIiIiIiIiIi0uYMw2D2+nTn47T8chdWI9L+KLgVEREREREREZE2tza1gH0HhbVpBQpuRQ6m4FZERERERERERNrcd+vS6zzep45bkToU3IqIiIiIiIiISJuyOwy+35gBwJhe5gLp6rgVqUvBrYiIiIiIiIiItKmknFKyiyvx9XTjyuFxgGbcihxKwa2IiIiIiIiIiLSprKIKAKKDvOkS5geo41bkUApuRURERERERESkTWUVVwIQEeBN52AfAArLbZRUVruyLJF2RcGtiIiIiIiIiIi0qaxis+M2ItCLAG8PAr3dAY1LEDmYglsREREREREREWlT2c6OWy8AOnfyBSBd4xJEnBTcSrNdd911XHjhhc7HY8aM4e67727zOhYuXIjFYqGgoKBFr7t3714sFgvr1q1r0euKiIiIiIiIiKl2VEJ4bXBbMy5hn4JbEScFtyeI6667DovFgsViwdPTk+7du/P4449TXd36s2G+/vprnnjiiSYd21pha2O6dOnifF38/PwYOnQoX3zxxWHPiYuLIyMjg/79+7dJjSIiIiIiIiIdTVbRgRm3ALGdzOBWoxJEDlBwewI599xzycjIYOfOndx333089thjPPfccw0eW1VV1WL3DQkJISAgoMWu19Ief/xxMjIyWLt2LcOHD+eKK67g999/b/DYqqoq3NzciIqKwt3dvY0rFREREREREekYnDNuD+m4TVPHrYiTgtsTiJeXF1FRUSQkJHDbbbcxfvx4vvvuO+DAeIN//etfxMTE0KtXLwBSU1O5/PLLCQ4OJiQkhAsuuIC9e/c6r2m327n33nsJDg4mNDSUv/3tbxiGUee+h45KqKys5O9//ztxcXF4eXnRvXt3pk+fzt69exk7diwAnTp1wmKxcN111wHgcDh4+umnSUxMxMfHh0GDBvHll1/Wuc/cuXPp2bMnPj4+jB07tk6dhxMQEEBUVBQ9e/bktddew8fHh9mzZwNmR+4TTzzBtddeS2BgIDfffHODoxI2b97MeeedR2BgIAEBAYwaNYrdu3c797/zzjv06dMHb29vevfuzeuvv96k2kREREREREQ6ouxDRyU4O27LXFaTSHujlsIjMQywueg/Gh6+YLEc9ek+Pj7k5uY6Hy9YsIDAwEDmz58PgM1m45xzzuGUU05h8eLFuLu78+STT3LuueeyYcMGPD09eeGFF5g5cybvvvsuffr04YUXXuCbb77hzDPPbPS+1157LcuWLeO///0vgwYNIikpiZycHOLi4vjqq6+45JJL2L59O4GBgfj4mP9hfvrpp/nwww9588036dGjB4sWLeKaa64hPDyc0aNHk5qaysUXX8wdd9zBzTffzKpVq7jvvvua/Zq4u7vj4eFRp+P4+eef55FHHuHRRx9t8Jy0tDTOOOMMxowZwy+//EJgYCBLly51jqH46KOPeOSRR3j11VcZMmQIa9eu5aabbsLPz48pU6Y0u0YRERERERGRE1mFzU5Rhfn/1LWjEtRx23oKy2zklFbSLdzf1aVIMym4PRJbGTwV45p7/186ePo1+zTDMFiwYAE//fQTd955p3O7n58f77zzDp6engB8+OGHOBwO3nnnHSw1AfGMGTMIDg5m4cKFnH322bz00ks89NBDXHzxxQC8+eab/PTTT43ee8eOHXz++efMnz+f8ePHA9C1a1fn/pCQEAAiIiIIDg4GzA7dp556ip9//plTTjnFec6SJUt46623GD16NG+88QbdunXjhRdeAKBXr15s3LiRZ599tsmvS1VVFS+88AKFhYV1guczzzyzTgh8aCfva6+9RlBQEJ9++ikeHh4A9OzZ07n/0Ucf5YUXXnC+RomJiWzZsoW33npLwa2IiIiIiIjIIWq7bT3drQT6mNFUbcdtVnElVdUOPN31JvGWcsN7K1mbks/C+8cSH+rr6nKkGRTcnkDmzJmDv78/NpsNh8PB1VdfzWOPPebcP2DAAGdoC7B+/Xp27dpVbz5tRUUFu3fvprCwkIyMDEaOHOnc5+7uzkknnVRvXEKtdevW4ebmxujRo5tc965duygrK+Oss86qs72qqoohQ4YAsHXr1jp1AM6Q90j+/ve/8/DDD1NRUYG/vz/PPPMMkyZNcu4/6aSTDnv+unXrGDVqlDO0PVhpaSm7d+/mxhtv5KabbnJur66uJigoqEn1iYiIiIiIiHQkB8+3rW0kC/XzxNfTjbIqO5+vSuWakxNcWeIJo8JmZ11qAQ4DNqYVKrg9zii4PRIPX7Pz1VX3boaxY8fyxhtv4OnpSUxMTL3Ftfz86nbvlpSUMGzYMD766KN61woPD29+veAcfdAcJSUlAHz//fd07ty5zj4vL6+jquNgDzzwANdddx3+/v5ERkY6/1KodejrcqjDPafa2v/3v//VC5bd3NyOsmIRERERERGRE9eh820BLBYLt5zRjRd/3sEj324iPMCLc/pFuarEE8ae7FLsDrP5bm9uqYurkeZScHskFstRjStwBT8/P7p3797k44cOHcpnn31GREQEgYGBDR4THR3N8uXLOeOMMwCzk3T16tUMHTq0weMHDBiAw+Hgt99+c45KOFhtx6/dbndu69u3L15eXqSkpDTaqdunTx/nQmu1/vjjjyM/SSAsLKxZr8uhBg4cyHvvvYfNZqvXdRsZGUlMTAx79uxh8uTJR30PERERERERkY4iqya4jQio26x117jupBeU89mqVO78ZC0f3DCCkV1DXVHiCWN7ZpHz6705Cm6PNxoY0oFNnjyZsLAwLrjgAhYvXkxSUhILFy7krrvuYt++fQD89a9/5ZlnnmHWrFls27aN22+/nYKCgkav2aVLF6ZMmcINN9zArFmznNf8/PPPAUhISMBisTBnzhyys7MpKSkhICCA+++/n3vuuYf33nuP3bt3s2bNGl555RXee+89AG699VZ27tzJAw88wPbt2/n444+ZOXNma79EAEydOpWioiKuvPJKVq1axc6dO/nggw/Yvn07ANOmTePpp5/mv//9Lzt27GDjxo3MmDGD//znP21Sn4iIiIiIiMjxJKuoNrj1rrPdYrHwr4v6M75PJFXVDv7y/iq27S+qd/6alHzOeXERP27KaJN6j2fb95c4v07OLXNhJXI0FNx2YL6+vixatIj4+Hguvvhi+vTpw4033khFRYWzA/e+++7jz3/+M1OmTOGUU04hICCAiy666LDXfeONN7j00ku5/fbb6d27NzfddBOlpea/6nTu3Jlp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cNnYuO4V2gKkLAZbJQTGQux4d1cjIiIi0u0puBURERER6QLqGhysSCkEYOagSDdXcwKa2iQMvRjM+meGiIiIyMnSOyoRERERkS5g3YFiamwOIgO9GBoT6O5y2sZWDfu+M7aHXubeWkREREROEQpuRURERES6gKXJBQCclRiJydSNFiQD2P892GshuBf0HOHuakREREROCQpuRURERETczOVysTTZ6G87c3CEm6s5AU2LkiVeCN0tdBYRERHpohTcioiIiIi4WVJuBTnldXh7mJmcEObuctrG0QD7vjW2E2e7txYRERGRU4iCWxERERERN2tqkzC1XzjeHhY3V9NG6Wugrgx8QyFugrurERERETllKLgVEREREXGzbt0mYc/Xxv2AWWCxurcWERERkVOIglsRERERETfKr6hje1Y5ADMSu1lw63QeCm7VJkFERESkXSm4FRERERFxo+/3GG0SRsQFExHg7eZq2sDlgm/+DyqywDMAEma4uyIRERGRU4qCWxERERERN2pukzCom822Xf4P2PgyYII5/wYPH3dXJCIiInJKUXArIiIiIuImtTYHK1OKADh7UKSbq2mDja/AsseN7Vn/gGGXubceERERkVOQglsRERERETdZnVpEvd1JTLAPiVEB7i6ndXbNh6/vN7an/xYm3O7eekREREROUQpuRURERETcZEljm4RzBkVgMpncXE0r7P8e5t8OuGDsLXDmQ+6uSEREROSUpeBWRERERMQNnE4XSxsXJusWbRKyN8MH14GzAQZfBBc8Bd0hbBYRERHpphTcioiIiIi4wc7scgor6/HztDChb4i7yzm2sgx45zJoqIY+0+GSl8FscXdVIiIiIqc0BbciIiIiIm7Q1CZh+sBwvKxdPATd8DLUlkDUcLjqXbB6ubsiERERkVOeglsRERERETdYktzYJiGxi7dJcLkgaYGxfcb94NVNFlETERER6eYU3IqIiIiIdLLsslqScyswm2BGYoS7yzm2nK1GqwQPX+g3093ViIiIiJw2FNyKiIiIiHSypY1tEsb06kGIn6ebqzmOptm2/c8FT1+3liIiIiJyOlFwKyIiIiLSyZrbJAzqBm0Sdi8wtofMc2clIiIiIqcdBbciIiIiIp2oqt7Ouv3FAJwzqIu3ScjdDmXpYPUxZtyKiIiISKdRcCsiIiIi0olW7ivE5nDSO9SX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YP+3fv369OnTJwsXLswJJ5yQjRs3pnfv3rnlllvyiU98Ikny9NNPZ9iwYVm8eHGOPfbYtx1n+vTpeeqppzJ//vzd2s8555x86EMfSllZWe68884sXbq0racEAAC8g7a6B1iwYEHGjx+fDRs2pLq6ur2m0+6suAUA2sXGjRuTJDU1NUl2fpPe1NSUk08+ubXPYYcdlsGDB2fx4sXvOM6uMXaZPXt2nnvuucycObMNKgcAAP4RbXkPkCSjR49Ov379csopp2TRokV7ufqOV97RBQAA+7+WlpZceOGF+fCHP5zhw4cnSdauXZtOnTq95Rvygw46aI97Uz300EP51a9+ld/+9retbc8880y++tWv5oEHHkh5uUsbAAAoBm15D9CvX7/ccMMNOfroo9PY2Jgbb7wxJ554Yh5++OEceeSRbTan9ubuBgBoc9OnT8/y5cvz4IMP/sNjLF++PGeccUZmzpyZU089NUnS3Nycc889N9/61rcydOjQvVUuAADwPrXVPUCS1NXVpa6urvXncePG5dlnn80111yTn//85++r7mIiuAUA2tSMGTNy11135f7778/AgQNb2/v27Zvt27envr5+t2/c161bl759++42xpNPPpmTTjopn//85/ONb3yjtX3Tpk155JFH8thjj2XGjBlJdn6zXygUUl5ennvvvTcTJkxo2wkCAAC7act7gD0ZM2bM+wqJi5E9bgGANlEoFDJjxozccccdmT9/fmpra3c7f9RRR6WioiLz5s1rbVu5cmVWr16d4447rrVtxYoVGT9+fD772c/m8ssv322MqqqqLFu2LEuXLm19TZs2LXV1dVm6dGnGjh3btpMEAABatcc9wJ4sXbo0/fr12zsTKRJW3AIAbWL69Om55ZZbMnfu3PTo0aN1z6qePXuma9eu6dmzZ84///xcfPHFqampSVVVVb70pS/luOOOa32a7PLlyzNhwoScdtppufjii1vHKCsrS+/evVNaWtq6X9Yuffr0SZcuXd7SDgAAtK32uAdIkmuvvTa1tbU5/PDDs23bttx4442ZP39+7r333o6ZeBsR3AIAbeKHP/xhkuTEE0/crX327NmZOnVqkuSaa65JaWlpJk+enMbGxpx22mn5wQ9+0Nr3tttuy/r16zNnzpzMmTOntf3ggw/OqlWr2noKAADA/0N73QNs3749l1xySV566aVUVlZm5MiRue+++zJ+/Pg2nV97KykUCoWOLgIAAAAAgL+zxy0AAAAAQJER3AIAAAAAFBnBLQAAAABAkRHcAgAAAAAUGcEtAAAAAECREdwCAAAAABQZwS0AAAAAQJER3AIAAAAAFBnBLQAAAABAkRHcAgBwwJk6dWpKSkpSUlKSioqKHHTQQTnllFPyk5/8JC0tLe95nJtuuinV1dVtVygAAAcswS0AAAekiRMnZs2aNVm1alXuvvvujB8/PhdccEEmTZqUHTt2dHR5AAAc4AS3AAAckDp37py+fftmwIABOfLII3PZZZdl7ty5ufvuu3PTTTclSa6++uqMGDEi3bp1y6BBg/LFL34xmzdvTpIsWLAgn/vc57Jx48bW1bvf/OY3kySNjY259NJLM2DAgHTr1i1jx47NggULOmaiAADskwS3AADwpgkTJmTUqFG5/fbbkySlpaW57rrrsmLFivz0pz/N/Pnz85WvfCVJMm7cuFx77bWpqqrKmjVrsmbNmlx66aVJkhkzZmTx4sX55S9/mSeeeCKf/OQnM3HixDzzzDMdNjcAAPYtJYVCodDRRQAAQHuaOnVq6uvrc+edd77l3DnnnJMnnngiTz755FvO3XbbbZk2bVpeffXVJDv3uL3wwgtTX1/f2mf16tU55JBDsnr16vTv37+1/eSTT86YMWPyne98Z6/PBwCA/U95RxcAAADFpFAopKSkJEly3333ZdasWXn66afT0NCQHTt2ZNu2bdm6dWsqKyvf9veXLVuW5ubmDB06dLf2xsbG9OrVq83rBwBg/yC4BQCA/+Wpp55KbW1tVq1alUmTJuULX/hCLr/88tTU1OTBBx/M+eefn+3bt+8xuN28eXPKysqyZMmSlJWV7Xaue/fu7TEFAAD2A4JbAAB40/z587Ns2bJcdNFFWbJkSVpaWnLVVVeltHTnoyFuvfXW3fp36tQpzc3Nu7UdccQRaW5uziuvvJLjjz++3WoHAGD/IrgFAOCA1NjYmLVr16a5uTnr1q3LPffck1mzZmXSpEmZMmVKli9fnqampnz/+9/Pxz72sSxatCg33HDDbmMMGTIkmzdvzrx58zJq1KhUVlZm6NCh+cxnPpMpU6bkqquuyhFHHJH169dn3rx5GTlyZE4//fQOmjEAAPuS0o4uAAAAOsI999yTfv36ZciQIZk4cWL+8Ic/5LrrrsvcuXNTVlaWUaNG5eqrr84VV1yR4cOH5+abb86sWbN2G2PcuHGZNm1azj777PTu3Tvf/e53kySzZ8/OlClTcskll6Suri5nnnlm/vznP2fw4MEdMVUAAPZBJYVCodDRRQAAAAAA8HdW3AIAAAAAFBnBLQAAAABAkRHcAgAAAAAUGcEtAAAAAECREdwCAAAAABQZwS0AAAAAQJER3AIAAAAAFBnBLQAAAABAkRHcAgAAAAAUGcEtAAAAAECREdwCAAAAABQZwS0AAAAAQJH5Hz/CFUkxft1VAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "847bb4a6",
   "metadata": {
    "papermill": {
     "duration": 0.011548,
     "end_time": "2025-07-17T13:06:32.155918",
     "exception": false,
     "start_time": "2025-07-17T13:06:32.144370",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "11993464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-17T13:06:32.179416Z",
     "iopub.status.busy": "2025-07-17T13:06:32.179146Z",
     "iopub.status.idle": "2025-07-17T13:06:32.216224Z",
     "shell.execute_reply": "2025-07-17T13:06:32.215273Z"
    },
    "papermill": {
     "duration": 0.050145,
     "end_time": "2025-07-17T13:06:32.217543",
     "exception": false,
     "start_time": "2025-07-17T13:06:32.167398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 137.303446,
   "end_time": "2025-07-17T13:06:35.512655",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-17T13:04:18.209209",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
