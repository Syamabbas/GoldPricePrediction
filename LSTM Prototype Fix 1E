{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dd2f9f8b",
   "metadata": {
    "papermill": {
     "duration": 0.003823,
     "end_time": "2025-05-25T07:20:15.769525",
     "exception": false,
     "start_time": "2025-05-25T07:20:15.765702",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1E: Menggunakan harga emas historis + Cadangan Devisa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22db18ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:15.777109Z",
     "iopub.status.busy": "2025-05-25T07:20:15.776522Z",
     "iopub.status.idle": "2025-05-25T07:20:17.166979Z",
     "shell.execute_reply": "2025-05-25T07:20:17.166242Z"
    },
    "papermill": {
     "duration": 1.395492,
     "end_time": "2025-05-25T07:20:17.168200",
     "exception": false,
     "start_time": "2025-05-25T07:20:15.772708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "475e8620",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:17.176281Z",
     "iopub.status.busy": "2025-05-25T07:20:17.175963Z",
     "iopub.status.idle": "2025-05-25T07:20:30.172209Z",
     "shell.execute_reply": "2025-05-25T07:20:30.171426Z"
    },
    "papermill": {
     "duration": 13.001905,
     "end_time": "2025-05-25T07:20:30.173699",
     "exception": false,
     "start_time": "2025-05-25T07:20:17.171794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-25 07:20:19.722084: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748157619.904607      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748157619.955133      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "116043b2",
   "metadata": {
    "papermill": {
     "duration": 0.0031,
     "end_time": "2025-05-25T07:20:30.180673",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.177573",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5e6351e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.188052Z",
     "iopub.status.busy": "2025-05-25T07:20:30.187603Z",
     "iopub.status.idle": "2025-05-25T07:20:30.214186Z",
     "shell.execute_reply": "2025-05-25T07:20:30.213442Z"
    },
    "papermill": {
     "duration": 0.031622,
     "end_time": "2025-05-25T07:20:30.215361",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.183739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Inflasi  IndONIA  Cadangan Devisa  \\\n",
      "0  1/3/2017  606000  13485     3.49  4.12408            116.9   \n",
      "1  1/4/2017  606000  13478     3.49  4.12935            116.9   \n",
      "2  1/5/2017  607000  13370     3.49  4.12697            116.9   \n",
      "3  1/6/2017  606000  13347     3.49  4.13105            116.9   \n",
      "4  1/9/2017  602000  13385     3.49  4.14132            116.9   \n",
      "\n",
      "   Money Supply (M2)  Minyak  \n",
      "0         4936881.99   52.33  \n",
      "1         4936881.99   53.26  \n",
      "2         4936881.99   53.76  \n",
      "3         4936881.99   53.99  \n",
      "4         4936881.99   51.96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efacb558",
   "metadata": {
    "papermill": {
     "duration": 0.003139,
     "end_time": "2025-05-25T07:20:30.222004",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.218865",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0ff0d5c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.229156Z",
     "iopub.status.busy": "2025-05-25T07:20:30.228941Z",
     "iopub.status.idle": "2025-05-25T07:20:30.246775Z",
     "shell.execute_reply": "2025-05-25T07:20:30.245971Z"
    },
    "papermill": {
     "duration": 0.022681,
     "end_time": "2025-05-25T07:20:30.247940",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.225259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1695 entries, 0 to 1694\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1695 non-null   object \n",
      " 1   Price              1695 non-null   int64  \n",
      " 2   Kurs               1695 non-null   int64  \n",
      " 3   Inflasi            1695 non-null   float64\n",
      " 4   IndONIA            1695 non-null   float64\n",
      " 5   Cadangan Devisa    1695 non-null   float64\n",
      " 6   Money Supply (M2)  1695 non-null   float64\n",
      " 7   Minyak             1695 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 106.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "40b22835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.255268Z",
     "iopub.status.busy": "2025-05-25T07:20:30.255048Z",
     "iopub.status.idle": "2025-05-25T07:20:30.265690Z",
     "shell.execute_reply": "2025-05-25T07:20:30.264944Z"
    },
    "papermill": {
     "duration": 0.015547,
     "end_time": "2025-05-25T07:20:30.266785",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.251238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9fd86dcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.273952Z",
     "iopub.status.busy": "2025-05-25T07:20:30.273774Z",
     "iopub.status.idle": "2025-05-25T07:20:30.279808Z",
     "shell.execute_reply": "2025-05-25T07:20:30.279287Z"
    },
    "papermill": {
     "duration": 0.010874,
     "end_time": "2025-05-25T07:20:30.280959",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.270085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "662dd69e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.288684Z",
     "iopub.status.busy": "2025-05-25T07:20:30.288508Z",
     "iopub.status.idle": "2025-05-25T07:20:30.293784Z",
     "shell.execute_reply": "2025-05-25T07:20:30.293128Z"
    },
    "papermill": {
     "duration": 0.010443,
     "end_time": "2025-05-25T07:20:30.294824",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.284381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "170b52db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.302788Z",
     "iopub.status.busy": "2025-05-25T07:20:30.302276Z",
     "iopub.status.idle": "2025-05-25T07:20:30.305292Z",
     "shell.execute_reply": "2025-05-25T07:20:30.304761Z"
    },
    "papermill": {
     "duration": 0.007967,
     "end_time": "2025-05-25T07:20:30.306334",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.298367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Cadangan Devisa']\n",
    "\n",
    "# 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4c5b1077",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.313781Z",
     "iopub.status.busy": "2025-05-25T07:20:30.313591Z",
     "iopub.status.idle": "2025-05-25T07:20:30.321085Z",
     "shell.execute_reply": "2025-05-25T07:20:30.320575Z"
    },
    "papermill": {
     "duration": 0.012329,
     "end_time": "2025-05-25T07:20:30.321999",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.309670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "39e6fab4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.329319Z",
     "iopub.status.busy": "2025-05-25T07:20:30.329124Z",
     "iopub.status.idle": "2025-05-25T07:20:30.335974Z",
     "shell.execute_reply": "2025-05-25T07:20:30.335300Z"
    },
    "papermill": {
     "duration": 0.011622,
     "end_time": "2025-05-25T07:20:30.337013",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.325391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "104b4c55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.344329Z",
     "iopub.status.busy": "2025-05-25T07:20:30.344127Z",
     "iopub.status.idle": "2025-05-25T07:20:30.347562Z",
     "shell.execute_reply": "2025-05-25T07:20:30.347038Z"
    },
    "papermill": {
     "duration": 0.008215,
     "end_time": "2025-05-25T07:20:30.348534",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.340319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fc8d784",
   "metadata": {
    "papermill": {
     "duration": 0.003144,
     "end_time": "2025-05-25T07:20:30.355017",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.351873",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9a3930c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:20:30.362355Z",
     "iopub.status.busy": "2025-05-25T07:20:30.362181Z",
     "iopub.status.idle": "2025-05-25T07:22:28.067115Z",
     "shell.execute_reply": "2025-05-25T07:22:28.066312Z"
    },
    "papermill": {
     "duration": 117.710163,
     "end_time": "2025-05-25T07:22:28.068439",
     "exception": false,
     "start_time": "2025-05-25T07:20:30.358276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748157631.599772      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748157631.600521      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1748157636.102734      62 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=16470.6741\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=21365.5716\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=19088.7468\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=20523.5302\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=18851.9317\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=21330.1425\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=18224.9303\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=15867.6105\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=14989.6064\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=15668.0754\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=15810.0447\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=14899.7165\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=24243.4844\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=16539.3708\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=15498.1866\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=17940.2717\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "11     64      0.2         0.0005          64  14899.716514  0.010747   \n",
      "8      64      0.2         0.0010          32  14989.606375  0.011314   \n",
      "14     64      0.3         0.0005          32  15498.186586  0.011407   \n",
      "9      64      0.2         0.0010          64  15668.075445  0.011864   \n",
      "10     64      0.2         0.0005          32  15810.044691  0.012162   \n",
      "\n",
      "          R2  \n",
      "11  0.925536  \n",
      "8   0.924635  \n",
      "14  0.919434  \n",
      "9   0.917658  \n",
      "10  0.916159  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8a941d8",
   "metadata": {
    "papermill": {
     "duration": 0.006139,
     "end_time": "2025-05-25T07:22:28.081679",
     "exception": false,
     "start_time": "2025-05-25T07:22:28.075540",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1f374786",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:22:28.094805Z",
     "iopub.status.busy": "2025-05-25T07:22:28.094137Z",
     "iopub.status.idle": "2025-05-25T07:22:36.188660Z",
     "shell.execute_reply": "2025-05-25T07:22:36.188130Z"
    },
    "papermill": {
     "duration": 8.102095,
     "end_time": "2025-05-25T07:22:36.189677",
     "exception": false,
     "start_time": "2025-05-25T07:22:28.087582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step - loss: 0.0571 - val_loss: 0.0038\n",
      "Epoch 2/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0057 - val_loss: 0.0018\n",
      "Epoch 3/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0045 - val_loss: 0.0013\n",
      "Epoch 4/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0035 - val_loss: 9.4697e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0031 - val_loss: 7.9688e-04\n",
      "Epoch 6/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0031 - val_loss: 0.0048\n",
      "Epoch 7/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0030 - val_loss: 0.0013\n",
      "Epoch 8/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0029 - val_loss: 8.7134e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0033 - val_loss: 0.0023\n",
      "Epoch 10/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0026 - val_loss: 0.0012\n",
      "Epoch 11/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0024 - val_loss: 0.0042\n",
      "Epoch 12/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0028 - val_loss: 0.0011\n",
      "Epoch 13/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0027 - val_loss: 0.0021\n",
      "Epoch 14/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0022 - val_loss: 0.0031\n",
      "Epoch 15/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0023 - val_loss: 0.0010\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c7c3109",
   "metadata": {
    "papermill": {
     "duration": 0.010428,
     "end_time": "2025-05-25T07:22:36.211423",
     "exception": false,
     "start_time": "2025-05-25T07:22:36.200995",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5a27e80c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:22:36.233303Z",
     "iopub.status.busy": "2025-05-25T07:22:36.232718Z",
     "iopub.status.idle": "2025-05-25T07:22:36.746804Z",
     "shell.execute_reply": "2025-05-25T07:22:36.746059Z"
    },
    "papermill": {
     "duration": 0.526153,
     "end_time": "2025-05-25T07:22:36.747937",
     "exception": false,
     "start_time": "2025-05-25T07:22:36.221784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Final Test RMSE: 15469.5047\n",
      "Final Test MAPE: 0.0116\n",
      "Final Test MSLE: 0.000221\n",
      "Final Test R² Score: 0.9197\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b94a0c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:22:36.770243Z",
     "iopub.status.busy": "2025-05-25T07:22:36.770003Z",
     "iopub.status.idle": "2025-05-25T07:22:37.054936Z",
     "shell.execute_reply": "2025-05-25T07:22:37.054275Z"
    },
    "papermill": {
     "duration": 0.298346,
     "end_time": "2025-05-25T07:22:37.057223",
     "exception": false,
     "start_time": "2025-05-25T07:22:36.758877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e83b7ec5",
   "metadata": {
    "papermill": {
     "duration": 0.012114,
     "end_time": "2025-05-25T07:22:37.082086",
     "exception": false,
     "start_time": "2025-05-25T07:22:37.069972",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5a5efbdb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T07:22:37.108253Z",
     "iopub.status.busy": "2025-05-25T07:22:37.107989Z",
     "iopub.status.idle": "2025-05-25T07:22:37.140942Z",
     "shell.execute_reply": "2025-05-25T07:22:37.140400Z"
    },
    "papermill": {
     "duration": 0.047479,
     "end_time": "2025-05-25T07:22:37.142052",
     "exception": false,
     "start_time": "2025-05-25T07:22:37.094573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 148.292241,
   "end_time": "2025-05-25T07:22:39.949465",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-25T07:20:11.657224",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
