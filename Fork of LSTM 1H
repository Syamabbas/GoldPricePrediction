{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8bfed2ee",
   "metadata": {
    "papermill": {
     "duration": 0.004782,
     "end_time": "2025-09-15T13:50:09.112213",
     "exception": false,
     "start_time": "2025-09-15T13:50:09.107431",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "Skenario 1H: Using all data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ddb0acff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:09.121868Z",
     "iopub.status.busy": "2025-09-15T13:50:09.121484Z",
     "iopub.status.idle": "2025-09-15T13:50:11.160005Z",
     "shell.execute_reply": "2025-09-15T13:50:11.158928Z"
    },
    "papermill": {
     "duration": 2.04535,
     "end_time": "2025-09-15T13:50:11.161784",
     "exception": false,
     "start_time": "2025-09-15T13:50:09.116434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4d5a5532",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:11.173110Z",
     "iopub.status.busy": "2025-09-15T13:50:11.172684Z",
     "iopub.status.idle": "2025-09-15T13:50:31.053146Z",
     "shell.execute_reply": "2025-09-15T13:50:31.052092Z"
    },
    "papermill": {
     "duration": 19.888566,
     "end_time": "2025-09-15T13:50:31.055013",
     "exception": false,
     "start_time": "2025-09-15T13:50:11.166447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-15 13:50:15.128452: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1757944215.394560      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1757944215.474001      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a4776eb",
   "metadata": {
    "papermill": {
     "duration": 0.004044,
     "end_time": "2025-09-15T13:50:31.063549",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.059505",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "087dabaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.073524Z",
     "iopub.status.busy": "2025-09-15T13:50:31.072887Z",
     "iopub.status.idle": "2025-09-15T13:50:31.105127Z",
     "shell.execute_reply": "2025-09-15T13:50:31.104092Z"
    },
    "papermill": {
     "duration": 0.039071,
     "end_time": "2025-09-15T13:50:31.106787",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.067716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply\n",
      "0  1/3/2017  606000          13485                      116.9    4936881.99\n",
      "1  1/4/2017  606000          13478                      116.9    4936881.99\n",
      "2  1/5/2017  607000          13370                      116.9    4936881.99\n",
      "3  1/6/2017  606000          13347                      116.9    4936881.99\n",
      "4  1/9/2017  602000          13385                      116.9    4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dee33e8",
   "metadata": {
    "papermill": {
     "duration": 0.003918,
     "end_time": "2025-09-15T13:50:31.115069",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.111151",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ddec52a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.124900Z",
     "iopub.status.busy": "2025-09-15T13:50:31.124524Z",
     "iopub.status.idle": "2025-09-15T13:50:31.151135Z",
     "shell.execute_reply": "2025-09-15T13:50:31.149982Z"
    },
    "papermill": {
     "duration": 0.033475,
     "end_time": "2025-09-15T13:50:31.152759",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.119284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b432ffe7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.163254Z",
     "iopub.status.busy": "2025-09-15T13:50:31.162389Z",
     "iopub.status.idle": "2025-09-15T13:50:31.180387Z",
     "shell.execute_reply": "2025-09-15T13:50:31.179303Z"
    },
    "papermill": {
     "duration": 0.025268,
     "end_time": "2025-09-15T13:50:31.182389",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.157121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "20ad9738",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.193658Z",
     "iopub.status.busy": "2025-09-15T13:50:31.193361Z",
     "iopub.status.idle": "2025-09-15T13:50:31.202920Z",
     "shell.execute_reply": "2025-09-15T13:50:31.201964Z"
    },
    "papermill": {
     "duration": 0.016499,
     "end_time": "2025-09-15T13:50:31.204591",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.188092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9e164700",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.214953Z",
     "iopub.status.busy": "2025-09-15T13:50:31.214573Z",
     "iopub.status.idle": "2025-09-15T13:50:31.221927Z",
     "shell.execute_reply": "2025-09-15T13:50:31.221103Z"
    },
    "papermill": {
     "duration": 0.014175,
     "end_time": "2025-09-15T13:50:31.223327",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.209152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c06d3fad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.233607Z",
     "iopub.status.busy": "2025-09-15T13:50:31.233280Z",
     "iopub.status.idle": "2025-09-15T13:50:31.237987Z",
     "shell.execute_reply": "2025-09-15T13:50:31.237056Z"
    },
    "papermill": {
     "duration": 0.011774,
     "end_time": "2025-09-15T13:50:31.239653",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.227879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate', 'Foreign Exchange Reserves', 'Money Supply']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4c3601f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.251443Z",
     "iopub.status.busy": "2025-09-15T13:50:31.250358Z",
     "iopub.status.idle": "2025-09-15T13:50:31.261387Z",
     "shell.execute_reply": "2025-09-15T13:50:31.260383Z"
    },
    "papermill": {
     "duration": 0.018822,
     "end_time": "2025-09-15T13:50:31.263153",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.244331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c05e6e62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.274302Z",
     "iopub.status.busy": "2025-09-15T13:50:31.273887Z",
     "iopub.status.idle": "2025-09-15T13:50:31.286540Z",
     "shell.execute_reply": "2025-09-15T13:50:31.285432Z"
    },
    "papermill": {
     "duration": 0.020489,
     "end_time": "2025-09-15T13:50:31.288449",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.267960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b2ccff74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.299265Z",
     "iopub.status.busy": "2025-09-15T13:50:31.298904Z",
     "iopub.status.idle": "2025-09-15T13:50:31.304951Z",
     "shell.execute_reply": "2025-09-15T13:50:31.303950Z"
    },
    "papermill": {
     "duration": 0.01356,
     "end_time": "2025-09-15T13:50:31.306685",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.293125",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Validation-Test split (70:15:15)\n",
    "train_size = int(0.7 * len(X))\n",
    "val_size   = int(0.15 * len(X))\n",
    "\n",
    "X_train = X[:train_size]\n",
    "y_train = y[:train_size]\n",
    "\n",
    "X_val = X[train_size:train_size + val_size]\n",
    "y_val = y[train_size:train_size + val_size]\n",
    "\n",
    "X_test = X[train_size + val_size:]\n",
    "y_test = y[train_size + val_size:]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac7dc0e3",
   "metadata": {
    "papermill": {
     "duration": 0.004549,
     "end_time": "2025-09-15T13:50:31.315983",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.311434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6b929edd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:50:31.326498Z",
     "iopub.status.busy": "2025-09-15T13:50:31.326120Z",
     "iopub.status.idle": "2025-09-15T13:58:42.228101Z",
     "shell.execute_reply": "2025-09-15T13:58:42.226887Z"
    },
    "papermill": {
     "duration": 490.909054,
     "end_time": "2025-09-15T13:58:42.229802",
     "exception": false,
     "start_time": "2025-09-15T13:50:31.320748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-15 13:50:31.342222: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 67ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=122355.4866\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 67ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=77507.9107\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 64ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=86196.0647\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 65ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=66603.3782\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 66ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=122708.8334\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 63ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=101822.9268\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 67ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=79346.8974\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 68ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=156701.1809\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 70ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=81068.0682\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 74ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=60721.2625\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 71ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=40741.0414\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 70ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=80131.0928\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 69ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=87964.7824\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 69ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=90577.7660\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 69ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=99833.4417\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 71ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=59932.9656\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "10     64      0.2         0.0005          32  40741.041385  0.023925   \n",
      "15     64      0.3         0.0005          64  59932.965612  0.035823   \n",
      "9      64      0.2         0.0010          64  60721.262496  0.036086   \n",
      "3      32      0.2         0.0005          64  66603.378249  0.038694   \n",
      "1      32      0.2         0.0010          64  77507.910697  0.044605   \n",
      "\n",
      "          R2  \n",
      "10  0.928400  \n",
      "15  0.845054  \n",
      "9   0.840952  \n",
      "3   0.808645  \n",
      "1   0.740857  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_val, y_val), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53aa7980",
   "metadata": {
    "papermill": {
     "duration": 0.008733,
     "end_time": "2025-09-15T13:58:42.247402",
     "exception": false,
     "start_time": "2025-09-15T13:58:42.238669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "421f7f89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:58:42.266207Z",
     "iopub.status.busy": "2025-09-15T13:58:42.265867Z",
     "iopub.status.idle": "2025-09-15T13:59:34.041384Z",
     "shell.execute_reply": "2025-09-15T13:59:34.039930Z"
    },
    "papermill": {
     "duration": 51.787498,
     "end_time": "2025-09-15T13:59:34.043542",
     "exception": false,
     "start_time": "2025-09-15T13:58:42.256044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 67ms/step - loss: 0.0418 - val_loss: 7.6970e-04\n",
      "Epoch 2/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 0.0026 - val_loss: 0.0019\n",
      "Epoch 3/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 0.0016 - val_loss: 7.7778e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 0.0012 - val_loss: 3.6517e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 0.0012 - val_loss: 0.0012\n",
      "Epoch 6/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 0.0012 - val_loss: 2.9815e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 9.1421e-04 - val_loss: 3.5501e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 0.0011 - val_loss: 2.9961e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 0.0010 - val_loss: 5.1832e-04\n",
      "Epoch 10/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 9.7717e-04 - val_loss: 5.0035e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 8.5211e-04 - val_loss: 2.8838e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 8.7736e-04 - val_loss: 7.6868e-04\n",
      "Epoch 13/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 9.1383e-04 - val_loss: 0.0015\n",
      "Epoch 14/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 7.9481e-04 - val_loss: 8.1000e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 8.2709e-04 - val_loss: 3.1270e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 7.3093e-04 - val_loss: 7.4929e-04\n",
      "Epoch 17/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 6.4392e-04 - val_loss: 3.2088e-04\n",
      "Epoch 18/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 6.3378e-04 - val_loss: 3.1267e-04\n",
      "Epoch 19/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 7.0112e-04 - val_loss: 8.0492e-04\n",
      "Epoch 20/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 7.9922e-04 - val_loss: 7.4317e-04\n",
      "Epoch 21/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 7.4618e-04 - val_loss: 3.1222e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_val, y_val),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77523a71",
   "metadata": {
    "papermill": {
     "duration": 0.032773,
     "end_time": "2025-09-15T13:59:34.109913",
     "exception": false,
     "start_time": "2025-09-15T13:59:34.077140",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5e38f23c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:59:34.249882Z",
     "iopub.status.busy": "2025-09-15T13:59:34.249537Z",
     "iopub.status.idle": "2025-09-15T13:59:35.381570Z",
     "shell.execute_reply": "2025-09-15T13:59:35.380234Z"
    },
    "papermill": {
     "duration": 1.168425,
     "end_time": "2025-09-15T13:59:35.383495",
     "exception": false,
     "start_time": "2025-09-15T13:59:34.215070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 71ms/step\n",
      "Final Test RMSE: 84731.0375\n",
      "Final Test MAPE: 0.0510\n",
      "Final Test MSLE: 0.003767\n",
      "Final Test R² Score: 0.6903\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "93a2c96c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:59:35.452628Z",
     "iopub.status.busy": "2025-09-15T13:59:35.452267Z",
     "iopub.status.idle": "2025-09-15T13:59:35.724687Z",
     "shell.execute_reply": "2025-09-15T13:59:35.723465Z"
    },
    "papermill": {
     "duration": 0.308674,
     "end_time": "2025-09-15T13:59:35.726363",
     "exception": false,
     "start_time": "2025-09-15T13:59:35.417689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Validation RMSE: 16472.3591\n",
      "Validation MAPE: 0.0129\n",
      "Validation Test MSLE: 0.000261\n",
      "Validation R² Score: 0.8871\n"
     ]
    }
   ],
   "source": [
    "# Evaluation on Validation set\n",
    "y_val_pred = final_model.predict(X_val)\n",
    "\n",
    "# inverse transform\n",
    "y_val_pred_inv = scaler.inverse_transform(\n",
    "    np.concatenate((y_val_pred, np.zeros((y_val_pred.shape[0], scaled_features.shape[1]-1))), axis=1)\n",
    ")[:,0]\n",
    "\n",
    "y_val_inv = scaler.inverse_transform(\n",
    "    np.concatenate((y_val.reshape(-1,1), np.zeros((y_val.shape[0], scaled_features.shape[1]-1))), axis=1)\n",
    ")[:,0]\n",
    "\n",
    "# metrics\n",
    "val_rmse = np.sqrt(mean_squared_error(y_val_inv, y_val_pred_inv))\n",
    "val_mape = mean_absolute_percentage_error(y_val_inv, y_val_pred_inv)\n",
    "val_r2   = r2_score(y_val_inv, y_val_pred_inv)\n",
    "val_msle = mean_squared_log_error(y_val_inv, y_val_pred_inv)\n",
    "\n",
    "print(f\"Validation RMSE: {val_rmse:.4f}\")\n",
    "print(f\"Validation MAPE: {val_mape:.4f}\")\n",
    "print(f\"Validation Test MSLE: {val_msle:.6f}\")\n",
    "print(f\"Validation R² Score: {val_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51e5aafa",
   "metadata": {
    "papermill": {
     "duration": 0.033305,
     "end_time": "2025-09-15T13:59:35.793109",
     "exception": false,
     "start_time": "2025-09-15T13:59:35.759804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f0254131",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:59:35.884964Z",
     "iopub.status.busy": "2025-09-15T13:59:35.884610Z",
     "iopub.status.idle": "2025-09-15T13:59:35.933053Z",
     "shell.execute_reply": "2025-09-15T13:59:35.931927Z"
    },
    "papermill": {
     "duration": 0.098634,
     "end_time": "2025-09-15T13:59:35.934683",
     "exception": false,
     "start_time": "2025-09-15T13:59:35.836049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 576.146198,
   "end_time": "2025-09-15T13:59:39.418515",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-15T13:50:03.272317",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
