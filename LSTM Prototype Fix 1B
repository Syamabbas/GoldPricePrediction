{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "04762c92",
   "metadata": {
    "papermill": {
     "duration": 0.003843,
     "end_time": "2025-05-25T06:45:11.658177",
     "exception": false,
     "start_time": "2025-05-25T06:45:11.654334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04916e39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:11.665655Z",
     "iopub.status.busy": "2025-05-25T06:45:11.665000Z",
     "iopub.status.idle": "2025-05-25T06:45:13.062239Z",
     "shell.execute_reply": "2025-05-25T06:45:13.061051Z"
    },
    "papermill": {
     "duration": 1.403011,
     "end_time": "2025-05-25T06:45:13.064356",
     "exception": false,
     "start_time": "2025-05-25T06:45:11.661345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2747003a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:13.076713Z",
     "iopub.status.busy": "2025-05-25T06:45:13.076251Z",
     "iopub.status.idle": "2025-05-25T06:45:26.088295Z",
     "shell.execute_reply": "2025-05-25T06:45:26.087505Z"
    },
    "papermill": {
     "duration": 13.019247,
     "end_time": "2025-05-25T06:45:26.089947",
     "exception": false,
     "start_time": "2025-05-25T06:45:13.070700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-25 06:45:15.654428: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748155515.842310      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748155515.897875      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb435f07",
   "metadata": {
    "papermill": {
     "duration": 0.003387,
     "end_time": "2025-05-25T06:45:26.096887",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.093500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "016dcd41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.104382Z",
     "iopub.status.busy": "2025-05-25T06:45:26.103970Z",
     "iopub.status.idle": "2025-05-25T06:45:26.130190Z",
     "shell.execute_reply": "2025-05-25T06:45:26.129374Z"
    },
    "papermill": {
     "duration": 0.030989,
     "end_time": "2025-05-25T06:45:26.131256",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.100267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Inflasi  IndONIA  Cadangan Devisa  \\\n",
      "0  1/3/2017  606000  13485     3.49  4.12408            116.9   \n",
      "1  1/4/2017  606000  13478     3.49  4.12935            116.9   \n",
      "2  1/5/2017  607000  13370     3.49  4.12697            116.9   \n",
      "3  1/6/2017  606000  13347     3.49  4.13105            116.9   \n",
      "4  1/9/2017  602000  13385     3.49  4.14132            116.9   \n",
      "\n",
      "   Money Supply (M2)  Minyak  \n",
      "0         4936881.99   52.33  \n",
      "1         4936881.99   53.26  \n",
      "2         4936881.99   53.76  \n",
      "3         4936881.99   53.99  \n",
      "4         4936881.99   51.96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "947361d7",
   "metadata": {
    "papermill": {
     "duration": 0.003417,
     "end_time": "2025-05-25T06:45:26.138332",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.134915",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f94a7e59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.145480Z",
     "iopub.status.busy": "2025-05-25T06:45:26.145279Z",
     "iopub.status.idle": "2025-05-25T06:45:26.164372Z",
     "shell.execute_reply": "2025-05-25T06:45:26.163537Z"
    },
    "papermill": {
     "duration": 0.023967,
     "end_time": "2025-05-25T06:45:26.165493",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.141526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1695 entries, 0 to 1694\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1695 non-null   object \n",
      " 1   Price              1695 non-null   int64  \n",
      " 2   Kurs               1695 non-null   int64  \n",
      " 3   Inflasi            1695 non-null   float64\n",
      " 4   IndONIA            1695 non-null   float64\n",
      " 5   Cadangan Devisa    1695 non-null   float64\n",
      " 6   Money Supply (M2)  1695 non-null   float64\n",
      " 7   Minyak             1695 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 106.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4d6020c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.172675Z",
     "iopub.status.busy": "2025-05-25T06:45:26.172456Z",
     "iopub.status.idle": "2025-05-25T06:45:26.183999Z",
     "shell.execute_reply": "2025-05-25T06:45:26.183239Z"
    },
    "papermill": {
     "duration": 0.016352,
     "end_time": "2025-05-25T06:45:26.185083",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.168731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "585c86a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.192377Z",
     "iopub.status.busy": "2025-05-25T06:45:26.192030Z",
     "iopub.status.idle": "2025-05-25T06:45:26.198332Z",
     "shell.execute_reply": "2025-05-25T06:45:26.197849Z"
    },
    "papermill": {
     "duration": 0.010983,
     "end_time": "2025-05-25T06:45:26.199363",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.188380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "32df2304",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.206657Z",
     "iopub.status.busy": "2025-05-25T06:45:26.206448Z",
     "iopub.status.idle": "2025-05-25T06:45:26.211111Z",
     "shell.execute_reply": "2025-05-25T06:45:26.210634Z"
    },
    "papermill": {
     "duration": 0.009398,
     "end_time": "2025-05-25T06:45:26.212134",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.202736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "98f52ea2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.219482Z",
     "iopub.status.busy": "2025-05-25T06:45:26.219287Z",
     "iopub.status.idle": "2025-05-25T06:45:26.222331Z",
     "shell.execute_reply": "2025-05-25T06:45:26.221717Z"
    },
    "papermill": {
     "duration": 0.007926,
     "end_time": "2025-05-25T06:45:26.223378",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.215452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Kurs']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3d77a58e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.231048Z",
     "iopub.status.busy": "2025-05-25T06:45:26.230491Z",
     "iopub.status.idle": "2025-05-25T06:45:26.236525Z",
     "shell.execute_reply": "2025-05-25T06:45:26.235878Z"
    },
    "papermill": {
     "duration": 0.010831,
     "end_time": "2025-05-25T06:45:26.237570",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.226739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5570e53f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.244908Z",
     "iopub.status.busy": "2025-05-25T06:45:26.244737Z",
     "iopub.status.idle": "2025-05-25T06:45:26.251151Z",
     "shell.execute_reply": "2025-05-25T06:45:26.250696Z"
    },
    "papermill": {
     "duration": 0.011314,
     "end_time": "2025-05-25T06:45:26.252218",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.240904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d355337a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.259917Z",
     "iopub.status.busy": "2025-05-25T06:45:26.259503Z",
     "iopub.status.idle": "2025-05-25T06:45:26.262669Z",
     "shell.execute_reply": "2025-05-25T06:45:26.262171Z"
    },
    "papermill": {
     "duration": 0.007815,
     "end_time": "2025-05-25T06:45:26.263681",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.255866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7563c3c5",
   "metadata": {
    "papermill": {
     "duration": 0.003353,
     "end_time": "2025-05-25T06:45:26.270450",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.267097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "be4f6fd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:45:26.277750Z",
     "iopub.status.busy": "2025-05-25T06:45:26.277511Z",
     "iopub.status.idle": "2025-05-25T06:47:24.944320Z",
     "shell.execute_reply": "2025-05-25T06:47:24.943633Z"
    },
    "papermill": {
     "duration": 118.671916,
     "end_time": "2025-05-25T06:47:24.945558",
     "exception": false,
     "start_time": "2025-05-25T06:45:26.273642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748155527.550674      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748155527.551448      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1748155532.169956      63 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=17022.7745\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=16141.1765\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=17047.7213\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=22479.3320\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=18345.4476\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=19093.6916\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=18799.3870\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=19325.9663\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=15734.8782\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=15448.5497\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=15801.4481\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=22621.9603\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=16945.8569\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=14475.2617\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=15943.1846\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=15585.8467\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "13     64      0.3         0.0010          64  14475.261670  0.010872   \n",
      "9      64      0.2         0.0010          64  15448.549716  0.011563   \n",
      "15     64      0.3         0.0005          64  15585.846700  0.011672   \n",
      "8      64      0.2         0.0010          32  15734.878163  0.011861   \n",
      "10     64      0.2         0.0005          32  15801.448103  0.011716   \n",
      "\n",
      "          R2  \n",
      "13  0.929718  \n",
      "9   0.919950  \n",
      "15  0.918520  \n",
      "8   0.916955  \n",
      "10  0.916251  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcd52ba3",
   "metadata": {
    "papermill": {
     "duration": 0.005733,
     "end_time": "2025-05-25T06:47:24.957989",
     "exception": false,
     "start_time": "2025-05-25T06:47:24.952256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f27d6f65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:47:24.970253Z",
     "iopub.status.busy": "2025-05-25T06:47:24.970041Z",
     "iopub.status.idle": "2025-05-25T06:47:32.383815Z",
     "shell.execute_reply": "2025-05-25T06:47:32.383261Z"
    },
    "papermill": {
     "duration": 7.421293,
     "end_time": "2025-05-25T06:47:32.384994",
     "exception": false,
     "start_time": "2025-05-25T06:47:24.963701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 0.0595 - val_loss: 0.0036\n",
      "Epoch 2/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0039 - val_loss: 7.4311e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0034 - val_loss: 9.2092e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0033 - val_loss: 0.0099\n",
      "Epoch 5/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0041 - val_loss: 0.0034\n",
      "Epoch 6/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0033 - val_loss: 0.0012\n",
      "Epoch 7/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0033 - val_loss: 0.0010\n",
      "Epoch 8/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0027 - val_loss: 0.0016\n",
      "Epoch 9/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0027 - val_loss: 0.0011\n",
      "Epoch 10/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0028 - val_loss: 0.0013\n",
      "Epoch 11/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0027 - val_loss: 7.7013e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0024 - val_loss: 0.0024\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13b3ab6a",
   "metadata": {
    "papermill": {
     "duration": 0.009317,
     "end_time": "2025-05-25T06:47:32.404680",
     "exception": false,
     "start_time": "2025-05-25T06:47:32.395363",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f581f3c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:47:32.424254Z",
     "iopub.status.busy": "2025-05-25T06:47:32.424035Z",
     "iopub.status.idle": "2025-05-25T06:47:32.961475Z",
     "shell.execute_reply": "2025-05-25T06:47:32.960778Z"
    },
    "papermill": {
     "duration": 0.548666,
     "end_time": "2025-05-25T06:47:32.962725",
     "exception": false,
     "start_time": "2025-05-25T06:47:32.414059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "Final Test RMSE: 14938.5231\n",
      "Final Test MAPE: 0.0111\n",
      "Final Test MSLE: 0.000206\n",
      "Final Test R² Score: 0.9251\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "756f4549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:47:32.985499Z",
     "iopub.status.busy": "2025-05-25T06:47:32.984829Z",
     "iopub.status.idle": "2025-05-25T06:47:33.287957Z",
     "shell.execute_reply": "2025-05-25T06:47:33.287302Z"
    },
    "papermill": {
     "duration": 0.316094,
     "end_time": "2025-05-25T06:47:33.290036",
     "exception": false,
     "start_time": "2025-05-25T06:47:32.973942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "015142bd",
   "metadata": {
    "papermill": {
     "duration": 0.011247,
     "end_time": "2025-05-25T06:47:33.312855",
     "exception": false,
     "start_time": "2025-05-25T06:47:33.301608",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f99f3a8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T06:47:33.336288Z",
     "iopub.status.busy": "2025-05-25T06:47:33.335533Z",
     "iopub.status.idle": "2025-05-25T06:47:33.366848Z",
     "shell.execute_reply": "2025-05-25T06:47:33.366039Z"
    },
    "papermill": {
     "duration": 0.044186,
     "end_time": "2025-05-25T06:47:33.367998",
     "exception": false,
     "start_time": "2025-05-25T06:47:33.323812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 149.284467,
   "end_time": "2025-05-25T06:47:36.884021",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-25T06:45:07.599554",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
