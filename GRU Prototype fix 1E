{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a1dc66ba",
   "metadata": {
    "papermill": {
     "duration": 0.003091,
     "end_time": "2025-05-25T10:56:33.620116",
     "exception": false,
     "start_time": "2025-05-25T10:56:33.617025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# GRU Model\n",
    "- Skenario 1E: Menggunakan harga emas historis + Cadangan Devisa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7fd1f96b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:33.626468Z",
     "iopub.status.busy": "2025-05-25T10:56:33.626210Z",
     "iopub.status.idle": "2025-05-25T10:56:35.165711Z",
     "shell.execute_reply": "2025-05-25T10:56:35.164849Z"
    },
    "papermill": {
     "duration": 1.544058,
     "end_time": "2025-05-25T10:56:35.167052",
     "exception": false,
     "start_time": "2025-05-25T10:56:33.622994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "17f432ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:35.173281Z",
     "iopub.status.busy": "2025-05-25T10:56:35.172965Z",
     "iopub.status.idle": "2025-05-25T10:56:50.126610Z",
     "shell.execute_reply": "2025-05-25T10:56:50.126032Z"
    },
    "papermill": {
     "duration": 14.958165,
     "end_time": "2025-05-25T10:56:50.127973",
     "exception": false,
     "start_time": "2025-05-25T10:56:35.169808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-25 10:56:36.977040: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748170597.216669      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748170597.294126      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import GRU, Dense, Dropout, Input\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9a02f709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.134756Z",
     "iopub.status.busy": "2025-05-25T10:56:50.133984Z",
     "iopub.status.idle": "2025-05-25T10:56:50.185019Z",
     "shell.execute_reply": "2025-05-25T10:56:50.184150Z"
    },
    "papermill": {
     "duration": 0.055385,
     "end_time": "2025-05-25T10:56:50.186301",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.130916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Inflasi            1932 non-null   float64\n",
      " 4   IndONIA            1932 non-null   float64\n",
      " 5   Cadangan Devisa    1932 non-null   float64\n",
      " 6   Money Supply (M2)  1932 non-null   float64\n",
      " 7   Minyak             1932 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 120.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7a708fdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.193134Z",
     "iopub.status.busy": "2025-05-25T10:56:50.192442Z",
     "iopub.status.idle": "2025-05-25T10:56:50.208519Z",
     "shell.execute_reply": "2025-05-25T10:56:50.208039Z"
    },
    "papermill": {
     "duration": 0.020284,
     "end_time": "2025-05-25T10:56:50.209505",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.189221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Inflasi','IndONIA', 'Kurs', 'Money Supply (M2)', 'Minyak'], axis=1, inplace=True)\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "#  'Cadangan Devisa'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "80fda05b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.216242Z",
     "iopub.status.busy": "2025-05-25T10:56:50.216060Z",
     "iopub.status.idle": "2025-05-25T10:56:50.224472Z",
     "shell.execute_reply": "2025-05-25T10:56:50.223717Z"
    },
    "papermill": {
     "duration": 0.012414,
     "end_time": "2025-05-25T10:56:50.225517",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.213103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 3 columns):\n",
      " #   Column           Non-Null Count  Dtype         \n",
      "---  ------           --------------  -----         \n",
      " 0   Date             1932 non-null   datetime64[ns]\n",
      " 1   Price            1932 non-null   float64       \n",
      " 2   Cadangan Devisa  1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(2)\n",
      "memory usage: 45.4 KB\n"
     ]
    }
   ],
   "source": [
    "# Preprocess numeric columns\n",
    "NumCols = df.columns.drop(['Date'])\n",
    "df[NumCols] = df[NumCols].astype('float64')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0bd80a20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.231260Z",
     "iopub.status.busy": "2025-05-25T10:56:50.231047Z",
     "iopub.status.idle": "2025-05-25T10:56:50.236307Z",
     "shell.execute_reply": "2025-05-25T10:56:50.235525Z"
    },
    "papermill": {
     "duration": 0.009245,
     "end_time": "2025-05-25T10:56:50.237350",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.228105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values: 0\n",
      "Duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "# Cek data\n",
    "print(\"Missing values:\", df.isnull().sum().sum())\n",
    "print(\"Duplicates:\", df.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "20ddaa95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.243576Z",
     "iopub.status.busy": "2025-05-25T10:56:50.243211Z",
     "iopub.status.idle": "2025-05-25T10:56:50.249225Z",
     "shell.execute_reply": "2025-05-25T10:56:50.248455Z"
    },
    "papermill": {
     "duration": 0.01022,
     "end_time": "2025-05-25T10:56:50.250382",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.240162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test size: 720\n"
     ]
    }
   ],
   "source": [
    "# Split train/test by date\n",
    "df_train = df[df['Date'].dt.year < 2022]\n",
    "df_test = df[df['Date'].dt.year >= 2022]\n",
    "test_size = df_test.shape[0]\n",
    "print(\"Test size:\", test_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e9a26ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.256788Z",
     "iopub.status.busy": "2025-05-25T10:56:50.256288Z",
     "iopub.status.idle": "2025-05-25T10:56:50.262146Z",
     "shell.execute_reply": "2025-05-25T10:56:50.261621Z"
    },
    "papermill": {
     "duration": 0.010045,
     "end_time": "2025-05-25T10:56:50.263085",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.253040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling\n",
    "scaler = MinMaxScaler()\n",
    "scaled_data = scaler.fit_transform(df[NumCols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "57559c18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.269215Z",
     "iopub.status.busy": "2025-05-25T10:56:50.268780Z",
     "iopub.status.idle": "2025-05-25T10:56:50.277971Z",
     "shell.execute_reply": "2025-05-25T10:56:50.277333Z"
    },
    "papermill": {
     "duration": 0.013379,
     "end_time": "2025-05-25T10:56:50.279089",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.265710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (1152, 60, 2) (1152,)\n",
      "Test shape: (720, 60, 2) (720,)\n"
     ]
    }
   ],
   "source": [
    "# Sliding window multivariate\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "\n",
    "for i in range(window_size, len(scaled_data)):\n",
    "    X.append(scaled_data[i-window_size:i])\n",
    "    y.append(scaled_data[i, 0])  # Index 0 = 'Price'\n",
    "\n",
    "X = np.array(X)\n",
    "y = np.array(y)\n",
    "\n",
    "# Split back to train/test\n",
    "X_train, X_test = X[:-test_size], X[-test_size:]\n",
    "y_train, y_test = y[:-test_size], y[-test_size:]\n",
    "\n",
    "print(\"Train shape:\", X_train.shape, y_train.shape)\n",
    "print(\"Test shape:\", X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d15b8082",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.285128Z",
     "iopub.status.busy": "2025-05-25T10:56:50.284727Z",
     "iopub.status.idle": "2025-05-25T10:56:50.289750Z",
     "shell.execute_reply": "2025-05-25T10:56:50.289288Z"
    },
    "papermill": {
     "duration": 0.009003,
     "end_time": "2025-05-25T10:56:50.290644",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.281641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define model builder for Keras Tuner\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_1', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_1', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_2', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_2', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_3', 32, 128, step=32)))\n",
    "    model.add(Dropout(hp.Float('dropout_3', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(Dense(1))\n",
    "\n",
    "    lr = hp.Float('lr', 1e-4, 1e-2, sampling='log')\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), loss='mean_squared_error')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "61e30dd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:50.296590Z",
     "iopub.status.busy": "2025-05-25T10:56:50.296374Z",
     "iopub.status.idle": "2025-05-25T10:56:53.236412Z",
     "shell.execute_reply": "2025-05-25T10:56:53.235632Z"
    },
    "papermill": {
     "duration": 2.944438,
     "end_time": "2025-05-25T10:56:53.237751",
     "exception": false,
     "start_time": "2025-05-25T10:56:50.293313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748170611.770214      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748170611.770859      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "# Keras Tuner Random Search\n",
    "tuner = kt.RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='gru_tuner_dir',\n",
    "    project_name='gru_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3870f056",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:56:53.244623Z",
     "iopub.status.busy": "2025-05-25T10:56:53.244085Z",
     "iopub.status.idle": "2025-05-25T10:58:13.882282Z",
     "shell.execute_reply": "2025-05-25T10:58:13.881483Z"
    },
    "papermill": {
     "duration": 80.642737,
     "end_time": "2025-05-25T10:58:13.883500",
     "exception": false,
     "start_time": "2025-05-25T10:56:53.240763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 09s]\n",
      "val_loss: 0.0003195967001374811\n",
      "\n",
      "Best val_loss So Far: 0.0002086711028823629\n",
      "Total elapsed time: 00h 01m 21s\n"
     ]
    }
   ],
   "source": [
    "# Tuning\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "tuner.search(X_train, y_train, validation_data=(X_test, y_test),\n",
    "             epochs=20, batch_size=32,\n",
    "             callbacks=[early_stop], verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "742755ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:58:13.890344Z",
     "iopub.status.busy": "2025-05-25T10:58:13.890122Z",
     "iopub.status.idle": "2025-05-25T10:58:15.418119Z",
     "shell.execute_reply": "2025-05-25T10:58:15.417243Z"
    },
    "papermill": {
     "duration": 1.532886,
     "end_time": "2025-05-25T10:58:15.419443",
     "exception": false,
     "start_time": "2025-05-25T10:58:13.886557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:713: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 24 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step\n",
      "MSLE: 8.140076647628703e-05\n",
      "TUNED GRU -> RMSE: 0.014445452833301977, MAE: 0.011125430425571417, MAPE: 0.021055129335545583, R2: 0.9940667253516297\n"
     ]
    }
   ],
   "source": [
    "# Best model from tuning\n",
    "best_model = tuner.get_best_models(num_models=1)[0]\n",
    "\n",
    "# Evaluation\n",
    "preds = best_model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, preds)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, preds)\n",
    "mape = mean_absolute_percentage_error(y_test, preds)\n",
    "r2 = r2_score(y_test, preds)\n",
    "\n",
    "msle = mean_squared_log_error(y_test, preds)\n",
    "print(f\"MSLE: {msle}\")\n",
    "print(f\"TUNED GRU -> RMSE: {rmse}, MAE: {mae}, MAPE: {mape}, R2: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "09475614",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:58:15.427333Z",
     "iopub.status.busy": "2025-05-25T10:58:15.426725Z",
     "iopub.status.idle": "2025-05-25T10:58:15.693122Z",
     "shell.execute_reply": "2025-05-25T10:58:15.692410Z"
    },
    "papermill": {
     "duration": 0.271433,
     "end_time": "2025-05-25T10:58:15.694362",
     "exception": false,
     "start_time": "2025-05-25T10:58:15.422929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisasi Prediksi vs Aktual\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(y_test, label='Actual Price')\n",
    "plt.plot(preds, label='Predicted Price')\n",
    "plt.title('GRU Prediction vs Actual')\n",
    "plt.xlabel('Time Step')\n",
    "plt.ylabel('Normalized Price')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 110.412369,
   "end_time": "2025-05-25T10:58:19.325044",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-25T10:56:28.912675",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
