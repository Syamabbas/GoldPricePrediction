{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f47489c0",
   "metadata": {
    "papermill": {
     "duration": 0.003847,
     "end_time": "2025-07-21T14:41:56.659282",
     "exception": false,
     "start_time": "2025-07-21T14:41:56.655435",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d4a9dbed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:41:56.666671Z",
     "iopub.status.busy": "2025-07-21T14:41:56.666465Z",
     "iopub.status.idle": "2025-07-21T14:41:58.112137Z",
     "shell.execute_reply": "2025-07-21T14:41:58.111234Z"
    },
    "papermill": {
     "duration": 1.450733,
     "end_time": "2025-07-21T14:41:58.113411",
     "exception": false,
     "start_time": "2025-07-21T14:41:56.662678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6f3c1396",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:41:58.120905Z",
     "iopub.status.busy": "2025-07-21T14:41:58.120569Z",
     "iopub.status.idle": "2025-07-21T14:42:11.831608Z",
     "shell.execute_reply": "2025-07-21T14:42:11.830823Z"
    },
    "papermill": {
     "duration": 13.716366,
     "end_time": "2025-07-21T14:42:11.833207",
     "exception": false,
     "start_time": "2025-07-21T14:41:58.116841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-21 14:42:00.848622: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753108921.066317      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753108921.118835      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79d704a3",
   "metadata": {
    "papermill": {
     "duration": 0.003884,
     "end_time": "2025-07-21T14:42:11.840809",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.836925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f800124e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:11.848631Z",
     "iopub.status.busy": "2025-07-21T14:42:11.847934Z",
     "iopub.status.idle": "2025-07-21T14:42:11.882429Z",
     "shell.execute_reply": "2025-07-21T14:42:11.881562Z"
    },
    "papermill": {
     "duration": 0.039895,
     "end_time": "2025-07-21T14:42:11.883983",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.844088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0aa65341",
   "metadata": {
    "papermill": {
     "duration": 0.002997,
     "end_time": "2025-07-21T14:42:11.890235",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.887238",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d0ba9515",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:11.898526Z",
     "iopub.status.busy": "2025-07-21T14:42:11.898101Z",
     "iopub.status.idle": "2025-07-21T14:42:11.918359Z",
     "shell.execute_reply": "2025-07-21T14:42:11.917474Z"
    },
    "papermill": {
     "duration": 0.026071,
     "end_time": "2025-07-21T14:42:11.919740",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.893669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c7c6063c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:11.929393Z",
     "iopub.status.busy": "2025-07-21T14:42:11.929043Z",
     "iopub.status.idle": "2025-07-21T14:42:11.943423Z",
     "shell.execute_reply": "2025-07-21T14:42:11.942682Z"
    },
    "papermill": {
     "duration": 0.021002,
     "end_time": "2025-07-21T14:42:11.944866",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.923864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "90d0389e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:11.954390Z",
     "iopub.status.busy": "2025-07-21T14:42:11.954143Z",
     "iopub.status.idle": "2025-07-21T14:42:11.961748Z",
     "shell.execute_reply": "2025-07-21T14:42:11.961123Z"
    },
    "papermill": {
     "duration": 0.013707,
     "end_time": "2025-07-21T14:42:11.963000",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.949293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2d28d410",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:11.972668Z",
     "iopub.status.busy": "2025-07-21T14:42:11.972412Z",
     "iopub.status.idle": "2025-07-21T14:42:11.978654Z",
     "shell.execute_reply": "2025-07-21T14:42:11.977825Z"
    },
    "papermill": {
     "duration": 0.012591,
     "end_time": "2025-07-21T14:42:11.979922",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.967331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d1adac74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:11.988505Z",
     "iopub.status.busy": "2025-07-21T14:42:11.988172Z",
     "iopub.status.idle": "2025-07-21T14:42:11.991660Z",
     "shell.execute_reply": "2025-07-21T14:42:11.990920Z"
    },
    "papermill": {
     "duration": 0.009181,
     "end_time": "2025-07-21T14:42:11.993025",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.983844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price']\n",
    "\n",
    "# 'Kurs', 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "34bc5152",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:12.001618Z",
     "iopub.status.busy": "2025-07-21T14:42:12.001417Z",
     "iopub.status.idle": "2025-07-21T14:42:12.008193Z",
     "shell.execute_reply": "2025-07-21T14:42:12.007575Z"
    },
    "papermill": {
     "duration": 0.012442,
     "end_time": "2025-07-21T14:42:12.009366",
     "exception": false,
     "start_time": "2025-07-21T14:42:11.996924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b52691e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:12.018313Z",
     "iopub.status.busy": "2025-07-21T14:42:12.017719Z",
     "iopub.status.idle": "2025-07-21T14:42:12.024735Z",
     "shell.execute_reply": "2025-07-21T14:42:12.024197Z"
    },
    "papermill": {
     "duration": 0.012703,
     "end_time": "2025-07-21T14:42:12.025971",
     "exception": false,
     "start_time": "2025-07-21T14:42:12.013268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "16c79066",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:12.034508Z",
     "iopub.status.busy": "2025-07-21T14:42:12.034303Z",
     "iopub.status.idle": "2025-07-21T14:42:12.038062Z",
     "shell.execute_reply": "2025-07-21T14:42:12.037313Z"
    },
    "papermill": {
     "duration": 0.009366,
     "end_time": "2025-07-21T14:42:12.039193",
     "exception": false,
     "start_time": "2025-07-21T14:42:12.029827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97cf7d34",
   "metadata": {
    "papermill": {
     "duration": 0.00358,
     "end_time": "2025-07-21T14:42:12.046841",
     "exception": false,
     "start_time": "2025-07-21T14:42:12.043261",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f32f43fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:42:12.054574Z",
     "iopub.status.busy": "2025-07-21T14:42:12.054372Z",
     "iopub.status.idle": "2025-07-21T14:44:05.676071Z",
     "shell.execute_reply": "2025-07-21T14:44:05.675234Z"
    },
    "papermill": {
     "duration": 113.627032,
     "end_time": "2025-07-21T14:44:05.677150",
     "exception": false,
     "start_time": "2025-07-21T14:42:12.050118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753108933.177718      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753108933.178395      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753108937.943588      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=46419.3995\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=56912.8894\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=27179.7263\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=21586.9548\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=50591.2634\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=31581.8801\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=35893.7367\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=45994.3495\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=26764.4328\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=23323.5099\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=23464.5291\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=22606.5737\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=23682.9069\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=20984.6847\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=24490.2874\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=22987.9620\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "13     64      0.3         0.0010          64  20984.684670  0.012372   \n",
      "3      32      0.2         0.0005          64  21586.954837  0.012450   \n",
      "11     64      0.2         0.0005          64  22606.573661  0.012940   \n",
      "15     64      0.3         0.0005          64  22987.962044  0.012971   \n",
      "9      64      0.2         0.0010          64  23323.509923  0.013945   \n",
      "\n",
      "          R2  \n",
      "13  0.984817  \n",
      "3   0.983933  \n",
      "11  0.982379  \n",
      "15  0.981780  \n",
      "9   0.981244  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b68f746",
   "metadata": {
    "papermill": {
     "duration": 0.005747,
     "end_time": "2025-07-21T14:44:05.689356",
     "exception": false,
     "start_time": "2025-07-21T14:44:05.683609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "88b497ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:44:05.701862Z",
     "iopub.status.busy": "2025-07-21T14:44:05.701649Z",
     "iopub.status.idle": "2025-07-21T14:44:13.633569Z",
     "shell.execute_reply": "2025-07-21T14:44:13.632985Z"
    },
    "papermill": {
     "duration": 7.939301,
     "end_time": "2025-07-21T14:44:13.634664",
     "exception": false,
     "start_time": "2025-07-21T14:44:05.695363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - loss: 0.0214 - val_loss: 5.0940e-04\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0012\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0019\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0015\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0024\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.5417e-04 - val_loss: 0.0013\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0011\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.7632e-04 - val_loss: 0.0027\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.4364e-04 - val_loss: 8.0177e-04\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.8220e-04 - val_loss: 0.0085\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0043\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99dc8bad",
   "metadata": {
    "papermill": {
     "duration": 0.009875,
     "end_time": "2025-07-21T14:44:13.654972",
     "exception": false,
     "start_time": "2025-07-21T14:44:13.645097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "95e58d82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:44:13.676136Z",
     "iopub.status.busy": "2025-07-21T14:44:13.675590Z",
     "iopub.status.idle": "2025-07-21T14:44:14.223379Z",
     "shell.execute_reply": "2025-07-21T14:44:14.222590Z"
    },
    "papermill": {
     "duration": 0.559588,
     "end_time": "2025-07-21T14:44:14.224672",
     "exception": false,
     "start_time": "2025-07-21T14:44:13.665084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Final Test RMSE: 21892.8390\n",
      "Final Test MAPE: 0.0128\n",
      "Final Test MSLE: 0.000296\n",
      "Final Test R² Score: 0.9835\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d00be09f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:44:14.247385Z",
     "iopub.status.busy": "2025-07-21T14:44:14.247189Z",
     "iopub.status.idle": "2025-07-21T14:44:14.545122Z",
     "shell.execute_reply": "2025-07-21T14:44:14.544425Z"
    },
    "papermill": {
     "duration": 0.310751,
     "end_time": "2025-07-21T14:44:14.546610",
     "exception": false,
     "start_time": "2025-07-21T14:44:14.235859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c43b3f0",
   "metadata": {
    "papermill": {
     "duration": 0.010953,
     "end_time": "2025-07-21T14:44:14.569505",
     "exception": false,
     "start_time": "2025-07-21T14:44:14.558552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "35749ca3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:44:14.592610Z",
     "iopub.status.busy": "2025-07-21T14:44:14.592373Z",
     "iopub.status.idle": "2025-07-21T14:44:14.624052Z",
     "shell.execute_reply": "2025-07-21T14:44:14.623353Z"
    },
    "papermill": {
     "duration": 0.044521,
     "end_time": "2025-07-21T14:44:14.625147",
     "exception": false,
     "start_time": "2025-07-21T14:44:14.580626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 145.327593,
   "end_time": "2025-07-21T14:44:17.667348",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-21T14:41:52.339755",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
