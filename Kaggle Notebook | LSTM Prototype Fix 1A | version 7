{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4b6d90f2",
   "metadata": {
    "papermill": {
     "duration": 0.005128,
     "end_time": "2025-08-10T10:19:25.025958",
     "exception": false,
     "start_time": "2025-08-10T10:19:25.020830",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "17c27bdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:25.035761Z",
     "iopub.status.busy": "2025-08-10T10:19:25.035560Z",
     "iopub.status.idle": "2025-08-10T10:19:26.452197Z",
     "shell.execute_reply": "2025-08-10T10:19:26.451416Z"
    },
    "papermill": {
     "duration": 1.422701,
     "end_time": "2025-08-10T10:19:26.453389",
     "exception": false,
     "start_time": "2025-08-10T10:19:25.030688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "081c92d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:26.464671Z",
     "iopub.status.busy": "2025-08-10T10:19:26.464395Z",
     "iopub.status.idle": "2025-08-10T10:19:39.302481Z",
     "shell.execute_reply": "2025-08-10T10:19:39.301851Z"
    },
    "papermill": {
     "duration": 12.844486,
     "end_time": "2025-08-10T10:19:39.303840",
     "exception": false,
     "start_time": "2025-08-10T10:19:26.459354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-10 10:19:29.012457: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754821169.195978      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754821169.248783      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4b58e51",
   "metadata": {
    "papermill": {
     "duration": 0.004332,
     "end_time": "2025-08-10T10:19:39.313318",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.308986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8092b04f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.323080Z",
     "iopub.status.busy": "2025-08-10T10:19:39.322625Z",
     "iopub.status.idle": "2025-08-10T10:19:39.346721Z",
     "shell.execute_reply": "2025-08-10T10:19:39.345928Z"
    },
    "papermill": {
     "duration": 0.030079,
     "end_time": "2025-08-10T10:19:39.347805",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.317726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4da8d55",
   "metadata": {
    "papermill": {
     "duration": 0.004231,
     "end_time": "2025-08-10T10:19:39.356646",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.352415",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f6cdec0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.366354Z",
     "iopub.status.busy": "2025-08-10T10:19:39.366145Z",
     "iopub.status.idle": "2025-08-10T10:19:39.386405Z",
     "shell.execute_reply": "2025-08-10T10:19:39.385597Z"
    },
    "papermill": {
     "duration": 0.026392,
     "end_time": "2025-08-10T10:19:39.387523",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.361131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   Date    1932 non-null   object\n",
      " 1   Price   1932 non-null   int64 \n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 30.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.drop(['Exchange Rate', 'Foreign Exchange Reserves', 'Money Supply', 'Crude Oil'], axis=1, inplace=True)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "97a1d922",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.397297Z",
     "iopub.status.busy": "2025-08-10T10:19:39.397116Z",
     "iopub.status.idle": "2025-08-10T10:19:39.408113Z",
     "shell.execute_reply": "2025-08-10T10:19:39.407545Z"
    },
    "papermill": {
     "duration": 0.01705,
     "end_time": "2025-08-10T10:19:39.409176",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.392126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8ff1682b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.419659Z",
     "iopub.status.busy": "2025-08-10T10:19:39.419442Z",
     "iopub.status.idle": "2025-08-10T10:19:39.425081Z",
     "shell.execute_reply": "2025-08-10T10:19:39.424507Z"
    },
    "papermill": {
     "duration": 0.012049,
     "end_time": "2025-08-10T10:19:39.426134",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.414085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a1a398a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.436365Z",
     "iopub.status.busy": "2025-08-10T10:19:39.436177Z",
     "iopub.status.idle": "2025-08-10T10:19:39.440648Z",
     "shell.execute_reply": "2025-08-10T10:19:39.440141Z"
    },
    "papermill": {
     "duration": 0.0107,
     "end_time": "2025-08-10T10:19:39.441652",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.430952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "40f8cd56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.451809Z",
     "iopub.status.busy": "2025-08-10T10:19:39.451611Z",
     "iopub.status.idle": "2025-08-10T10:19:39.454546Z",
     "shell.execute_reply": "2025-08-10T10:19:39.454041Z"
    },
    "papermill": {
     "duration": 0.009,
     "end_time": "2025-08-10T10:19:39.455536",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.446536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f4cadd44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.465410Z",
     "iopub.status.busy": "2025-08-10T10:19:39.465218Z",
     "iopub.status.idle": "2025-08-10T10:19:39.472319Z",
     "shell.execute_reply": "2025-08-10T10:19:39.471561Z"
    },
    "papermill": {
     "duration": 0.013292,
     "end_time": "2025-08-10T10:19:39.473408",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.460116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1c206ad4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.483471Z",
     "iopub.status.busy": "2025-08-10T10:19:39.483284Z",
     "iopub.status.idle": "2025-08-10T10:19:39.489391Z",
     "shell.execute_reply": "2025-08-10T10:19:39.488881Z"
    },
    "papermill": {
     "duration": 0.012456,
     "end_time": "2025-08-10T10:19:39.490416",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.477960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ce52b5ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.500330Z",
     "iopub.status.busy": "2025-08-10T10:19:39.500131Z",
     "iopub.status.idle": "2025-08-10T10:19:39.503676Z",
     "shell.execute_reply": "2025-08-10T10:19:39.503021Z"
    },
    "papermill": {
     "duration": 0.009548,
     "end_time": "2025-08-10T10:19:39.504655",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.495107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8b35595",
   "metadata": {
    "papermill": {
     "duration": 0.004532,
     "end_time": "2025-08-10T10:19:39.513857",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.509325",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Train Data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d2d23168",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.524015Z",
     "iopub.status.busy": "2025-08-10T10:19:39.523571Z",
     "iopub.status.idle": "2025-08-10T10:19:39.528491Z",
     "shell.execute_reply": "2025-08-10T10:19:39.527738Z"
    },
    "papermill": {
     "duration": 0.011073,
     "end_time": "2025-08-10T10:19:39.529561",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.518488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "train_data = df.Price[:-split]\n",
    "train_data = scaler.transform(train_data.values.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "751618b9",
   "metadata": {
    "papermill": {
     "duration": 0.004527,
     "end_time": "2025-08-10T10:19:39.538821",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.534294",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Test Data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "70006f9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.548869Z",
     "iopub.status.busy": "2025-08-10T10:19:39.548682Z",
     "iopub.status.idle": "2025-08-10T10:19:39.552579Z",
     "shell.execute_reply": "2025-08-10T10:19:39.551879Z"
    },
    "papermill": {
     "duration": 0.010183,
     "end_time": "2025-08-10T10:19:39.553591",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.543408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "test_data = df.Price[-split-60:]\n",
    "test_data = scaler.transform(test_data.values.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e04b3237",
   "metadata": {
    "papermill": {
     "duration": 0.004673,
     "end_time": "2025-08-10T10:19:39.562979",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.558306",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##  Converting Data to Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eeb1be07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.573247Z",
     "iopub.status.busy": "2025-08-10T10:19:39.573050Z",
     "iopub.status.idle": "2025-08-10T10:19:39.576570Z",
     "shell.execute_reply": "2025-08-10T10:19:39.576104Z"
    },
    "papermill": {
     "duration": 0.0099,
     "end_time": "2025-08-10T10:19:39.577578",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.567678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = np.array(X_train)\n",
    "X_test  = np.array(X_test)\n",
    "y_train = np.array(y_train)\n",
    "y_test  = np.array(y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3f197ff5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.588072Z",
     "iopub.status.busy": "2025-08-10T10:19:39.587826Z",
     "iopub.status.idle": "2025-08-10T10:19:39.591619Z",
     "shell.execute_reply": "2025-08-10T10:19:39.591132Z"
    },
    "papermill": {
     "duration": 0.010194,
     "end_time": "2025-08-10T10:19:39.592631",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.582437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n",
    "X_test  = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n",
    "y_train = np.reshape(y_train, (-1,1))\n",
    "y_test  = np.reshape(y_test, (-1,1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d52f976b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.603643Z",
     "iopub.status.busy": "2025-08-10T10:19:39.603116Z",
     "iopub.status.idle": "2025-08-10T10:19:39.606857Z",
     "shell.execute_reply": "2025-08-10T10:19:39.606295Z"
    },
    "papermill": {
     "duration": 0.010271,
     "end_time": "2025-08-10T10:19:39.607863",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.597592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train Shape:  (1497, 60, 1)\n",
      "y_train Shape:  (1497, 1)\n",
      "X_test Shape:   (375, 60, 1)\n",
      "y_test Shape:   (375, 1)\n"
     ]
    }
   ],
   "source": [
    "print('X_train Shape: ', X_train.shape)\n",
    "print('y_train Shape: ', y_train.shape)\n",
    "print('X_test Shape:  ', X_test.shape)\n",
    "print('y_test Shape:  ', y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc3cbe08",
   "metadata": {
    "papermill": {
     "duration": 0.004571,
     "end_time": "2025-08-10T10:19:39.617290",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.612719",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LSTM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7ff43092",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.627543Z",
     "iopub.status.busy": "2025-08-10T10:19:39.627375Z",
     "iopub.status.idle": "2025-08-10T10:19:39.632076Z",
     "shell.execute_reply": "2025-08-10T10:19:39.631404Z"
    },
    "papermill": {
     "duration": 0.011148,
     "end_time": "2025-08-10T10:19:39.633228",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.622080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras import Model\n",
    "def define_model():\n",
    "    input1 = Input(shape=(window_size,1))\n",
    "    x = LSTM(units = 64, return_sequences=True)(input1)  \n",
    "    x = Dropout(0.2)(x)\n",
    "    x = LSTM(units = 64, return_sequences=True)(x)\n",
    "    x = Dropout(0.2)(x)\n",
    "    x = LSTM(units = 64)(x)\n",
    "    x = Dropout(0.2)(x)\n",
    "    x = Dense(32, activation='softmax')(x)\n",
    "    dnn_output = Dense(1)(x)\n",
    "\n",
    "    model = Model(inputs=input1, outputs=[dnn_output])\n",
    "    model.compile(loss='mean_squared_error', optimizer='Nadam')\n",
    "    model.summary()\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8c64a087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:19:39.643819Z",
     "iopub.status.busy": "2025-08-10T10:19:39.643622Z",
     "iopub.status.idle": "2025-08-10T10:21:06.959188Z",
     "shell.execute_reply": "2025-08-10T10:21:06.958388Z"
    },
    "papermill": {
     "duration": 87.322557,
     "end_time": "2025-08-10T10:21:06.960497",
     "exception": false,
     "start_time": "2025-08-10T10:19:39.637940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754821180.943613      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1754821180.944303      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │          <span style=\"color: #00af00; text-decoration-color: #00af00\">16,896</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │          <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ lstm_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m1\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │          \u001b[38;5;34m16,896\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │          \u001b[38;5;34m33,024\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ lstm_2 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │          \u001b[38;5;34m33,024\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m2,080\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m33\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">85,057</span> (332.25 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m85,057\u001b[0m (332.25 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">85,057</span> (332.25 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m85,057\u001b[0m (332.25 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754821187.793717      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - loss: 0.0384 - val_loss: 0.0048\n",
      "Epoch 2/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0011 - val_loss: 0.0052\n",
      "Epoch 3/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 9.5881e-04 - val_loss: 0.0033\n",
      "Epoch 4/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 9.9603e-04 - val_loss: 0.0048\n",
      "Epoch 5/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 7.0644e-04 - val_loss: 0.0033\n",
      "Epoch 6/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.4358e-04 - val_loss: 0.0029\n",
      "Epoch 7/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 5.7179e-04 - val_loss: 0.0091\n",
      "Epoch 8/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 7.1158e-04 - val_loss: 0.0024\n",
      "Epoch 9/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 5.3459e-04 - val_loss: 0.0015\n",
      "Epoch 10/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 4.6728e-04 - val_loss: 0.0013\n",
      "Epoch 11/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 5.7296e-04 - val_loss: 0.0017\n",
      "Epoch 12/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.9819e-04 - val_loss: 0.0029\n",
      "Epoch 13/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 4.1587e-04 - val_loss: 0.0061\n",
      "Epoch 14/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 4.0475e-04 - val_loss: 9.4600e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 4.3416e-04 - val_loss: 0.0037\n",
      "Epoch 16/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 4.4953e-04 - val_loss: 0.0022\n",
      "Epoch 17/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.8594e-04 - val_loss: 0.0014\n",
      "Epoch 18/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.1759e-04 - val_loss: 0.0012\n",
      "Epoch 19/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.1200e-04 - val_loss: 0.0016\n",
      "Epoch 20/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.3749e-04 - val_loss: 0.0016\n",
      "Epoch 21/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.1781e-04 - val_loss: 0.0013\n",
      "Epoch 22/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.2679e-04 - val_loss: 0.0016\n",
      "Epoch 23/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.1508e-04 - val_loss: 9.7058e-04\n",
      "Epoch 24/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.8720e-04 - val_loss: 0.0010\n",
      "Epoch 25/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.6389e-04 - val_loss: 0.0039\n",
      "Epoch 26/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 4.2772e-04 - val_loss: 0.0011\n",
      "Epoch 27/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.8857e-04 - val_loss: 0.0017\n",
      "Epoch 28/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 3.1669e-04 - val_loss: 0.0015\n",
      "Epoch 29/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.6436e-04 - val_loss: 6.9454e-04\n",
      "Epoch 30/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.4232e-04 - val_loss: 0.0012\n",
      "Epoch 31/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.5645e-04 - val_loss: 0.0012\n",
      "Epoch 32/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.6516e-04 - val_loss: 8.1489e-04\n",
      "Epoch 33/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.4685e-04 - val_loss: 5.5155e-04\n",
      "Epoch 34/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.4245e-04 - val_loss: 7.9326e-04\n",
      "Epoch 35/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.6677e-04 - val_loss: 8.4313e-04\n",
      "Epoch 36/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.2703e-04 - val_loss: 5.5588e-04\n",
      "Epoch 37/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.1864e-04 - val_loss: 8.4885e-04\n",
      "Epoch 38/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.2240e-04 - val_loss: 5.1884e-04\n",
      "Epoch 39/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.2090e-04 - val_loss: 5.0652e-04\n",
      "Epoch 40/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.0334e-04 - val_loss: 4.1492e-04\n",
      "Epoch 41/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.0854e-04 - val_loss: 8.1663e-04\n",
      "Epoch 42/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.1651e-04 - val_loss: 6.0881e-04\n",
      "Epoch 43/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.9416e-04 - val_loss: 7.4315e-04\n",
      "Epoch 44/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.9333e-04 - val_loss: 0.0011\n",
      "Epoch 45/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 2.0284e-04 - val_loss: 4.2476e-04\n",
      "Epoch 46/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 2.3729e-04 - val_loss: 5.2121e-04\n",
      "Epoch 47/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.4874e-04 - val_loss: 0.0012\n",
      "Epoch 48/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.1906e-04 - val_loss: 4.5971e-04\n",
      "Epoch 49/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.9436e-04 - val_loss: 8.9212e-04\n",
      "Epoch 50/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.6527e-04 - val_loss: 4.2807e-04\n",
      "Epoch 51/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.1018e-04 - val_loss: 7.1023e-04\n",
      "Epoch 52/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.8943e-04 - val_loss: 4.3009e-04\n",
      "Epoch 53/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 2.2100e-04 - val_loss: 7.6350e-04\n",
      "Epoch 54/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.9964e-04 - val_loss: 4.8399e-04\n",
      "Epoch 55/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.4176e-04 - val_loss: 5.5091e-04\n",
      "Epoch 56/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.1363e-04 - val_loss: 9.4647e-04\n",
      "Epoch 57/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.8559e-04 - val_loss: 5.7308e-04\n",
      "Epoch 58/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.0470e-04 - val_loss: 7.1293e-04\n",
      "Epoch 59/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.9607e-04 - val_loss: 4.9579e-04\n",
      "Epoch 60/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.9073e-04 - val_loss: 3.9153e-04\n",
      "Epoch 61/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.9828e-04 - val_loss: 6.9728e-04\n",
      "Epoch 62/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.8008e-04 - val_loss: 0.0012\n",
      "Epoch 63/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.0184e-04 - val_loss: 4.7308e-04\n",
      "Epoch 64/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.7446e-04 - val_loss: 3.8446e-04\n",
      "Epoch 65/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.8191e-04 - val_loss: 4.7594e-04\n",
      "Epoch 66/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6304e-04 - val_loss: 7.2748e-04\n",
      "Epoch 67/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6752e-04 - val_loss: 0.0016\n",
      "Epoch 68/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.0266e-04 - val_loss: 8.7302e-04\n",
      "Epoch 69/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 1.6891e-04 - val_loss: 4.5062e-04\n",
      "Epoch 70/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 1.8866e-04 - val_loss: 0.0010\n",
      "Epoch 71/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6268e-04 - val_loss: 3.8633e-04\n",
      "Epoch 72/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.5284e-04 - val_loss: 5.0237e-04\n",
      "Epoch 73/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5772e-04 - val_loss: 8.8302e-04\n",
      "Epoch 74/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5720e-04 - val_loss: 3.7594e-04\n",
      "Epoch 75/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 1.5655e-04 - val_loss: 4.5903e-04\n",
      "Epoch 76/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5258e-04 - val_loss: 7.2752e-04\n",
      "Epoch 77/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.5759e-04 - val_loss: 5.3817e-04\n",
      "Epoch 78/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6912e-04 - val_loss: 4.8492e-04\n",
      "Epoch 79/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5474e-04 - val_loss: 5.0819e-04\n",
      "Epoch 80/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6460e-04 - val_loss: 0.0010\n",
      "Epoch 81/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4753e-04 - val_loss: 4.7412e-04\n",
      "Epoch 82/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.3928e-04 - val_loss: 5.5290e-04\n",
      "Epoch 83/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4532e-04 - val_loss: 4.3201e-04\n",
      "Epoch 84/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.7671e-04 - val_loss: 8.0626e-04\n",
      "Epoch 85/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5239e-04 - val_loss: 4.6884e-04\n",
      "Epoch 86/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4854e-04 - val_loss: 3.7727e-04\n",
      "Epoch 87/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.7461e-04 - val_loss: 3.3048e-04\n",
      "Epoch 88/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4044e-04 - val_loss: 0.0015\n",
      "Epoch 89/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.8095e-04 - val_loss: 5.9275e-04\n",
      "Epoch 90/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2888e-04 - val_loss: 0.0015\n",
      "Epoch 91/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.7437e-04 - val_loss: 3.7006e-04\n",
      "Epoch 92/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.5151e-04 - val_loss: 5.2332e-04\n",
      "Epoch 93/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.2015e-04 - val_loss: 3.6557e-04\n",
      "Epoch 94/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2798e-04 - val_loss: 9.4138e-04\n",
      "Epoch 95/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2955e-04 - val_loss: 5.7667e-04\n",
      "Epoch 96/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.3572e-04 - val_loss: 4.2020e-04\n",
      "Epoch 97/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.3335e-04 - val_loss: 5.1457e-04\n",
      "Epoch 98/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.2592e-04 - val_loss: 4.2491e-04\n",
      "Epoch 99/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.3380e-04 - val_loss: 4.9830e-04\n",
      "Epoch 100/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2195e-04 - val_loss: 6.3039e-04\n",
      "Epoch 101/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.0207e-04 - val_loss: 3.5149e-04\n",
      "Epoch 102/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6746e-04 - val_loss: 3.3623e-04\n",
      "Epoch 103/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.7633e-04 - val_loss: 5.6639e-04\n",
      "Epoch 104/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5290e-04 - val_loss: 3.9662e-04\n",
      "Epoch 105/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.4701e-04 - val_loss: 5.4238e-04\n",
      "Epoch 106/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.3702e-04 - val_loss: 4.5414e-04\n",
      "Epoch 107/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 1.2731e-04 - val_loss: 8.2956e-04\n",
      "Epoch 108/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 1.4866e-04 - val_loss: 6.0855e-04\n",
      "Epoch 109/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.2989e-04 - val_loss: 7.1541e-04\n",
      "Epoch 110/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.1676e-04 - val_loss: 4.8326e-04\n",
      "Epoch 111/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.2552e-04 - val_loss: 4.4680e-04\n",
      "Epoch 112/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2361e-04 - val_loss: 7.1375e-04\n",
      "Epoch 113/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2675e-04 - val_loss: 5.3619e-04\n",
      "Epoch 114/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2438e-04 - val_loss: 4.5661e-04\n",
      "Epoch 115/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1500e-04 - val_loss: 6.9869e-04\n",
      "Epoch 116/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1490e-04 - val_loss: 4.9278e-04\n",
      "Epoch 117/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.1248e-04 - val_loss: 5.9935e-04\n",
      "Epoch 118/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.2706e-04 - val_loss: 3.9883e-04\n",
      "Epoch 119/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2876e-04 - val_loss: 5.9908e-04\n",
      "Epoch 120/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.0207e-04 - val_loss: 5.1532e-04\n",
      "Epoch 121/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4275e-04 - val_loss: 7.2428e-04\n",
      "Epoch 122/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2925e-04 - val_loss: 4.5731e-04\n",
      "Epoch 123/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0095e-04 - val_loss: 8.3414e-04\n",
      "Epoch 124/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1519e-04 - val_loss: 4.9740e-04\n",
      "Epoch 125/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0906e-04 - val_loss: 6.5472e-04\n",
      "Epoch 126/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1520e-04 - val_loss: 4.4233e-04\n",
      "Epoch 127/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1554e-04 - val_loss: 3.8044e-04\n",
      "Epoch 128/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4105e-04 - val_loss: 8.2709e-04\n",
      "Epoch 129/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0237e-04 - val_loss: 4.2625e-04\n",
      "Epoch 130/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1602e-04 - val_loss: 5.6071e-04\n",
      "Epoch 131/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.1351e-04 - val_loss: 7.3128e-04\n",
      "Epoch 132/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0378e-04 - val_loss: 0.0028\n",
      "Epoch 133/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.3766e-04 - val_loss: 0.0017\n",
      "Epoch 134/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6971e-04 - val_loss: 6.2103e-04\n",
      "Epoch 135/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2305e-04 - val_loss: 5.6041e-04\n",
      "Epoch 136/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1879e-04 - val_loss: 5.1046e-04\n",
      "Epoch 137/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0973e-04 - val_loss: 7.8545e-04\n",
      "Epoch 138/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1542e-04 - val_loss: 8.8300e-04\n",
      "Epoch 139/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0050e-04 - val_loss: 5.3845e-04\n",
      "Epoch 140/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1207e-04 - val_loss: 7.0966e-04\n",
      "Epoch 141/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1089e-04 - val_loss: 8.7281e-04\n",
      "Epoch 142/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0366e-04 - val_loss: 5.0645e-04\n",
      "Epoch 143/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4520e-04 - val_loss: 4.0379e-04\n",
      "Epoch 144/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 1.0141e-04 - val_loss: 5.6517e-04\n",
      "Epoch 145/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.8402e-05 - val_loss: 4.0030e-04\n",
      "Epoch 146/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0332e-04 - val_loss: 4.4029e-04\n",
      "Epoch 147/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.1011e-04 - val_loss: 4.6160e-04\n",
      "Epoch 148/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.4105e-05 - val_loss: 6.8702e-04\n",
      "Epoch 149/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.2281e-05 - val_loss: 6.5678e-04\n",
      "Epoch 150/150\n",
      "\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 1.0335e-04 - val_loss: 5.5728e-04\n"
     ]
    }
   ],
   "source": [
    "model = define_modeln",
    "history = model.fit(X_train, y_train, epochs=150, batch_size=32, validation_split=0.1, verbose=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f813a3cd",
   "metadata": {
    "papermill": {
     "duration": 0.068479,
     "end_time": "2025-08-10T10:21:07.101791",
     "exception": false,
     "start_time": "2025-08-10T10:21:07.033312",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##  Eval before tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f6655b01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:21:07.237804Z",
     "iopub.status.busy": "2025-08-10T10:21:07.237557Z",
     "iopub.status.idle": "2025-08-10T10:21:08.067377Z",
     "shell.execute_reply": "2025-08-10T10:21:08.066665Z"
    },
    "papermill": {
     "duration": 0.89947,
     "end_time": "2025-08-10T10:21:08.068555",
     "exception": false,
     "start_time": "2025-08-10T10:21:07.169085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0293 \n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 31ms/step\n"
     ]
    }
   ],
   "source": [
    "result = model.evaluate(X_test, y_test)\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "MAPE = mean_absolute_percentage_error(y_test, y_pred)\n",
    "Accuracy = 1 - MAPE\n",
    "\n",
    "y_test_true = scaler.inverse_transform(y_test)\n",
    "y_test_pred = scaler.inverse_transform(y_pred)\n",
    "\n",
    "# Menghitung RMSE\n",
    "RMSE = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "\n",
    "# Hitung R² (Koefisien Determinasi)\n",
    "R2 = r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "286612f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:21:08.206341Z",
     "iopub.status.busy": "2025-08-10T10:21:08.206136Z",
     "iopub.status.idle": "2025-08-10T10:21:08.210462Z",
     "shell.execute_reply": "2025-08-10T10:21:08.209762Z"
    },
    "papermill": {
     "duration": 0.073702,
     "end_time": "2025-08-10T10:21:08.211583",
     "exception": false,
     "start_time": "2025-08-10T10:21:08.137881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE: 0.2826693602353903\n",
      "Test MSE: 0.07990197092294693\n",
      "Test MAPE: 0.2852675440062957\n",
      "Test Accuracy: 0.7147324559937043\n",
      "Test R² Score: -1.5920946633813737\n"
     ]
    }
   ],
   "source": [
    "print(\"Test RMSE:\", RMSE)\n",
    "print(\"Test MSE:\", result)\n",
    "print(\"Test MAPE:\", MAPE)\n",
    "print(\"Test Accuracy:\", Accuracy)\n",
    "print(\"Test R² Score:\", R2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94d0b7f9",
   "metadata": {
    "papermill": {
     "duration": 0.068712,
     "end_time": "2025-08-10T10:21:08.348773",
     "exception": false,
     "start_time": "2025-08-10T10:21:08.280061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c078158e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:21:08.486172Z",
     "iopub.status.busy": "2025-08-10T10:21:08.485917Z",
     "iopub.status.idle": "2025-08-10T10:22:58.648112Z",
     "shell.execute_reply": "2025-08-10T10:22:58.647272Z"
    },
    "papermill": {
     "duration": 110.232087,
     "end_time": "2025-08-10T10:22:58.649301",
     "exception": false,
     "start_time": "2025-08-10T10:21:08.417214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=50218.6566\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=55968.3477\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=22123.4990\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=22788.1740\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=25087.4016\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=25188.4639\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=21657.9247\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=22786.7720\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=35923.2091\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=24407.5927\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=29368.9979\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=22869.1458\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=62734.2417\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=21911.9318\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=23131.2629\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=22960.6186\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "6      32      0.3         0.0005          32  21657.924714  0.012321   \n",
      "13     64      0.3         0.0010          64  21911.931750  0.012689   \n",
      "2      32      0.2         0.0005          32  22123.498994  0.013325   \n",
      "7      32      0.3         0.0005          64  22786.772048  0.013383   \n",
      "3      32      0.2         0.0005          64  22788.174036  0.012759   \n",
      "\n",
      "          R2  \n",
      "6   0.983827  \n",
      "13  0.983446  \n",
      "2   0.983124  \n",
      "7   0.982097  \n",
      "3   0.982095  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9a85da8",
   "metadata": {
    "papermill": {
     "duration": 0.07102,
     "end_time": "2025-08-10T10:22:58.792568",
     "exception": false,
     "start_time": "2025-08-10T10:22:58.721548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "70adbae8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:22:58.933987Z",
     "iopub.status.busy": "2025-08-10T10:22:58.933745Z",
     "iopub.status.idle": "2025-08-10T10:23:07.738407Z",
     "shell.execute_reply": "2025-08-10T10:23:07.737876Z"
    },
    "papermill": {
     "duration": 8.876559,
     "end_time": "2025-08-10T10:23:07.739451",
     "exception": false,
     "start_time": "2025-08-10T10:22:58.862892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 16ms/step - loss: 0.0200 - val_loss: 0.0058\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0015 - val_loss: 0.0037\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0017\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0013\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0026\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0014\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0031\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.2703e-04 - val_loss: 0.0024\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.1236e-04 - val_loss: 0.0037\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.4491e-04 - val_loss: 0.0040\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.5299e-04 - val_loss: 0.0046\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.9547e-04 - val_loss: 0.0042\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.0235e-04 - val_loss: 0.0038\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.7893e-04 - val_loss: 0.0044\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eba2e93",
   "metadata": {
    "papermill": {
     "duration": 0.074544,
     "end_time": "2025-08-10T10:23:07.891751",
     "exception": false,
     "start_time": "2025-08-10T10:23:07.817207",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5cc080c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:23:08.042047Z",
     "iopub.status.busy": "2025-08-10T10:23:08.041531Z",
     "iopub.status.idle": "2025-08-10T10:23:08.585186Z",
     "shell.execute_reply": "2025-08-10T10:23:08.584473Z"
    },
    "papermill": {
     "duration": 0.619674,
     "end_time": "2025-08-10T10:23:08.586444",
     "exception": false,
     "start_time": "2025-08-10T10:23:07.966770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Final Test RMSE: 35579.9045\n",
      "Final Test MAPE: 0.0203\n",
      "Final Test MSLE: 0.000686\n",
      "Final Test R² Score: 0.9564\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "78ded278",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:23:08.790418Z",
     "iopub.status.busy": "2025-08-10T10:23:08.789768Z",
     "iopub.status.idle": "2025-08-10T10:23:09.075845Z",
     "shell.execute_reply": "2025-08-10T10:23:09.075175Z"
    },
    "papermill": {
     "duration": 0.410281,
     "end_time": "2025-08-10T10:23:09.077471",
     "exception": false,
     "start_time": "2025-08-10T10:23:08.667190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABW4AAAJOCAYAAAAnP56mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3iUddbG8e9Meg/pCSEQeq8CNqSroK4oVlCxV3Stu+uui2J3ldfeQcTeG4hKF0QF6b2HBJIQkpBeJzPP+8eTDIQkkECSScL9ua65MjNPOzMJEm/OnJ/FMAwDEREREREREREREWkyrK4uQEREREREREREREQqU3ArIiIiIiIiIiIi0sQouBURERERERERERFpYhTcioiIiIiIiIiIiDQxCm5FREREREREREREmhgFtyIiIiIiIiIiIiJNjIJbERERERERERERkSZGwa2IiIiIiIiIiIhIE6PgVkRERERERERERKSJUXArIiIi0sDef/99LBYLe/fuPe6+7dq14/rrr2/wmpYsWYLFYmHJkiUNfq2m5LHHHsNisVR6rr7f8+uvv5527drV2/lcZdiwYQwbNqxBr1Hd96MpOZk/J3X5cy8iIiJSHQW3IiIiIkdISEhg8uTJdO7cGV9fX3x9fenevTt33XUXGzZscHV5ThaLxXmzWq3ExMRw7rnnNvkgtrnWfbSUlBQee+wx1q1b5+pSTtiR34sjb1FRUa4urYrrr78ei8VCYGAgRUVFVbbv3LnTWf8LL7zgggpFRERE6p+7qwsQERERaSrmzJnDlVdeibu7OxMnTqRPnz5YrVa2bdvGN998w5tvvklCQgJt27Z1dakAjB49muuuuw7DMEhISOCNN95gxIgR/Pjjj4wZM+aYx55zzjkUFRXh6enZSNUedjJ1N4Tt27djtdatnyElJYWpU6fSrl07+vbtW2nbu+++i8PhqMcKG07F9+JIPj4+AMybN88VJdXI3d2dwsJCZs+ezRVXXFFp28cff4y3tzfFxcUuqk5ERESk/im4FREREQF2797NVVddRdu2bVm4cCHR0dGVtj/33HO88cYbdQ74GlLnzp255pprnI8vueQSevfuzUsvvVRjAFpcXIynpydWqxVvb+/GKrWSk627vnl5edXr+Tw8POr1fA3p6O/FkVwR6h+Ll5cXZ511Fp9++mmV4PaTTz7hggsu4Ouv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mDVrFtddd53z+aPrOxkTJkzgvffew2q1ctVVV9W4X9u2bWv8M1qxveLrpk2bMAyj0vf26GNr+zMoIiIiUh804/YYJk+ezB9//MFnn33Ghg0buPzyyzn//POd/xMwe/Zs2rdvz5w5c4iPj6ddu3bcfPPN6rgVERFphv7xj3/g6+vLjTfeSFpaWpXtR3c7RkdH07dvX2bNmkV2drbz+U2bNjFv3jzGjh1b47VGjRqFh4cHr776aqXzvvTSSyf9Ok5U//79iY+P56WXXqr0euDwa4+IiGDYsGG8/fbbpKamVjlHenp6g9Y4YMAAOnTowAsvvFDtWIuK67u5uXHeeefx3XffkZSU5Ny+detWfvnll+NeZ/z48axfv55vv/22yraK96IilD/6varO2LFjsdvtvPbaa5Wef/HFF7FYLMdsJKiLUaNGVbod3YHbWCo6co/82TYMg5dffrnerjF8+HCeeOIJXnvtNaKiomrcb+zYsaxcuZI//vjD+VxBQQHvvPMO7dq1o3v37s79UlJS+Oqrr5z7FRYW8s4771Q6X21/BkVERETqwyndcXssSUlJzJw5k6SkJGJiYgDzY4E///wzM2fO5Omnn2bPnj0kJiby5Zdf8sEHH2C327nvvvu47LLLWLRokYtfgYiIiNRFp06d+OSTT7j66qvp0qULEydOpE+fPhiGQUJCAp988glWq5XY2FjnMc8//zxjxozhjDPO4KabbqKoqIhXX32VoKCgY358Ozw8nAcffJBnnnmGCy+8kLFjx7J27Vp++uknwsLCGuHVVmW1WnnzzTe56KKL6Nu3LzfccAPR0dFs27aNzZs3OwPP119/nbPPPptevXpxyy230L59e9LS0vjjjz/Yv38/69evb9Aap0+fzpgxY+jRowc33HADrVu3Jjk5mcWLFxMYGMjs2bMBmDp1Kj///DNDhgzhzjvvpKysjFdffZUePXqwYcOGY17noYce4quvvuLyyy/nxhtvZMCAARw6dIgffviBt956iz59+tChQweCg4N56623CAgIwM/Pj8GDB1f76auLLrqI4cOH85///Ie9e/fSp08f5s2bx/fff8+9995baSGylqBr16506NCBBx98kOTkZAIDA/n666/rtZvcarXyyCOPHHe/f/3rX3z66aeMGTOGe+65h5CQEGbNmkVCQgJff/01VqvZx3LLLbfw2muvcd1117F69Wqio6P58MMP8fX1rXLd2v4MioiIiJwsBbc12LhxI3a7nc6dO1d6vqSkhNDQUMCccVVSUsIHH3zg3G/GjBkMGDCA7du3V7tYiYiIiDRdF198MRs3bmTatGnMmzeP9957D4vFQtu2bbngggu4/fbb6dOnj3P/UaNG8fPPP/Poo48yZcoUPDw8GDp0KM8999xxxyc9+eSTeHt789Zbb7F48WIGDx7MvHnzuOCCCxr6ZdbovPPOY/HixUydOpVp06bhcDjo0KEDt9xyi3Of7t27s2rVKqZOncr7779PZmYmERER9OvXjylTpjR4jcOGDeOPP/5wdlvm5+cTFRXF4MGDue2225z79e7dm19++YX777+fKVOmEBsby9SpU0lNTT1ucOvv78+yZct49NFH+fbbb5k1axYRERGMHDnSGdx7eHgwa9YsHn74YW6//XbKysqYOXNmtd93q9XKDz/8wJQpU/j888+ZOXMm7dq14/nnn+eBBx6o3zeoCfDw8GD27Nncc889PPPMM3h7e3PJJZcwefLkSn9+GkNkZCS///47//znP3n11VcpLi6md+/ezJ49u9KfNV9fXxYuXMjdd9/Nq6++iq+vLxMnTmTMmDGcf/75lc5Z259BERERkZNlMY63ysEpwmKx8O233zJu3DgAPv/8cyZOnMjmzZurLMDg7+9PVFQUjz76KE8//TQ2m825raioCF9fX+bNm8fo0aMb8yWIiIiIiIiIiIhIC6GO2xr069cPu93OwYMHGTJkSLX7nHXWWZSVlbF7927nR9x27NgB1N8iEyIiIiIiIiIiInLqOaU7bvPz89m1axdgBrX/93//x/DhwwkJCSEuLo5rrrmG5cuXM23aNPr160d6ejoLFy6kd+/eXHDBBTgcDgYOHIi/vz8vvfQSDoeDu+66i8DAQObNm+fiVyciIiIiIiIiIiLN1Skd3C5ZsoThw4dXeX7SpEm8//772Gw2nnzyST744AOSk5MJCwvj9NNPZ+rUqfTq1QuAlJQU7r77bubNm4efnx9jxoxh2rRphISENPbLERERERERERERkRbilA5uRURERERERERERJoiq6sLEBEREREREREREZHKFNyKiIiIiIiIiIiINDHuri6gsTkcDlJSUggICMBisbi6HBERERERERERETlFGIZBXl4eMTExWK3H7qk95YLblJQU2rRp4+oyRERERERERERE5BS1b98+YmNjj7nPKRfcBgQEAOabExgY6OJqREREpCY2m4158+Zx7rnn4uHh4epyRERERESkAZ0qv//n5ubSpk0bZ0Z5LKdccFsxHiEwMFDBrYiISBNms9nw9fUlMDCwRf/iJiIiIiIip97v/7UZ4arFyURERERERERERESaGAW3IiIiIiIiIiIiIk2MglsRERERERERERGRJuaUm3FbW3a7HZvN5uoypIXx8PDAzc3N1WWIiIiIiIiIiEgTp+D2KIZhcODAAbKzs11dirRQwcHBREVF1WoItYiIiIiIiIiInJoU3B6lIrSNiIjA19dX4ZrUG8MwKCws5ODBgwBER0e7uCIREREREREREWmqFNwewW63O0Pb0NBQV5cjLZCPjw8ABw8eJCIiQmMTRERERERERESkWlqc7AgVM219fX1dXIm0ZBU/X5qhLCIiIiIiIiIiNVFwWw2NR5CGpJ8vERERERERERE5HgW3IiIiIiIiIiIiIk2MgltpFBaLhe+++67ez9uuXTteeumlej+viIiIiIiIiIiIKym4bWH++OMP3NzcuOCCC+p8rCtD0Ouvvx6LxYLFYsHT05OOHTvy+OOPU1ZWdszj/vrrL2699dZGqlJERERERERERKRxKLhtYWbMmMHdd9/N0qVLSUlJcXU5dXL++eeTmprKzp07eeCBB3jsscd4/vnnq923tLQUgPDwcC0mJyIiIiIiIiIiLY6C2xYkPz+fzz//nDvuuIMLLriA999/v8o+s2fPZuDAgXh7exMWFsYll1wCwLBhw0hMTOS+++5zdr4CPPbYY/Tt27fSOV566SXatWvnfPzXX38xevRowsLCCAoKYujQoaxZs6bO9Xt5eREVFUXbtm254447GDVqFD/88ANgduSOGzeOp556ipiYGLp06QJU7RLOzs7mtttuIzIyEm9vb3r27MmcOXOc23/77TeGDBmCj48Pbdq04Z577qGgoKDOtYqIiIiIiIiIiDQkBbfHYRgGhaVlLrkZhlGnWr/44gu6du1Kly5duOaaa3jvvfcqnePHH3/kkksuYezYsaxdu5aFCxcyaNAgAL755htiY2N5/PHHSU1NJTU1tdbXzcvLY9KkSfz222/8+eefdOrUibFjx5KXl1en+o/m4+Pj7KwFWLhwIdu3b2f+/PmVwtgKDoeDMWPGsHz5cj766CO2bNnCs88+i5ubGwC7d+/m/PPPZ/z48WzYsIHPP/+c3377jcmTJ59UnSIiIiIiIiIiIvXN3dUFNHVFNjvdp/zikmtvefw8fD1r/y2aMWMG11xzDWCOHcjJyeHXX39l2LBhADz11FNcddVVTJ061XlMnz59AAgJCcHNzY2AgACioqLqVOeIESMqPX7nnXcIDg7m119/5cILL6zTucAMyxcuXMgvv/zC3Xff7Xzez8+P6dOn4+npWe1xCxYsYOXKlWzdupXOnTsD0L59e+f2Z555hokTJ3LvvfcC0KlTJ1555RWGDh3Km2++ibe3d51rFRERERERERERaQjquG0htm/fzsqVK7n66qsBcHd358orr2TGjBnOfdatW8fIkSPr/dppaWnccsstdOrUiaCgIAIDA8nPzycpKalO55kzZw7+/v54e3szZswYrrzySh577DHn9l69etUY2oL5+mJjY52h7dHWr1/P+++/j7+/v/N23nnn4XA4SEhIqFOtIiIiIiIiIiIiDUkdt8fh4+HGlsfPc9m1a2vGjBmUlZURExPjfM4wDLy8vHjttdcICgrCx8enzjVYrdYqIxtsNlulx5MmTSIzM5OXX36Ztm3b4uXlxRlnnFFpzEFtDB8+nDfffBNPT09iYmJwd6/84+nn53fM44/3+vLz87ntttu45557qmyLi4urU60iIiIiIiIiIiINScHtcVgsljqNK3CFsrIyPvjgA6ZNm8a5555badu4ceP49NNPuf322+nduzcLFy7khhtuqPY8np6e2O32Ss+Fh4dz4MABDMNwLli2bt26SvssX76cN954g7FjxwKwb98+MjIy6vw6/Pz86NixY52Pq9C7d2/279/Pjh07qu267d+/P1u2bDmpa4iIiIiIiIiIiDQGjUpoAebMmUNWVhY33XQTPXv2rHQbP368c1zCo48+yqeffsqjjz7K1q1b2bhxI88995zzPO3atWPp0qUkJyc7g9dhw4aRnp7O//73P3bv3s3rr7/OTz/9VOn6nTp14sMPP2Tr1q2sWLGCiRMnnlB378kaOnQo55xzDuPHj2f+/PkkJCTw008/8fPPPwPwz3/+k99//53Jkyezbt06du7cyffff6/FyURERERERERcxDAMXpy/g1cW7nR1KSJNjoLbFmDGjBmMGjWKoKCgKtvGjx/PqlWr2LBhA8OGDePLL7/khx9+oG/fvowYMYKVK1c693388cfZu3cvHTp0IDw8HIBu3brxxhtv8Prrr9OnTx9WrlzJgw8+WOX6WVlZ9O/fn2uvvZZ77rmHiIiIhn3RNfj6668ZOHAgV199Nd27d+cf//iHs4u4d+/e/Prrr+zYsYMhQ4bQr18/pkyZUmm8hIiIiIiIiIg0nq2peby8cCf/N38Hmfklri5HpEmxGEcPMG3hcnNzCQoKIicnh8DAwErbiouLSUhIID4+Hm9vbxdVKC2dfs5ERGrHZrMxd+5cxo4di4eHh6vLEREREZEG8NzP23hzyW4Afph8Fr1jg11bkLjMqfL7/7GyyaOp41ZERERERERERBqdYRjMXp/ifJycVeTCakSaHgW3IiIiIiIiIiLS6Nbuy2b/EWFtcraCW5EjKbgVEREREREREZFG98O6lEqP96vjVqQSBbciIiIiIiIiItKo7A6DHzemAjCsi7lAujpuRSpTcCsiIiIiIiIiIo0qIaOA9LwSfD3duGpgG0AzbkWOpuBWREREREREREQa1cHcYgCig7xpF+YHqONW5GgKbkVEREREREREpFEdzCsBICLAm9bBPgDkFNnILylzZVkiTYqCWxERERERERERaVQH88yO24hALwK8PQj0dgc0LkHkSApuRURERERERESkUaU7O269AGjdyheAFI1LEHFScCt1dv311zNu3Djn42HDhnHvvfc2eh1LlizBYrGQnZ1dr+fdu3cvFouFdevW1et5RURERERERMRUMSohvCK4LR+XsF/BrYiTgtsW4vrrr8disWCxWPD09KRjx448/vjjlJU1/GyYb775hieeeKJW+zZU2FqTdu3aOd8XPz8/+vfvz5dffnnMY9q0aUNqaio9e/ZslBpFRERERERETjUHcw/PuAWIbWUGtxqVIHKYgtsW5Pzzzyc1NZWdO3fywAMP8Nhjj/H8889Xu29paWm9XTckJISAgIB6O199e/zxx0lNTWXt2rUMHDiQK6+8kt9//73afUtLS3FzcyMqKgp3d/dGrlRERERERETk1OCccXtUx22yOm5FnBTctiBeXl5ERUXRtm1b7rjjDkaNGsUPP/wAHB5v8NRTTxETE0OXLl0A2LdvH1dccQXBwcGEhIRw8cUXs3fvXuc57XY7999/P8HBwYSGhvKPf/wDwzAqXffoUQklJSX8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Q0V8evNATmvb6oTOYRgGg59dQlahjc9vGUT/uODjHvPduhQe+noTp7UN5oMbTqvXEQYt0any+39ubi5hYWHk5OQcN5tsVh231Rk0aBC//fZbjdu9vLzw8qraBu/h4dGifwhERERaCv2dLSIiItI4CkrKWLj9IAAX94ttMb+DtfL1JOlQEQWlxgm/ptWJh8gqtOHn6Ua/tqF41GL26yX92xAb4k+/uGC8PepvMbKWrqX//l+X19bsg9t169YRHR3t6jJERERERERERJq1XzYfoNjmoG2oL71aN+9FyY4U5OsJQHbRic9Onb0+FYBze0TVesEudzcrZ3QIPeFrirg0uM3Pz2fXrl3OxwkJCaxbt46QkBDi4uJ4+OGHSU5O5oMPPgDgpZdeIj4+nh49elBcXMz06dNZtGgR8+bNc9VLEBERERERERFp9hwOg7d/3QPAZf1jsVgsLq6o/gT5mB2O2YWlJ3S83WEwZ4MZ3F7UR82D0nhcGtyuWrWK4cOHOx/ff//9AEyaNIn333+f1NRUkpKSnNtLS0t54IEHSE5OxtfXl969e7NgwYJK5xARERERERERkbqZvzWN7Wl5BHi5c92Z7VxdTr0KLg9uc0+w4/bPPZlk5JcQ7OvB2R3D67M0kWNyaXA7bNgwjrU22vvvv1/p8T/+8Q/+8Y9/NHBVIiIiIiIiIiKnDsMweH2x+Yno685s6+xQbSmCfcs7bk8wuJ29PgWAMT1rPyZBpD7op01ERERERERE5BS2ePtBNuzPwcfDjRvPind1OfXu8KiEuge3pWUOftp0AICLesfUa10ix6PgVkRERERERETkFDLjtwQufHUZy3dlkJJdxD++2gDAxMFxhPp7ubi6+lcR3OacQMfttgO55BTZCPb1YHB7LTQmjculoxJERERERERERKTxzN2YyhNztgBw3XsriQn2JiO/lG7Rgdx/bmcXV9cwgn09gRMblbAzLR+ArlEBuFlbzoJt0jyo41ZERERERERE5BSwNTWXB75YD0D7cD/sDoN9h4po5evBO9cOwNezZfb3OTtuC0vrfOyudDO47RjhX681idSGglsRERERERERkRYuu7CUWz9cRZHNztkdw5h37zk8ckE3erYO5K1rBtAmxNfVJTaYk1mcrKLjtmO4gltpfC3zn1JERERERERERASAMruDuz9dy75DRbQJ8eHVq/vh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\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa11f514",
   "metadata": {
    "papermill": {
     "duration": 0.077545,
     "end_time": "2025-08-10T10:23:09.233441",
     "exception": false,
     "start_time": "2025-08-10T10:23:09.155896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "669a1ebd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-10T10:23:09.388272Z",
     "iopub.status.busy": "2025-08-10T10:23:09.387740Z",
     "iopub.status.idle": "2025-08-10T10:23:09.419402Z",
     "shell.execute_reply": "2025-08-10T10:23:09.418748Z"
    },
    "papermill": {
     "duration": 0.110088,
     "end_time": "2025-08-10T10:23:09.420472",
     "exception": false,
     "start_time": "2025-08-10T10:23:09.310384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 13184152,
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 231.306887,
   "end_time": "2025-08-10T10:23:12.310690",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-10T10:19:21.003803",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
