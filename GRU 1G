{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "932967ae",
   "metadata": {
    "papermill": {
     "duration": 0.003815,
     "end_time": "2025-06-29T06:44:04.203403",
     "exception": false,
     "start_time": "2025-06-29T06:44:04.199588",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with GRU\n",
    "- Skenario 1G: Menggunakan harga emas historis + nilai tukar (USD/IDR) + Money Supply."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a8f46ef1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:04.211045Z",
     "iopub.status.busy": "2025-06-29T06:44:04.210439Z",
     "iopub.status.idle": "2025-06-29T06:44:06.325487Z",
     "shell.execute_reply": "2025-06-29T06:44:06.324387Z"
    },
    "papermill": {
     "duration": 2.120727,
     "end_time": "2025-06-29T06:44:06.327376",
     "exception": false,
     "start_time": "2025-06-29T06:44:04.206649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9badb78b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:06.336475Z",
     "iopub.status.busy": "2025-06-29T06:44:06.335799Z",
     "iopub.status.idle": "2025-06-29T06:44:30.014776Z",
     "shell.execute_reply": "2025-06-29T06:44:30.014199Z"
    },
    "papermill": {
     "duration": 23.684473,
     "end_time": "2025-06-29T06:44:30.016161",
     "exception": false,
     "start_time": "2025-06-29T06:44:06.331688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-29 06:44:12.840052: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751179453.312120      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751179453.423433      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2b2942d",
   "metadata": {
    "papermill": {
     "duration": 0.003146,
     "end_time": "2025-06-29T06:44:30.022827",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.019681",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dfda87f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.030001Z",
     "iopub.status.busy": "2025-06-29T06:44:30.029540Z",
     "iopub.status.idle": "2025-06-29T06:44:30.066930Z",
     "shell.execute_reply": "2025-06-29T06:44:30.066171Z"
    },
    "papermill": {
     "duration": 0.042082,
     "end_time": "2025-06-29T06:44:30.067949",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.025867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
      "0  1/3/2017  606000  13485            116.9         4936881.99\n",
      "1  1/4/2017  606000  13478            116.9         4936881.99\n",
      "2  1/5/2017  607000  13370            116.9         4936881.99\n",
      "3  1/6/2017  606000  13347            116.9         4936881.99\n",
      "4  1/9/2017  602000  13385            116.9         4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('../input/Final Dataset Gold Prediction.csv')  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fb62790",
   "metadata": {
    "papermill": {
     "duration": 0.00292,
     "end_time": "2025-06-29T06:44:30.074258",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.071338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4bd37416",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.081675Z",
     "iopub.status.busy": "2025-06-29T06:44:30.081306Z",
     "iopub.status.idle": "2025-06-29T06:44:30.111301Z",
     "shell.execute_reply": "2025-06-29T06:44:30.110631Z"
    },
    "papermill": {
     "duration": 0.035075,
     "end_time": "2025-06-29T06:44:30.112428",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.077353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c53e90d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.119638Z",
     "iopub.status.busy": "2025-06-29T06:44:30.119409Z",
     "iopub.status.idle": "2025-06-29T06:44:30.132265Z",
     "shell.execute_reply": "2025-06-29T06:44:30.131581Z"
    },
    "papermill": {
     "duration": 0.017627,
     "end_time": "2025-06-29T06:44:30.133280",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.115653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8e0ea1af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.140432Z",
     "iopub.status.busy": "2025-06-29T06:44:30.140177Z",
     "iopub.status.idle": "2025-06-29T06:44:30.146449Z",
     "shell.execute_reply": "2025-06-29T06:44:30.145716Z"
    },
    "papermill": {
     "duration": 0.011058,
     "end_time": "2025-06-29T06:44:30.147546",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.136488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4289d54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.155374Z",
     "iopub.status.busy": "2025-06-29T06:44:30.154854Z",
     "iopub.status.idle": "2025-06-29T06:44:30.159920Z",
     "shell.execute_reply": "2025-06-29T06:44:30.159105Z"
    },
    "papermill": {
     "duration": 0.01006,
     "end_time": "2025-06-29T06:44:30.161231",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.151171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c92812fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.168569Z",
     "iopub.status.busy": "2025-06-29T06:44:30.168366Z",
     "iopub.status.idle": "2025-06-29T06:44:30.171740Z",
     "shell.execute_reply": "2025-06-29T06:44:30.171068Z"
    },
    "papermill": {
     "duration": 0.00825,
     "end_time": "2025-06-29T06:44:30.172727",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.164477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Kurs', 'Money Supply (M2)']\n",
    "\n",
    "# 'Kurs', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2de4a4dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.180045Z",
     "iopub.status.busy": "2025-06-29T06:44:30.179825Z",
     "iopub.status.idle": "2025-06-29T06:44:30.188043Z",
     "shell.execute_reply": "2025-06-29T06:44:30.187571Z"
    },
    "papermill": {
     "duration": 0.013101,
     "end_time": "2025-06-29T06:44:30.189096",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.175995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "538b03c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.196544Z",
     "iopub.status.busy": "2025-06-29T06:44:30.196349Z",
     "iopub.status.idle": "2025-06-29T06:44:30.203950Z",
     "shell.execute_reply": "2025-06-29T06:44:30.203482Z"
    },
    "papermill": {
     "duration": 0.01238,
     "end_time": "2025-06-29T06:44:30.204958",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.192578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c946c946",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.212593Z",
     "iopub.status.busy": "2025-06-29T06:44:30.212199Z",
     "iopub.status.idle": "2025-06-29T06:44:30.215747Z",
     "shell.execute_reply": "2025-06-29T06:44:30.215090Z"
    },
    "papermill": {
     "duration": 0.008472,
     "end_time": "2025-06-29T06:44:30.216724",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.208252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66bce551",
   "metadata": {
    "papermill": {
     "duration": 0.003194,
     "end_time": "2025-06-29T06:44:30.223944",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.220750",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2d5e5897",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:44:30.231558Z",
     "iopub.status.busy": "2025-06-29T06:44:30.231361Z",
     "iopub.status.idle": "2025-06-29T06:46:57.978393Z",
     "shell.execute_reply": "2025-06-29T06:46:57.977538Z"
    },
    "papermill": {
     "duration": 147.752464,
     "end_time": "2025-06-29T06:46:57.979644",
     "exception": false,
     "start_time": "2025-06-29T06:44:30.227180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751179473.000003      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1751179473.000814      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1751179478.293280      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=22989.2479\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=32206.2159\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 52ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=22399.1160\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=32123.4745\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=20321.6055\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=27128.6219\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=43378.0008\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=50155.0122\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=16660.5499\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=21043.9595\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=18252.3986\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 61ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=21492.3134\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=22588.6181\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=22050.0204\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=18719.9450\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=19390.3196\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "8      64      0.2         0.0010          32  16660.549888  0.010776   \n",
      "10     64      0.2         0.0005          32  18252.398556  0.011258   \n",
      "14     64      0.3         0.0005          32  18719.945049  0.010995   \n",
      "15     64      0.3         0.0005          64  19390.319562  0.013323   \n",
      "4      32      0.3         0.0010          32  20321.605519  0.013101   \n",
      "\n",
      "          R2  \n",
      "8   0.990430  \n",
      "10  0.988513  \n",
      "14  0.987917  \n",
      "15  0.987037  \n",
      "4   0.985761  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(GRU(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(GRU(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f16b500",
   "metadata": {
    "papermill": {
     "duration": 0.006594,
     "end_time": "2025-06-29T06:46:57.993347",
     "exception": false,
     "start_time": "2025-06-29T06:46:57.986753",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5b303866",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:46:58.007707Z",
     "iopub.status.busy": "2025-06-29T06:46:58.007472Z",
     "iopub.status.idle": "2025-06-29T06:47:12.906492Z",
     "shell.execute_reply": "2025-06-29T06:47:12.905807Z"
    },
    "papermill": {
     "duration": 14.907691,
     "end_time": "2025-06-29T06:47:12.907687",
     "exception": false,
     "start_time": "2025-06-29T06:46:57.999996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 21ms/step - loss: 0.0130 - val_loss: 0.0061\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0022 - val_loss: 0.0024\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0015 - val_loss: 9.5003e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0013 - val_loss: 9.2389e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0016 - val_loss: 0.0011\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0015 - val_loss: 3.9069e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0011 - val_loss: 0.0011\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0011 - val_loss: 7.0813e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0010 - val_loss: 0.0021\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.2468e-04 - val_loss: 8.8807e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.4689e-04 - val_loss: 7.6022e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 9.0825e-04 - val_loss: 4.0099e-04\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.1925e-04 - val_loss: 8.9857e-04\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 7.5561e-04 - val_loss: 4.5279e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 6.0952e-04 - val_loss: 2.7732e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.3871e-04 - val_loss: 5.2986e-04\n",
      "Epoch 17/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 6.9684e-04 - val_loss: 0.0018\n",
      "Epoch 18/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 6.0957e-04 - val_loss: 0.0012\n",
      "Epoch 19/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 6.5501e-04 - val_loss: 9.1839e-04\n",
      "Epoch 20/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 6.2248e-04 - val_loss: 0.0017\n",
      "Epoch 21/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 5.1785e-04 - val_loss: 6.2460e-04\n",
      "Epoch 22/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 5.8102e-04 - val_loss: 5.2533e-04\n",
      "Epoch 23/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 5.5648e-04 - val_loss: 3.9370e-04\n",
      "Epoch 24/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 6.0333e-04 - val_loss: 0.0026\n",
      "Epoch 25/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 4.7575e-04 - val_loss: 9.2097e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(GRU(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(GRU(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d69c6a3",
   "metadata": {
    "papermill": {
     "duration": 0.014582,
     "end_time": "2025-06-29T06:47:12.938222",
     "exception": false,
     "start_time": "2025-06-29T06:47:12.923640",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b5a0014a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:47:12.968456Z",
     "iopub.status.busy": "2025-06-29T06:47:12.967965Z",
     "iopub.status.idle": "2025-06-29T06:47:13.461402Z",
     "shell.execute_reply": "2025-06-29T06:47:13.460476Z"
    },
    "papermill": {
     "duration": 0.510102,
     "end_time": "2025-06-29T06:47:13.462731",
     "exception": false,
     "start_time": "2025-06-29T06:47:12.952629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Final Test RMSE: 16153.4688\n",
      "Final Test MAPE: 0.0102\n",
      "Final Test MSLE: 0.000164\n",
      "Final Test R² Score: 0.9910\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fe98a224",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:47:13.495007Z",
     "iopub.status.busy": "2025-06-29T06:47:13.494808Z",
     "iopub.status.idle": "2025-06-29T06:47:13.855212Z",
     "shell.execute_reply": "2025-06-29T06:47:13.854542Z"
    },
    "papermill": {
     "duration": 0.378369,
     "end_time": "2025-06-29T06:47:13.857339",
     "exception": false,
     "start_time": "2025-06-29T06:47:13.478970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5220fec3",
   "metadata": {
    "papermill": {
     "duration": 0.016872,
     "end_time": "2025-06-29T06:47:13.891233",
     "exception": false,
     "start_time": "2025-06-29T06:47:13.874361",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "af1da499",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T06:47:13.923725Z",
     "iopub.status.busy": "2025-06-29T06:47:13.923181Z",
     "iopub.status.idle": "2025-06-29T06:47:13.961524Z",
     "shell.execute_reply": "2025-06-29T06:47:13.960796Z"
    },
    "papermill": {
     "duration": 0.055629,
     "end_time": "2025-06-29T06:47:13.962629",
     "exception": false,
     "start_time": "2025-06-29T06:47:13.907000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 199.318861,
   "end_time": "2025-06-29T06:47:17.142954",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-29T06:43:57.824093",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
