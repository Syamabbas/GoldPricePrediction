{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f77dedc2",
   "metadata": {
    "papermill": {
     "duration": 0.00382,
     "end_time": "2025-07-22T09:56:34.424790",
     "exception": false,
     "start_time": "2025-07-22T09:56:34.420970",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with GRU\n",
    "- Skenario 1G: Using historical gold prices, Foreign Exchange Reserves and Money Supply."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b5b629cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:34.431938Z",
     "iopub.status.busy": "2025-07-22T09:56:34.431737Z",
     "iopub.status.idle": "2025-07-22T09:56:36.264969Z",
     "shell.execute_reply": "2025-07-22T09:56:36.264175Z"
    },
    "papermill": {
     "duration": 1.838235,
     "end_time": "2025-07-22T09:56:36.266304",
     "exception": false,
     "start_time": "2025-07-22T09:56:34.428069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4bd39484",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:36.273849Z",
     "iopub.status.busy": "2025-07-22T09:56:36.273534Z",
     "iopub.status.idle": "2025-07-22T09:56:56.817721Z",
     "shell.execute_reply": "2025-07-22T09:56:56.817000Z"
    },
    "papermill": {
     "duration": 20.549432,
     "end_time": "2025-07-22T09:56:56.819187",
     "exception": false,
     "start_time": "2025-07-22T09:56:36.269755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-22 09:56:41.199061: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753178201.569424      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753178201.676702      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24e46a4e",
   "metadata": {
    "papermill": {
     "duration": 0.003163,
     "end_time": "2025-07-22T09:56:56.825928",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.822765",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94fe41f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.833288Z",
     "iopub.status.busy": "2025-07-22T09:56:56.832826Z",
     "iopub.status.idle": "2025-07-22T09:56:56.865167Z",
     "shell.execute_reply": "2025-07-22T09:56:56.864295Z"
    },
    "papermill": {
     "duration": 0.037216,
     "end_time": "2025-07-22T09:56:56.866316",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.829100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "\n",
    "df = pd.read_csv('../input/Dataset Harga Emas dan Indikator Moneter.csv')  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71205a6c",
   "metadata": {
    "papermill": {
     "duration": 0.00321,
     "end_time": "2025-07-22T09:56:56.872872",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.869662",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4ed1ee26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.880550Z",
     "iopub.status.busy": "2025-07-22T09:56:56.880271Z",
     "iopub.status.idle": "2025-07-22T09:56:56.911750Z",
     "shell.execute_reply": "2025-07-22T09:56:56.910940Z"
    },
    "papermill": {
     "duration": 0.036524,
     "end_time": "2025-07-22T09:56:56.912841",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.876317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a60f4f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.920239Z",
     "iopub.status.busy": "2025-07-22T09:56:56.919948Z",
     "iopub.status.idle": "2025-07-22T09:56:56.938657Z",
     "shell.execute_reply": "2025-07-22T09:56:56.938098Z"
    },
    "papermill": {
     "duration": 0.02376,
     "end_time": "2025-07-22T09:56:56.939862",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.916102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "52760d67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.947508Z",
     "iopub.status.busy": "2025-07-22T09:56:56.947042Z",
     "iopub.status.idle": "2025-07-22T09:56:56.954615Z",
     "shell.execute_reply": "2025-07-22T09:56:56.954004Z"
    },
    "papermill": {
     "duration": 0.012518,
     "end_time": "2025-07-22T09:56:56.955734",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.943216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b9025e60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.963483Z",
     "iopub.status.busy": "2025-07-22T09:56:56.962908Z",
     "iopub.status.idle": "2025-07-22T09:56:56.968682Z",
     "shell.execute_reply": "2025-07-22T09:56:56.968144Z"
    },
    "papermill": {
     "duration": 0.010767,
     "end_time": "2025-07-22T09:56:56.969812",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.959045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9284d998",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.977341Z",
     "iopub.status.busy": "2025-07-22T09:56:56.977124Z",
     "iopub.status.idle": "2025-07-22T09:56:56.980415Z",
     "shell.execute_reply": "2025-07-22T09:56:56.979752Z"
    },
    "papermill": {
     "duration": 0.00827,
     "end_time": "2025-07-22T09:56:56.981512",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.973242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "\n",
    "features = ['Price', 'Foreign Exchange Reserves', 'Money Supply']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2bf6992d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:56.988941Z",
     "iopub.status.busy": "2025-07-22T09:56:56.988751Z",
     "iopub.status.idle": "2025-07-22T09:56:56.997749Z",
     "shell.execute_reply": "2025-07-22T09:56:56.997115Z"
    },
    "papermill": {
     "duration": 0.014016,
     "end_time": "2025-07-22T09:56:56.998884",
     "exception": false,
     "start_time": "2025-07-22T09:56:56.984868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f9a35602",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:57.006921Z",
     "iopub.status.busy": "2025-07-22T09:56:57.006713Z",
     "iopub.status.idle": "2025-07-22T09:56:57.014922Z",
     "shell.execute_reply": "2025-07-22T09:56:57.014309Z"
    },
    "papermill": {
     "duration": 0.01355,
     "end_time": "2025-07-22T09:56:57.016161",
     "exception": false,
     "start_time": "2025-07-22T09:56:57.002611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0e2c5326",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:57.024337Z",
     "iopub.status.busy": "2025-07-22T09:56:57.024074Z",
     "iopub.status.idle": "2025-07-22T09:56:57.028328Z",
     "shell.execute_reply": "2025-07-22T09:56:57.027678Z"
    },
    "papermill": {
     "duration": 0.009587,
     "end_time": "2025-07-22T09:56:57.029404",
     "exception": false,
     "start_time": "2025-07-22T09:56:57.019817",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22eac93b",
   "metadata": {
    "papermill": {
     "duration": 0.003163,
     "end_time": "2025-07-22T09:56:57.036410",
     "exception": false,
     "start_time": "2025-07-22T09:56:57.033247",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "114cb214",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:56:57.044214Z",
     "iopub.status.busy": "2025-07-22T09:56:57.043944Z",
     "iopub.status.idle": "2025-07-22T09:59:16.385182Z",
     "shell.execute_reply": "2025-07-22T09:59:16.384381Z"
    },
    "papermill": {
     "duration": 139.346659,
     "end_time": "2025-07-22T09:59:16.386295",
     "exception": false,
     "start_time": "2025-07-22T09:56:57.039636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753178219.003513      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753178219.004217      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753178224.113709      63 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=17766.4213\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=21382.6276\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=28964.6210\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=37857.5942\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=28270.9837\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=17550.1131\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=34585.3545\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=40088.9849\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=19850.1437\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=19006.3420\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=19799.1175\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=17072.5147\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=15521.0498\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=23402.0667\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=16525.4058\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=19058.0106\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "12     64      0.3         0.0010          32  15521.049842  0.008889   \n",
      "14     64      0.3         0.0005          32  16525.405794  0.010561   \n",
      "11     64      0.2         0.0005          64  17072.514741  0.010245   \n",
      "5      32      0.3         0.0010          64  17550.113141  0.011141   \n",
      "0      32      0.2         0.0010          32  17766.421326  0.010199   \n",
      "\n",
      "          R2  \n",
      "12  0.991694  \n",
      "14  0.990584  \n",
      "11  0.989950  \n",
      "5   0.989380  \n",
      "0   0.989117  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(GRU(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(GRU(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2157e7a1",
   "metadata": {
    "papermill": {
     "duration": 0.005694,
     "end_time": "2025-07-22T09:59:16.398094",
     "exception": false,
     "start_time": "2025-07-22T09:59:16.392400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6f046ecf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:59:16.410392Z",
     "iopub.status.busy": "2025-07-22T09:59:16.410191Z",
     "iopub.status.idle": "2025-07-22T09:59:24.681500Z",
     "shell.execute_reply": "2025-07-22T09:59:24.680922Z"
    },
    "papermill": {
     "duration": 8.278747,
     "end_time": "2025-07-22T09:59:24.682636",
     "exception": false,
     "start_time": "2025-07-22T09:59:16.403889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 0.0265 - val_loss: 0.0089\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0021 - val_loss: 2.8108e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0016 - val_loss: 5.6296e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0014 - val_loss: 0.0012\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0013 - val_loss: 3.6396e-04\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0013 - val_loss: 3.0364e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0011 - val_loss: 5.4500e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.6314e-04 - val_loss: 4.4144e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0010 - val_loss: 0.0030\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.2558e-04 - val_loss: 5.9103e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.1019e-04 - val_loss: 3.8786e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.4164e-04 - val_loss: 4.3747e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(GRU(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(GRU(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b581b1a",
   "metadata": {
    "papermill": {
     "duration": 0.011012,
     "end_time": "2025-07-22T09:59:24.704848",
     "exception": false,
     "start_time": "2025-07-22T09:59:24.693836",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "22aafc3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:59:24.725891Z",
     "iopub.status.busy": "2025-07-22T09:59:24.725671Z",
     "iopub.status.idle": "2025-07-22T09:59:25.641553Z",
     "shell.execute_reply": "2025-07-22T09:59:25.640844Z"
    },
    "papermill": {
     "duration": 0.927716,
     "end_time": "2025-07-22T09:59:25.642664",
     "exception": false,
     "start_time": "2025-07-22T09:59:24.714948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step\n",
      "Final Test RMSE: 16262.5190\n",
      "Final Test MAPE: 0.0093\n",
      "Final Test MSLE: 0.000162\n",
      "Final Test R² Score: 0.9909\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "526a93b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:59:25.664455Z",
     "iopub.status.busy": "2025-07-22T09:59:25.664036Z",
     "iopub.status.idle": "2025-07-22T09:59:25.982911Z",
     "shell.execute_reply": "2025-07-22T09:59:25.982204Z"
    },
    "papermill": {
     "duration": 0.330743,
     "end_time": "2025-07-22T09:59:25.984050",
     "exception": false,
     "start_time": "2025-07-22T09:59:25.653307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABW4AAAJOCAYAAAAnP56mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3gU5frG8e/upnfSEyAhEHoJHRvSQcCCYscD9opdj3o8IliOepSfeuwKgr0rKqJ0pIj03ktoSUgjvW525/fHJgshHQgBcn+ua6/szrwz884mSLh99nlNhmEYiIiIiIiIiIiIiMgZw9zQExARERERERERERGR8hTcioiIiIiIiIiIiJxhFNyKiIiIiIiIiIiInGEU3IqIiIiIiIiIiIicYRTcioiIiIiIiIiIiJxhFNyKiIiIiIiIiIiInGEU3IqIiIiIiIiIiIicYRTcioiIiIiIiIiIiJxhFNyKiIiIiIiIiIiInGEU3IqIiIjUs+nTp2Mymdi3b1+NY1u0aMHNN99c73NatGgRJpOJRYsW1fu1ziQTJ07EZDKV23aq3/Obb76ZFi1anLLzNZT+/fvTv3//er1GZd+PM8nJ/Dmpy597ERERkcoouBURERE5Rnx8POPHj6dNmzZ4eXnh5eVFhw4duO+++9i4cWNDT8/JZDI5H2azmcjISIYOHXrGB7Fn67yPl5iYyMSJE1m/fn1DT+WEHfu9OPYRHh7e0FOr4Oabb8ZkMuHn50dBQUGF/bt27XLO/7XXXmuAGYqIiIicei4NPQERERGRM8XMmTO57rrrcHFxYcyYMcTFxWE2m9m+fTs//vgj7733HvHx8URHRzf0VAEYMmQIY8eOxTAM4uPjeffddxk4cCC//fYbw4cPr/bYiy++mIKCAtzc3E7TbI86mXnXhx07dmA2162eITExkUmTJtGiRQu6du1abt9HH32E3W4/hTOsP2Xfi2N5enoCMGfOnIaYUpVcXFzIz8/n119/5dprry2374svvsDDw4PCwsIGmp2IiIjIqafgVkRERATYs2cP119/PdHR0cyfP5+IiIhy+1955RXefffdOgd89alNmzbcdNNNztdXXnklXbp04Y033qgyAC0sLMTNzQ2z2YyHh8fpmmo5JzvvU83d3f2Uns/V1fWUnq8+Hf+9OFZDhPrVcXd358ILL+Srr76qENx++eWXjBw5kh9++KGBZiciIiJy6p05//IQERERaUD//e9/ycvLY9q0aRVCW3BU+z3wwAM0b9683PYFCxbQt29fvL29CQgI4IorrmDbtm01Xs8wDF544QWaNWuGl5cXAwYMYMuWLSd1D507dyY4OJj4+HjgaH/Or7/+mn//+980bdoULy8vsrOzq+zduWLFCkaMGEGTJk3w9vamS5cuvPnmm+XGbN++nauvvprAwEA8PDzo2bMnv/zyy2mZd9kcL7nkEvz9/fHy8qJfv34sW7aswnmXLl1Kr1698PDwoFWrVnzwwQeVXr+yHreZmZk8/PDDtGjRAnd3d5o1a8bYsWNJS0tj0aJF9OrVC4BbbrnF+RH96dOnA5X3uM3Ly+PRRx+lefPmuLu707ZtW1577TUMwyg3zmQyMX78eGbMmEGnTp1wd3enY8eO/PHHH3V9W0/a8T1uy74v3377LS+++CLNmjXDw8ODQYMGsXv37nLHLlmyhGuuuYaoqCjc3d1p3rw5Dz/8cKVtDurixhtv5PfffyczM9O5bdWqVezatYsbb7yx0mP27t3LNddcQ2BgIF5eXpx33nn89ttvFcYdOnSIUaNG4e3tTWhoKA8//DBFRUWVnrO2P4MiIiIiJ0MVtyIiIiI42iTExsbSp0+fWh8zb948hg8fTsuWLZk4cSIFBQW89dZbXHjhhaxdu7baBaomTJjACy+8wIgRIxgxYgRr165l6NChFBcXn/A9ZGRkkJGRQWxsbLntzz//PG5ubjz22GMUFRVVWUk5d+5cLr30UiIiInjwwQcJDw9n27ZtzJw5kwcffBCALVu2cOGFF9K0aVOefPJJvL29+fbbbxk1ahQ//PADV155Zb3Oe8GCBQwfPpwePXrw7LPPYjabmTZtGgMHDmTJkiX07t0bgE2bNjF06FBCQkKYOHEiJSUlPPvss4SFhdU4n9zcXPr27cu2bdu49dZb6d69O2lpafzyyy8cOnSI9u3b89xzzzFhwgTuvPNO+vbtC8AFF1xQ6fkMw+Dyyy9n4cKF3HbbbXTt2pXZs2fz+OOPk5CQwOuvv15u/NKlS/nxxx+599578fX15X//+x+jR4/mwIEDBAUF1fn9rU5hYSFpaWnltvn6+lZbhfzyyy9jNpt57LHHyMrK4r///S9jxoxhxYoVzjHfffcd+fn53HPPPQQFBbFy5UreeustDh06xHfffXfC873qqqu4++67+fHHH7n11lsBR7Vtu3bt6N69e4XxycnJXHDBBeTn5/PAAw8QFBTEJ598wuWXX87333/v/HktKChg0KBBHDhwgAceeIDIyEg+++wzFixYUOGctf0ZFBERETlphoiIiEgjl5WVZQDGqFGjKuzLyMgwUlNTnY/8/Hznvq5duxqhoaFGenq6c9uGDRsMs9lsjB071rlt2rRpBmDEx8cbhmEYKSkphpubmzFy5EjDbrc7x/3rX/8yAGPcuHE1zhkwbrvtNiM1NdVISUkxVqxYYQwaNMgAjMmTJxuGYRgLFy40AKNly5bl5n3svoULFxqGYRglJSVGTEyMER0dbWRkZJQbe+wcBw0aZHTu3NkoLCwst/+CCy4wWrduXa/zttvtRuvWrY1hw4aVm1N+fr4RExNjDBkyxLlt1KhRhoeHh7F//37ntq1btxoWi8U4/lfg6Ojocu/5hAkTDMD48ccfK8y/7LqrVq0yAGPatGkVxowbN86Ijo52vp4xY4YBGC+88EK5cVdffbVhMpmM3bt3l3t/3Nzcym3bsGGDARhvvfVWhWudDKDSR9k99evXz+jXr59zfNn3pX379kZRUZFz+5tvvmkAxqZNm5zbjv95MwzDeOmllwyTyVTue/Lss89W+H5UZty4cYa3t7dhGI73bdCgQYZhGIbNZjPCw8ONSZMmGfHx8QZgvPrqq87jHnroIQMwlixZ4tyWk5NjxMTEGC1atDBsNpthGIbxxhtvGIDx7bffOsfl5eUZsbGx5f6c1OVn8Pg/9yIiIiJ1pVYJIiIi0uiVfQTfx8enwr7+/fsTEhLifLzzzjsAJCUlsX79em6++WYCAwOd47t06cKQIUOYNWtWldebN28excXF3H///ZhMJuf2hx56qE7znjp1KiEhIYSGhtKnTx+WLVvGI488UuE848aNcy44VZV169YRHx/PQw89REBAQLl9ZXM8cuQICxYs4NprryUnJ4e0tDTS0tJIT09n2LBh7Nq1i4SEhHqb9/r1650fiU9PT3dePy8vj0GDBrF48WLsdjs2m43Zs2czatQooqKinMe3b9+eYcOG1Ti/H374gbi4uEqrh4/9ftXWrFmzsFgsPPDAA+W2P/rooxiGwe+//15u++DBg2nVqpXzdZcuXfDz82Pv3r11vnZNrrjiCubOnVvuUdN7dMstt5Sr2i6rOD52fsd+3/Ly8khLS+OCCy7AMAzWrVt3UnO+8cYbWbRoEYcPH2bBggUcPny4yjYJs2bNonfv3lx00UXObT4+Ptx5553s27ePrVu3OsdFRERw9dVXO8d5eXlx5513ljtfbX8GRURERE6FRt0qYfHixbz66qusWbOGpKQkfvrpJ0aNGlWncxiGweTJk/nwww/Zv38/wcHB3HvvvTz99NP1M2kRERE55Xx9fQHHR+SP98EHH5CTk0NycnK5RZz2798PQNu2bSsc0759e2bPnk1eXh7e3t4V9pcd27p163LbQ0JCaNKkSa3nfcUVVzB+/HhMJhO+vr507Nix0uvFxMTUeK49e/YA0KlTpyrH7N69G8MweOaZZ3jmmWcqHZOSkkLTpk3rZd67du0CHIFuVbKysigqKqKgoKDC+wuO71d1oTo43ovRo0dXO6Yu9u/fT2RkpPPnrEz79u2d+491bNhcpkmTJmRkZFR7ncOHD5d77e/vX2Ng36xZMwYPHlztmOMdP7+yn9lj53fgwAEmTJjAL7/8UmHeWVlZdbre8UaMGIGvry/ffPMN69evp1evXsTGxrJv374KY/fv319p+5Nj3/tOnTqxf/9+YmNjKwTzx//5ru3PYF3+HIuIiIhUpVEHt3l5ecTFxXHrrbdy1VVXndA5HnzwQebMmcNrr71G586dOXLkCEeOHDnFMxUREZH65O/vT0REBJs3b66wryz0qSwUami1Dd1qCu9qq6yS8LHHHquyKvP4PrWVOdF5l13/1VdfpWvXrpUe4+PjU+WCUmcLi8VS6XbjuIXMjnf8onrTpk2rsOjaqVDT/Gw2G0OGDOHIkSM88cQTtGvXDm9vbxISErj55ptPuiLV3d2dq666ik8++YS9e/cyceLEkzpfXdT2Z1BERETkVGjUwe3w4cMZPnx4lfuLiop4+umn+eqrr8jMzKRTp0688sorztV1t23bxnvvvcfmzZud/ze+NhUtIiIicuYZOXIkU6ZMYeXKlbVaXCg6OhqAHTt2VNi3fft2goODK60iPfbYXbt20bJlS+f21NTUGqsq60vZR/M3b95cZahaNldXV9c6V2meCmVz9PPzq/b6ISEheHp6Oqsjj1XZ96uy61QW4h+rLi0ToqOjmTdvHjk5OeWqbrdv3+7cfyrMnTu33OuOHTuekvPW1aZNm9i5cyeffPIJY8eOdW4/fn4n48Ybb+Tjjz/GbDZz/fXXVzkuOjq6yj+jZfvLvm7evBnDMMp9b48/trY/gyIiIiKngnrcVmP8+PEsX76cr7/+mo0bN3LNNddwySWXOP8R8Ouvv9KyZUtmzpxJTEwMLVq04Pbbb1fFrYiIyFnon//8J15eXtx6660kJydX2H98tWNERARdu3blk08+ITMz07l98+bNzJkzhxEjRlR5rcGDB+Pq6spbb71V7rxvvPHGSd/HierevTsxMTG88cYb5e4Hjt57aGgo/fv354MPPiApKanCOVJTU+t1jj169KBVq1a89tprlba1KLu+xWJh2LBhzJgxgwMHDjj3b9u2jdmzZ9d4ndGjR7NhwwZ++umnCvvK3ouyUP7496oyI0aMwGaz8fbbb5fb/vrrr2MymaotJKiLwYMHl3scX4F7upRV5B77s20YBm+++eYpu8aAAQN4/vnnefvttwkPD69y3IgRI1i5ciXLly93bsvLy+PDDz+kRYsWdOjQwTkuMTGR77//3jkuPz+fDz/8sNz5avszKCIiInIqNOqK2+ocOHCAadOmceDAASIjIwHHxwL/+OMPpk2bxn/+8x/27t3L/v37+e677/j000+x2Ww8/PDDXH311SxYsKCB70BERETqonXr1nz55ZfccMMNtG3bljFjxhAXF4dhGMTHx/Pll19iNptp1qyZ85hXX32V4cOHc/7553PbbbdRUFDAW2+9hb+/f7Uf3w4JCeGxxx7jpZde4tJLL2XEiBGsW7eO33//neDg4NNwtxWZzWbee+89LrvsMrp27cott9xCREQE27dvZ8uWLc7A85133uGiiy6ic+fO3HHHHbRs2ZLk5GSWL1/OoUOH2LBhQ73OccqUKQwfPpyOHTtyyy230LRpUxISEli4cCF+fn78+uuvAEyaNIk//viDvn37cu+991JSUsJbb71Fx44d2bhxY7XXefzxx/n++++55ppruPXWW+nRowdHjhzhl19+4f333ycuLo5WrVoREBDA+++/j6+vL97e3vTp06fST19ddtllDBgwgKeffpp9+/YRFxfHnDlz+Pnnn3nooYfKLUR2LmjXrh2tWrXiscceIyEhAT8/P3744YdTWk1uNpv597//XeO4J598kq+++orhw4fzwAMPEBgYyCeffEJ8fDw//PADZrOjjuWOO+7g7bffZuzYsaxZs4aIiAg+++wzvLy8Kly3tj+DIiIiIidLwW0VNm3ahM1mo02bNuW2FxUVERQUBDh6XBUVFfHpp586x02dOpUePXqwY8eOShcrERERkTPXFVdcwaZNm5g8eTJz5szh448/xmQyER0dzciRI7n77ruJi4tzjh88eDB//PEHzz77LBMmTMDV1ZV+/frxyiuv1Ng+6YUXXsDDw4P333+fhQsX0qdPH+bMmcPIkSPr+zarNGzYMBYuXMikSZOYPHkydrudVq1acccddzjHdOjQgdWrVzNp0iSmT59Oeno6oaGhdOvWjQkTJtT7HPv378/y5cud1Za5ubmEh4fTp08f7rrrLue4Ll26MHv2bB555BEmTJhAs2bNmDRpEklJSTUGtz4+PixZsoRnn32Wn376iU8++YTQ0FAGDRrkDO5dXV355JNPeOqpp7j77rspKSlh2rRplX7fzWYzv/zyCxMmTOCbb75h2rRptGjRgldffZVHH3301L5BZwBXV1d+/fVXHnjgAV566SU8PDy48sorGT9+fLk/P6dDWFgYf/31F0888QRvvfUWhYWFdOnShV9//bXcnzUvLy/mz5/P/fffz1tvvYWXlxdjxoxh+PDhXHLJJeXOWdufQREREZGTZTJqWuWgkTCZTPz000+MGjUKgG+++YYxY8awZcuWCgsw+Pj4EB4ezrPPPst//vMfrFarc19BQQFeXl7MmTOHIUOGnM5bEBERERERERERkXOEKm6r0K1bN2w2GykpKfTt27fSMRdeeCElJSXs2bPH+RG3nTt3AqdukQkRERERERERERFpfBp1xW1ubi67d+8GHEHt//3f/zFgwAACAwOJioripptuYtmyZUyePJlu3bqRmprK/Pnz6dKlCyNHjsRut9OrVy98fHx44403sNvt3Hffffj5+TFnzpwGvjsRERERERERERE5WzXq4HbRokUMGDCgwvZx48Yxffp0rFYrL7zwAp9++ikJCQkEBwdz3nnnMWnSJDp37gxAYmIi999/P3PmzMHb25vhw4czefJkAgMDT/ftiIiIiIiIiIiIyDmiUQe3IiIiIiIiIiIiImcic0NPQERERERERERERETKU3ArIiIiIiIiIiIicoZxaegJnG52u53ExER8fX0xmUwNPR0RERERERERERFpJAzDICcnh8jISMzm6mtqG11wm5iYSPPmzRt6GiIiIiIiIiIiItJIHTx4kGbNmlU7ptEFt76+voDjzfHz82vg2YiIiEhVrFYrc+bMYejQobi6ujb0dEREREREpB41lt//s7Ozad68uTOjrE6jC27L2iP4+fkpuBURETmDWa1WvLy88PPzO6d/cRMRERERkcb3+39tWrhqcTIRERERERERERGRM4yCWxEREREREREREZEzjIJbERERERERERERkTNMo+txW1s2mw2r1drQ05BzjKurKxaLpaGnISIiIiIiIiIiZzgFt8cxDIPDhw+TmZnZ0FORc1RAQADh4eG1akItIiIiIiIiIiKNk4Lb45SFtqGhoXh5eSlck1PGMAzy8/NJSUkBICIiooFnJCIiIiIiIiIiZyoFt8ew2WzO0DYoKKihpyPnIE9PTwBSUlIIDQ1V2wQREREREREREamUFic7RllPWy8vrwaeiZzLyn6+1ENZRERERERERESqouC2EmqPIPVJP18iIiIiIiIiIlITBbciIiIiIiIiIiIiZxgFt3JamEwmZsyYccrP26JFC954441Tfl4REREREREREZGGpOD2HLN8+XIsFgsjR46s87ENGYLefPPNmEwmTCYTbm5uxMbG8txzz1FSUlLtcatWreLOO+88TbMUERERERERERE5PRTcnmOmTp3K/fffz+LFi0lMTGzo6dTJJZdcQlJSErt27eLRRx9l4sSJvPrqq5WOLS4uBiAkJESLyYmIiIiIiIiIyDlHwe05JDc3l2+++YZ77rmHkSNHMn369Apjfv31V3r16oWHhwfBwcFceeWVAPTv35/9+/fz8MMPOytfASZOnEjXrl3LneONN96gRYsWzterVq1iyJAhBAcH4+/vT79+/Vi7dm2d5+/u7k54eDjR0dHcc889DB48mF9++QVwVOSOGjWKF198kcjISNq2bQtUrBLOzMzkrrvuIiwsDA8PDzp16sTMmTOd+5cuXUrfvn3x9PSkefPmPPDAA+Tl5dV5riIiIiIiIiIiIvVJwW0NDMMgv7ikQR6GYdRprt9++y3t2rWjbdu23HTTTXz88cflzvHbb79x5ZVXMmLECNatW8f8+fPp3bs3AD/++CPNmjXjueeeIykpiaSkpFpfNycnh3HjxrF06VL+/vtvWrduzYgRI8jJyanT/I/n6enprKwFmD9/Pjt27GDu3Lnlwtgydrud4cOHs2zZMj7//HO2bt3Kyy+/jMViAWDPnj1ccskljB49mo0bN/LNN9+wdOlSxo8ff1LzFBEREREREREROdVcGnoCZ7oCq40OE2Y3yLW3PjcML7faf4umTp3KTTfdBDjaDmRlZfHnn3/Sv39/AF588UWuv/56Jk2a5DwmLi4OgMDAQCwWC76+voSHh9dpngMHDiz3+sMPPyQgIIA///yTSy+9tE7nAkdYPn/+fGbPns3999/v3O7t7c2UKVNwc3Or9Lh58+axcuVKtm3bRps2bQBo2bKlc/9LL73EmDFjeOihhwBo3bo1//vf/+jXrx/vvfceHh4edZ6riIiIiIiIiIhIfVDF7Tlix44drFy5khtuuAEAFxcXrrvuOqZOneocs379egYNGnTKr52cnMwdd9xB69at8ff3x8/Pj9zcXA4cOFCn88ycORMfHx88PDwYPnw41113HRMnTnTu79y5c5WhLTjur1mzZs7Q9ngbNmxg+vTp+Pj4OB/Dhg3DbrcTHx9fp7mKiIiIiIiIiIjUJ1Xc1sDT1cLW54Y12LVra+rUqZSUlBAZGencZhgG7u7uvP322/j7++Pp6VnnOZjN5gotG6xWa7nX48aNIz09nTfffJPo6Gjc3d05//zzy7U5qI0BAwbw3nvv4ebmRmRkJC4u5X88vb29qz2+pvvLzc3lrrvu4oEHHqiwLyoqqk5zFRERERERERERqU8KbmtgMpnq1K6gIZSUlPDpp58yefJkhg4dWm7fqFGj+Oqrr7j77rvp0qUL8+fP55Zbbqn0PG5ubthstnLbQkJCOHz4MIZhOBcsW79+fbkxy5Yt491332XEiBEAHDx4kLS0tDrfh7e3N7GxsXU+rkyXLl04dOgQO3furLTqtnv37mzduvWkriEiIiIiIiIiInI6qFXCOWDmzJlkZGRw22230alTp3KP0aNHO9slPPvss3z11Vc8++yzbNu2jU2bNvHKK684z9OiRQsWL15MQkKCM3jt378/qamp/Pe//2XPnj288847/P777+Wu37p1az777DO2bdvGihUrGDNmzAlV956sfv36cfHFFzN69Gjmzp1LfHw8v//+O3/88QcATzzxBH/99Rfjx49n/fr17Nq1i59//lmLk4mIiIiIiIg0EMMweH3uTv43f1dDT0XkjKPg9hwwdepUBg8ejL+/f4V9o0ePZvXq1WzcuJH+/fvz3Xff8csvv9C1a1cGDhzIypUrnWOfe+459u3bR6tWrQgJCQGgffv2vPvuu7zzzjvExcWxcuVKHnvssQrXz8jIoHv37vzjH//ggQceIDQ0tH5vugo//PADvXr14oYbbqBDhw7885//dFYRd+nShT///JOdO3fSt29funXrxoQJE8q1lxARERERERGR02dbUg5vzt/F/83dSXpuUUNPR+SMYjKOb2B6jsvOzsbf35+srCz8/PzK7SssLCQ+Pp6YmBg8PDwaaIZyrtPPmYhI7VitVmbNmsWIESNwdXVt6OmIiIiISD145Y/tvLdoDwC/jL+QLs0CGnZC0mAay+//1WWTx1PFrYiIiIiIiIiInHaGYfDrhkTn64SMggacjciZR8GtiIiIiIiIiIicdusOZnLomLA2IVPBrcixFNyKiIiIiIiIiMhp98v6xHKvD6niVqQcBbciIiIiIiIiInJa2ewGv21KAqB/W8cC6aq4FSlPwa2IiIiIiIiIiJxW8Wl5pOYU4eVm4fpezQH1uBU5noJbERERERERERE5rVKyCwGI8PegRbA3oIpbkeMpuBURERERERERkdMqJacIgFBfD5oGeAKQVWAlt6ikIaclckZRcCsiIiIiIiIiIqdVSo6j4jbUzx1fD1f8PFwAtUsQOZaCWxEREREREREROa1SnRW37gA0beIFQKLaJYg4KbiVOrv55psZNWqU83X//v156KGHTvs8Fi1ahMlkIjMz85Sed9++fZhMJtavX39KzysiIiIiIiIiDmWtEkLKgtvSdgmHFNyKOCm4PUfcfPPNmEwmTCYTbm5uxMbG8txzz1FSUv+9YX788Ueef/75Wo2tr7C1Ki1atHC+L97e3nTv3p3vvvuu2mOaN29OUlISnTp1Oi1zFBEREREREWlsUrKP9rgFaNbEEdyqVYLIUQpuzyGXXHIJSUlJ7Nq1i0cffZSJEyfy6quvVjq2uLj4lF03MDAQX1/fU3a+U+25554jKSmJdevW0atXL6677jr++uuvSscWFxdjsVgIDw/HxcXlNM9UREREREREpHFw9rg9ruI2QRW3Ik4Kbs8h7u7uhIeHEx0dzT333MPgwYP55ZdfgKPtDV588UUiIyNp27YtAAcPHuTaa68lICCAwMBArrjiCvbt2+c8p81m45FHHiEgIICgoCD++c9/YhhGuese3yqhqKiIJ554gubNm+Pu7k5sbCxTp05l3759DBgwAIAmTZpgMpm4+eabAbDb7bz00kvExMTg6elJXFwc33//fbnrzJo1izZt2uDp6cmAAQPKzbM6vr6+hIeH06ZNG9555x08PT359ddfAUdF7vPPP8/YsWPx8/PjzjvvrLRVwpYtW7j00kvx8/PD19eXvn37smfPHuf+KVOm0L59ezw8PGjXrh3vvvtureYmIiIiIiIi0hilHt8qwVlxm99gcxI506iksCaGAdYG+o+GqxeYTCd8uKenJ+np6c7X8+fPx8/Pj7lz5wJgtVoZNmwY559/PkuWLMHFxYUXXniBSy65hI0bN+Lm5sbkyZOZPn06H3/8Me3bt2fy5Mn89NNPDBw4sMrrjh07luXLl/O///2PuLg44uPjSUtLo3nz5vzwww+MHj2aHTt24Ofnh6en4z/ML730Ep9//jnvv/8+rVu3ZvHixdx0002EhITQr18/Dh48yFVXXcV9993HnXfeyerVq3n00Ufr/J64uLjg6uparuL4tddeY8KECTz77LOVHpOQkMDFF19M//79WbBgAX5+fixbtszZhuKLL75gwoQJvP3223Tr1o1169Zxxx134O3tzbhx4+o8RxEREREREZFzWaHVRnah49/UZa0SVHFbf7LyraTlFdEqxKehpyJ1pOC2JtZ8+E9kw1z7X4ng5l3nwwzDYP78+cyePZv777/fud3b25spU6bg5uYGwOeff47dbmfKlCmYSgPiadOmERAQwKJFixg6dChvvPEGTz31FFdddRUA77//PrNnz67y2jt37uTbb79l7ty5DB48GICWLVs69wcGBgIQGhpKQEAA4KjQ/c9//sO8efM4//zznccsXbqUDz74gH79+vHee+/RqlUrJk+eDEDbtm3ZtGkTr7zySq3fl+LiYiZPnkxWVla54HngwIHlQuDjK3nfeecd/P39+frrr3F1dQWgTZs2zv3PPvsskydPdr5HMTExbN26lQ8++EDBrYiIiIiIiMhxyqpt3VzM+Hk6oqmyituUnCKKS+y4uehD4qfKrZ+sYt2BDBY9NoCoIK+Gno7UgYLbc8jMmTPx8fHBarVit9u58cYbmThxonN/586dnaEtwIYNG9i9e3eF/rSFhYXs2bOHrKwskpKS6NOnj3Ofi4sLPXv2rNAuocz69euxWCz069ev1vPevXs3+fn5DBkypNz24uJiunXrBsC2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Xm4W/nF+DG5urvRqGVKncx/vqh5RdIsOIrewBBeLiTZhvljMpzegdHV15dIuEazZn8EV3Zo3+N/Zd1wcy68bD+PuaubG3tFc36s5bm4nFoyLSMM413//r8u9nTXBrZ+fH5s2bSq37d1332XBggV8//33xMTENNDMREREREREpKFMWRLPi7O2cefFLfnXiIrVptuSHJVN3aIC6NysFotUbfsFMg84es3G3VDn+bQL9wVgx+Gccts/XLwXgOt6Ncff69QFEjHB3qfsXCfqzeu7NfQUnML9PVj59OCGnoaIyCnRoMFtbm4uu3fvdr6Oj49n/fr1BAYGEhUVxVNPPUVCQgKffvopZrOZTp06lTs+NDQUDw+PCttFRERERETk3JeWW8Sb83cB8P2aQzw+rC2ulvJVt1sTHcFth4hatMozDPjrLcfzXneAW93XRWkT6ghuEzILyCm04uvhyrakbJbsSsNsglsvVNGRiIjUTsXPkZxGq1evplu3bnTr5vi/c4888gjdunVjwoQJACQlJXHggDqIi4iIiIiISEWvz91JblEJAEfyilm2O63CmK2lFbftaxPc7l8GiWvBxQN633FCc/L3ciXczwOAncm5AHy0xFFtO6JzRPm2DCIiItVo0OC2f//+GIZR4TF9+nQApk+fzqJFi6o8fuLEiaxfv/60zFVERERERETOHLuSc/h61UEA4poHAPDrhqRyY9Jzi0jOLgKgXU3Bra0EZj/teN71RvAOrn58NdqUtkvYmZxDUlYBv6xPBODOi1ue8DlFRKTxadDgVkREREREROREvPT7dmx2gyEdwvj3SEdv2zlbDlNotTnHbEty9JltEeSFj3sNnQKXvwVJ68HDH/o9cVJzaxvmAzj63E5fto8Su0GfmEC6NAs4qfOKiEjjouBWREREREREzirLdqexYHsKLmYTTw1vR4+oJkT4e5BTVMKiHanOcdtq2yYhbRcsfMnxfNhL4Bt+UvNrE+aouF17IIMvVzja/6naVkRE6krBrYiIiIiIiJw1bHaDF37bBsCYPlG0DPHBbDZxWVwkADM3JjrHlvW3rXZhMpsVfroLbEXQapCjTcJJalvaKmHjoSxyikpoFeLNgLahJ31eERFpXBTcioiIiIiIyFnjh7WH2JaUja+HCw8ObuPcPqxjGABLd6dhsxsAbE0sDW4jqwluFzwPCWscLRIu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HEzuG8zsIeFtd3K7DfKSjO3QuLY7r4iIiIg0q9XB7d69exk4cOAx7/fv3/+ohcZERERERKRjfLo5g3X7C3G3mvn7xXGYTKa2O/mhvWCvAVdv8I9pu/OKiIiISLNaHdz6+fmxf//+Y95PSUnBy8urTYoSEREREZGWKSiv4e/fGjNi75/Wl6gAz7a9QEObhO5xYG71Xx9ERERE5CS1+pPXRRddxH333ce+ffsa30tJSeH3v/89s2fPbtPiRERERESkeX/7JpGSqjoGhvly84SebX+BnO3Gs9okiIiIiHSoVge3//znP/Hy8qJ///707NmTnj17MmDAAAIDA3nuuefao0YREREREWnCsj15fLUtC7MJ/nFZPC6WdpgRm6uFyUREREQ6g0trD/Dz82PNmjUsWbKEhIQEPDw8GDx4MJMnT26P+kREREREBLDZHdTaHXi6Gh/hK2ttPDLfCFV/NaEngyP92+fCOTuM5+4KbkVEREQ6UquDWwCTycT06dOZPn16W9cjIiIiIiJNmPPWBnZllfLFnePpFezNCz/sJaOoigh/D+6f1rd9LlqWCxX5YDJDyID2uYaIiIiINKlFwe2LL77Ibbfdhru7Oy+++GKzY++99942KUxERERERAw5JdWsTjkEwF+/3sWfzu/PGyuNBYOfvDgOL7eTmo9xYrn1s20De4NrGy96JiIiIiLNatEnvH/9619cd911uLu7869//eu440wmk4JbEREREZE2tiqloHF75d4CkrI34nDChYPDmNI/pP0u3NgmQQuTiYiIiHS0FgW3qampTW6LiIiIiEj7W7U3H4BgHzfyy2ooKK/B192Fv8wa2L4XbghutTCZiIiISIdr1bKzdXV1xMbGkpSU1F71iIiIiIjIEZxOJ6vq2yT88/LBRAcYLQv+fMEAQnzc2/fi2duN57DB7XsdERERETlGq5phWa1Wqqur26sWERERERH5mT25ZRSU1+BhtTA+NpAPbxtLcm4ZZ/cNbt8L15TDoRRjO1TBrYiIiEhHa9WMW4C77rqLZ555BpvN1h71iIiIiIjIEVbtNfrbju4ZgJuLhQh/D6b0C8FkMrXvhXN3AU7wDgXvduyjKyIiIiJNavXysxs3bmTp0qUsXryY+Ph4vLy8jtr/xRdftFlxIiIiIiJnupX1we3E3kEde+EctUkQERER6UytDm79/f257LLL2qMWERERERE5gt3hZENqIQAT+3RScKs2CSIiIiKdotXB7VtvvdUedYiIiIiIyM/klFZTVWfHajHRt7tPx15cC5OJiIiIdKoW97h1OBw888wzTJgwgVGjRvHggw9SVVXVnrWJiIiIiJzR0g9VAhDZzROLuZ172h7JXgd5icZ2aHzHXVdEREREGrU4uP373//On//8Z7y9vYmIiGDu3Lncdddd7VmbiIiIiMgZ7WChEdxGBXh27IXz94C9Ftx8wT+mY68tIiIiIkArgtt3332XV155hUWLFjF//nwWLFjABx98gMPhaM/6RERERETOWGmFFQBEB3h07IVzdhjPofFgbvFfGURERESkDbX4U1h6ejoXXHBB4+upU6diMpnIyspql8JERERERM506YVGa7IeAV4de2EtTCYiIiLS6Voc3NpsNtzd3Y96z2q1UldX1+ZFiYiIiIgIpB8yZtx2eKuEhoXJ1N9WREREpNO4tHSg0+nkpptuws3NrfG96upq7rjjDry8Ds8A+OKLL9q2QhERERGRM1R6fY/bHoEdGNw6nYdbJYRpxq2IiIhIZ2lxcDtnzpxj3rv++uvbtBgRERERETGUVtdRVGl8u61DZ9wWHYCaErC4QnD/jruuiIiIiBylxcHtW2+91Z51iIiIiIjIEdIPGbNtA71c8XZr8cf2U9cw2zZkAFisHXddERERETmKlogVEREREemCDta3SYjuyDYJoIXJRERERLoIBbciIiIiIl1QWkNw22kLkym4FREREelMCm5FRERERLqg9M4Kbhtm3GphMhEREZFOpeBWRERERKQLauhx26HBbXk+lGUDJuge13HXFREREZFjKLgVEREREemCOmXGbcNs28BYcPPuuOuKiIiIyDEU3IqIiIiIdDFVtXYyi6uADl6crHFhsviOu6aIiIiINMmlswsQEREREZHDckurue3dTdgdTgK9XOnu496+F6ythP0/we5vYfc3xntamExERESk0ym4FRERERHpIkqr67jk5dVklVTj72nlpWuHYzab2v5ClYWQ/L0R1qYsBVvV4X1eIdD/wra/poiIiIi0ioJbEREREZEuYvGuXLJKqgn3c+fD28bSI9Cr7U5elAZ7FhphbdoacNoP7/OLhv4zjUf0OLDorwkiIiIinU2fyEREREREuogfEnMBuHxk1KmHtk4n5O463AKhoX9t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\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3c1c5c6",
   "metadata": {
    "papermill": {
     "duration": 0.010929,
     "end_time": "2025-07-22T09:59:26.006947",
     "exception": false,
     "start_time": "2025-07-22T09:59:25.996018",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "01f2f549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:59:26.030354Z",
     "iopub.status.busy": "2025-07-22T09:59:26.029848Z",
     "iopub.status.idle": "2025-07-22T09:59:26.066591Z",
     "shell.execute_reply": "2025-07-22T09:59:26.066021Z"
    },
    "papermill": {
     "duration": 0.049506,
     "end_time": "2025-07-22T09:59:26.067617",
     "exception": false,
     "start_time": "2025-07-22T09:59:26.018111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 179.939942,
   "end_time": "2025-07-22T09:59:28.819776",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-22T09:56:28.879834",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
