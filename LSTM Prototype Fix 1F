{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2afc1ad4",
   "metadata": {
    "papermill": {
     "duration": 0.003831,
     "end_time": "2025-06-25T14:29:39.855924",
     "exception": false,
     "start_time": "2025-06-25T14:29:39.852093",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR) + Cadangan Devisa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "54c3b902",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:39.864006Z",
     "iopub.status.busy": "2025-06-25T14:29:39.863732Z",
     "iopub.status.idle": "2025-06-25T14:29:41.437813Z",
     "shell.execute_reply": "2025-06-25T14:29:41.437091Z"
    },
    "papermill": {
     "duration": 1.579565,
     "end_time": "2025-06-25T14:29:41.439132",
     "exception": false,
     "start_time": "2025-06-25T14:29:39.859567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "581c58e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:41.446715Z",
     "iopub.status.busy": "2025-06-25T14:29:41.446450Z",
     "iopub.status.idle": "2025-06-25T14:29:55.739198Z",
     "shell.execute_reply": "2025-06-25T14:29:55.737868Z"
    },
    "papermill": {
     "duration": 14.299207,
     "end_time": "2025-06-25T14:29:55.741890",
     "exception": false,
     "start_time": "2025-06-25T14:29:41.442683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-25 14:29:44.396961: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1750861784.624340      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1750861784.691935      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82033491",
   "metadata": {
    "papermill": {
     "duration": 0.007133,
     "end_time": "2025-06-25T14:29:55.757758",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.750625",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0c4a2119",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.770700Z",
     "iopub.status.busy": "2025-06-25T14:29:55.769899Z",
     "iopub.status.idle": "2025-06-25T14:29:55.800081Z",
     "shell.execute_reply": "2025-06-25T14:29:55.799137Z"
    },
    "papermill": {
     "duration": 0.038054,
     "end_time": "2025-06-25T14:29:55.801403",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.763349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
      "0  1/3/2017  606000  13485            116.9         4936881.99\n",
      "1  1/4/2017  606000  13478            116.9         4936881.99\n",
      "2  1/5/2017  607000  13370            116.9         4936881.99\n",
      "3  1/6/2017  606000  13347            116.9         4936881.99\n",
      "4  1/9/2017  602000  13385            116.9         4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "902ed8e2",
   "metadata": {
    "papermill": {
     "duration": 0.00327,
     "end_time": "2025-06-25T14:29:55.808294",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.805024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8a557d54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.815842Z",
     "iopub.status.busy": "2025-06-25T14:29:55.815605Z",
     "iopub.status.idle": "2025-06-25T14:29:55.836533Z",
     "shell.execute_reply": "2025-06-25T14:29:55.835694Z"
    },
    "papermill": {
     "duration": 0.025915,
     "end_time": "2025-06-25T14:29:55.837596",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.811681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "38e699fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.845412Z",
     "iopub.status.busy": "2025-06-25T14:29:55.844944Z",
     "iopub.status.idle": "2025-06-25T14:29:55.856873Z",
     "shell.execute_reply": "2025-06-25T14:29:55.856107Z"
    },
    "papermill": {
     "duration": 0.016899,
     "end_time": "2025-06-25T14:29:55.857969",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.841070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "da215e7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.865487Z",
     "iopub.status.busy": "2025-06-25T14:29:55.865291Z",
     "iopub.status.idle": "2025-06-25T14:29:55.871255Z",
     "shell.execute_reply": "2025-06-25T14:29:55.870738Z"
    },
    "papermill": {
     "duration": 0.010974,
     "end_time": "2025-06-25T14:29:55.872238",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.861264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e3397d6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.880140Z",
     "iopub.status.busy": "2025-06-25T14:29:55.879942Z",
     "iopub.status.idle": "2025-06-25T14:29:55.885130Z",
     "shell.execute_reply": "2025-06-25T14:29:55.884441Z"
    },
    "papermill": {
     "duration": 0.010343,
     "end_time": "2025-06-25T14:29:55.886212",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.875869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "50864646",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.894296Z",
     "iopub.status.busy": "2025-06-25T14:29:55.893654Z",
     "iopub.status.idle": "2025-06-25T14:29:55.896770Z",
     "shell.execute_reply": "2025-06-25T14:29:55.896270Z"
    },
    "papermill": {
     "duration": 0.007831,
     "end_time": "2025-06-25T14:29:55.897744",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.889913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Kurs', 'Cadangan Devisa']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "98de84a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.905083Z",
     "iopub.status.busy": "2025-06-25T14:29:55.904887Z",
     "iopub.status.idle": "2025-06-25T14:29:55.912673Z",
     "shell.execute_reply": "2025-06-25T14:29:55.912146Z"
    },
    "papermill": {
     "duration": 0.012527,
     "end_time": "2025-06-25T14:29:55.913645",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.901118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "59f185c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.920949Z",
     "iopub.status.busy": "2025-06-25T14:29:55.920721Z",
     "iopub.status.idle": "2025-06-25T14:29:55.929831Z",
     "shell.execute_reply": "2025-06-25T14:29:55.929350Z"
    },
    "papermill": {
     "duration": 0.013764,
     "end_time": "2025-06-25T14:29:55.930728",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.916964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a38e7cbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.937987Z",
     "iopub.status.busy": "2025-06-25T14:29:55.937746Z",
     "iopub.status.idle": "2025-06-25T14:29:55.941079Z",
     "shell.execute_reply": "2025-06-25T14:29:55.940545Z"
    },
    "papermill": {
     "duration": 0.007954,
     "end_time": "2025-06-25T14:29:55.942006",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.934052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7401d912",
   "metadata": {
    "papermill": {
     "duration": 0.003209,
     "end_time": "2025-06-25T14:29:55.948587",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.945378",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "617479f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:29:55.956095Z",
     "iopub.status.busy": "2025-06-25T14:29:55.955891Z",
     "iopub.status.idle": "2025-06-25T14:31:51.553981Z",
     "shell.execute_reply": "2025-06-25T14:31:51.552916Z"
    },
    "papermill": {
     "duration": 115.603499,
     "end_time": "2025-06-25T14:31:51.555321",
     "exception": false,
     "start_time": "2025-06-25T14:29:55.951822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1750861797.409502      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1750861797.410220      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1750861802.120473      63 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=75350.3312\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=86829.6148\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=87051.1994\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=54777.0088\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=46774.1590\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=63828.1379\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=56382.9175\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=50199.5213\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=31911.5185\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=37619.3253\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=64779.6867\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=33406.0101\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=72769.7259\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=32596.7682\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=38981.3856\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=49782.5429\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "8      64      0.2         0.0010          32  31911.518476  0.021030   \n",
      "13     64      0.3         0.0010          64  32596.768250  0.021559   \n",
      "11     64      0.2         0.0005          64  33406.010069  0.019950   \n",
      "9      64      0.2         0.0010          64  37619.325330  0.023846   \n",
      "14     64      0.3         0.0005          32  38981.385570  0.022976   \n",
      "\n",
      "          R2  \n",
      "8   0.964889  \n",
      "13  0.963365  \n",
      "11  0.961523  \n",
      "9   0.951205  \n",
      "14  0.947608  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a67a9e94",
   "metadata": {
    "papermill": {
     "duration": 0.006726,
     "end_time": "2025-06-25T14:31:51.569108",
     "exception": false,
     "start_time": "2025-06-25T14:31:51.562382",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "28ef645a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:31:51.583556Z",
     "iopub.status.busy": "2025-06-25T14:31:51.583101Z",
     "iopub.status.idle": "2025-06-25T14:31:58.844890Z",
     "shell.execute_reply": "2025-06-25T14:31:58.844329Z"
    },
    "papermill": {
     "duration": 7.270314,
     "end_time": "2025-06-25T14:31:58.845948",
     "exception": false,
     "start_time": "2025-06-25T14:31:51.575634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - loss: 0.0126 - val_loss: 0.0022\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0017 - val_loss: 0.0081\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0044\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0043\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.7616e-04 - val_loss: 0.0051\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0044\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.9046e-04 - val_loss: 0.0063\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.4088e-04 - val_loss: 0.0059\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.0435e-04 - val_loss: 0.0040\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.9930e-04 - val_loss: 0.0061\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.7339e-04 - val_loss: 0.0033\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66fb9cfb",
   "metadata": {
    "papermill": {
     "duration": 0.008938,
     "end_time": "2025-06-25T14:31:58.865133",
     "exception": false,
     "start_time": "2025-06-25T14:31:58.856195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6650ba4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:31:58.884263Z",
     "iopub.status.busy": "2025-06-25T14:31:58.884039Z",
     "iopub.status.idle": "2025-06-25T14:31:59.873295Z",
     "shell.execute_reply": "2025-06-25T14:31:59.872555Z"
    },
    "papermill": {
     "duration": 1.000171,
     "end_time": "2025-06-25T14:31:59.874522",
     "exception": false,
     "start_time": "2025-06-25T14:31:58.874351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 65ms/step\n",
      "Final Test RMSE: 45106.3476\n",
      "Final Test MAPE: 0.0277\n",
      "Final Test MSLE: 0.001134\n",
      "Final Test R² Score: 0.9299\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "335da9f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:31:59.898754Z",
     "iopub.status.busy": "2025-06-25T14:31:59.898526Z",
     "iopub.status.idle": "2025-06-25T14:32:00.191210Z",
     "shell.execute_reply": "2025-06-25T14:32:00.190548Z"
    },
    "papermill": {
     "duration": 0.306667,
     "end_time": "2025-06-25T14:32:00.193098",
     "exception": false,
     "start_time": "2025-06-25T14:31:59.886431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c28b1514",
   "metadata": {
    "papermill": {
     "duration": 0.010354,
     "end_time": "2025-06-25T14:32:00.214655",
     "exception": false,
     "start_time": "2025-06-25T14:32:00.204301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e5693598",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-25T14:32:00.237560Z",
     "iopub.status.busy": "2025-06-25T14:32:00.236952Z",
     "iopub.status.idle": "2025-06-25T14:32:00.271529Z",
     "shell.execute_reply": "2025-06-25T14:32:00.270798Z"
    },
    "papermill": {
     "duration": 0.047347,
     "end_time": "2025-06-25T14:32:00.272619",
     "exception": false,
     "start_time": "2025-06-25T14:32:00.225272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 148.368434,
   "end_time": "2025-06-25T14:32:03.927069",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-25T14:29:35.558635",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
