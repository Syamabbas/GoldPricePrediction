{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "020bca63",
   "metadata": {
    "papermill": {
     "duration": 0.003752,
     "end_time": "2025-07-21T14:13:56.779580",
     "exception": false,
     "start_time": "2025-07-21T14:13:56.775828",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1E: Using historical gold prices, Exchange Rate and Money Supply"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "188de839",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:13:56.786633Z",
     "iopub.status.busy": "2025-07-21T14:13:56.786410Z",
     "iopub.status.idle": "2025-07-21T14:13:58.194188Z",
     "shell.execute_reply": "2025-07-21T14:13:58.193351Z"
    },
    "papermill": {
     "duration": 1.412549,
     "end_time": "2025-07-21T14:13:58.195362",
     "exception": false,
     "start_time": "2025-07-21T14:13:56.782813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57c92d22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:13:58.205049Z",
     "iopub.status.busy": "2025-07-21T14:13:58.204735Z",
     "iopub.status.idle": "2025-07-21T14:14:11.220686Z",
     "shell.execute_reply": "2025-07-21T14:14:11.220073Z"
    },
    "papermill": {
     "duration": 13.021263,
     "end_time": "2025-07-21T14:14:11.222035",
     "exception": false,
     "start_time": "2025-07-21T14:13:58.200772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-21 14:14:00.736610: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753107240.925678      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753107240.979941      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcb8f5c6",
   "metadata": {
    "papermill": {
     "duration": 0.003097,
     "end_time": "2025-07-21T14:14:11.228715",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.225618",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a62e3f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.236681Z",
     "iopub.status.busy": "2025-07-21T14:14:11.235864Z",
     "iopub.status.idle": "2025-07-21T14:14:11.264295Z",
     "shell.execute_reply": "2025-07-21T14:14:11.263463Z"
    },
    "papermill": {
     "duration": 0.033401,
     "end_time": "2025-07-21T14:14:11.265426",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.232025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply  \\\n",
      "0  1/3/2017  606000          13485                       3.49       4.12408   \n",
      "1  1/4/2017  606000          13478                       3.49       4.12935   \n",
      "2  1/5/2017  607000          13370                       3.49       4.12697   \n",
      "3  1/6/2017  606000          13347                       3.49       4.13105   \n",
      "4  1/9/2017  602000          13385                       3.49       4.14132   \n",
      "\n",
      "  Crude Oil  \n",
      "0     52,33  \n",
      "1     53,26  \n",
      "2     53,76  \n",
      "3     53,99  \n",
      "4     51,96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79aef46",
   "metadata": {
    "papermill": {
     "duration": 0.003168,
     "end_time": "2025-07-21T14:14:11.272062",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.268894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f85e8802",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.279337Z",
     "iopub.status.busy": "2025-07-21T14:14:11.279154Z",
     "iopub.status.idle": "2025-07-21T14:14:11.298560Z",
     "shell.execute_reply": "2025-07-21T14:14:11.297779Z"
    },
    "papermill": {
     "duration": 0.024409,
     "end_time": "2025-07-21T14:14:11.299697",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.275288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 6 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      " 5   Crude Oil                  1932 non-null   object \n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 90.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a2e87682",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.306917Z",
     "iopub.status.busy": "2025-07-21T14:14:11.306734Z",
     "iopub.status.idle": "2025-07-21T14:14:11.318700Z",
     "shell.execute_reply": "2025-07-21T14:14:11.318105Z"
    },
    "papermill": {
     "duration": 0.016819,
     "end_time": "2025-07-21T14:14:11.319828",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.303009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "18564c41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.327340Z",
     "iopub.status.busy": "2025-07-21T14:14:11.326980Z",
     "iopub.status.idle": "2025-07-21T14:14:11.333748Z",
     "shell.execute_reply": "2025-07-21T14:14:11.333014Z"
    },
    "papermill": {
     "duration": 0.011427,
     "end_time": "2025-07-21T14:14:11.334739",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.323312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "26cb6728",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.341981Z",
     "iopub.status.busy": "2025-07-21T14:14:11.341786Z",
     "iopub.status.idle": "2025-07-21T14:14:11.347075Z",
     "shell.execute_reply": "2025-07-21T14:14:11.346319Z"
    },
    "papermill": {
     "duration": 0.010142,
     "end_time": "2025-07-21T14:14:11.348110",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.337968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "981a1413",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.355670Z",
     "iopub.status.busy": "2025-07-21T14:14:11.355266Z",
     "iopub.status.idle": "2025-07-21T14:14:11.358171Z",
     "shell.execute_reply": "2025-07-21T14:14:11.357652Z"
    },
    "papermill": {
     "duration": 0.007675,
     "end_time": "2025-07-21T14:14:11.359212",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.351537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate', 'Money Supply']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b6f03b5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.366478Z",
     "iopub.status.busy": "2025-07-21T14:14:11.366278Z",
     "iopub.status.idle": "2025-07-21T14:14:11.373898Z",
     "shell.execute_reply": "2025-07-21T14:14:11.373335Z"
    },
    "papermill": {
     "duration": 0.012393,
     "end_time": "2025-07-21T14:14:11.374897",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.362504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "19decfad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.382162Z",
     "iopub.status.busy": "2025-07-21T14:14:11.381995Z",
     "iopub.status.idle": "2025-07-21T14:14:11.389217Z",
     "shell.execute_reply": "2025-07-21T14:14:11.388561Z"
    },
    "papermill": {
     "duration": 0.01218,
     "end_time": "2025-07-21T14:14:11.390427",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.378247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7c7936b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.398178Z",
     "iopub.status.busy": "2025-07-21T14:14:11.397611Z",
     "iopub.status.idle": "2025-07-21T14:14:11.401211Z",
     "shell.execute_reply": "2025-07-21T14:14:11.400748Z"
    },
    "papermill": {
     "duration": 0.008291,
     "end_time": "2025-07-21T14:14:11.402143",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.393852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c53c2361",
   "metadata": {
    "papermill": {
     "duration": 0.003199,
     "end_time": "2025-07-21T14:14:11.408773",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.405574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a1937fc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:14:11.416695Z",
     "iopub.status.busy": "2025-07-21T14:14:11.416306Z",
     "iopub.status.idle": "2025-07-21T14:16:03.612023Z",
     "shell.execute_reply": "2025-07-21T14:16:03.611240Z"
    },
    "papermill": {
     "duration": 112.201028,
     "end_time": "2025-07-21T14:16:03.613152",
     "exception": false,
     "start_time": "2025-07-21T14:14:11.412124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753107252.649701      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753107252.650431      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753107257.175414      62 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=85106.3622\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=133918.2711\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=83322.9555\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=49403.9427\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=48788.0869\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=90590.0413\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=42033.8242\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=86115.5463\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=35445.2632\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=22842.0594\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=27729.9106\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=30871.0204\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=31224.2988\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=38352.2486\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=23560.3015\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=38871.3468\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "9      64      0.2         0.0010          64  22842.059358  0.013779   \n",
      "14     64      0.3         0.0005          32  23560.301505  0.014954   \n",
      "10     64      0.2         0.0005          32  27729.910605  0.019528   \n",
      "11     64      0.2         0.0005          64  30871.020360  0.019784   \n",
      "12     64      0.3         0.0010          32  31224.298833  0.020711   \n",
      "\n",
      "          R2  \n",
      "9   0.982010  \n",
      "14  0.980861  \n",
      "10  0.973488  \n",
      "11  0.967141  \n",
      "12  0.966385  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94eeacde",
   "metadata": {
    "papermill": {
     "duration": 0.005752,
     "end_time": "2025-07-21T14:16:03.625241",
     "exception": false,
     "start_time": "2025-07-21T14:16:03.619489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "553beb61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:16:03.637633Z",
     "iopub.status.busy": "2025-07-21T14:16:03.637369Z",
     "iopub.status.idle": "2025-07-21T14:16:17.170375Z",
     "shell.execute_reply": "2025-07-21T14:16:17.169651Z"
    },
    "papermill": {
     "duration": 13.540459,
     "end_time": "2025-07-21T14:16:17.171553",
     "exception": false,
     "start_time": "2025-07-21T14:16:03.631094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - loss: 0.0173 - val_loss: 0.0069\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0018 - val_loss: 0.0043\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0016 - val_loss: 0.0024\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0024\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0023\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0021\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0036\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.0604e-04 - val_loss: 0.0021\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.0534e-04 - val_loss: 0.0041\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.6063e-04 - val_loss: 0.0022\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.5790e-04 - val_loss: 0.0037\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.5319e-04 - val_loss: 0.0041\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.9640e-04 - val_loss: 0.0050\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.4456e-04 - val_loss: 0.0019\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.3332e-04 - val_loss: 0.0026\n",
      "Epoch 16/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.3396e-04 - val_loss: 0.0033\n",
      "Epoch 17/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.7800e-04 - val_loss: 0.0019\n",
      "Epoch 18/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.8390e-04 - val_loss: 0.0050\n",
      "Epoch 19/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.1462e-04 - val_loss: 0.0032\n",
      "Epoch 20/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.9062e-04 - val_loss: 0.0059\n",
      "Epoch 21/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.8706e-04 - val_loss: 0.0028\n",
      "Epoch 22/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.9805e-04 - val_loss: 0.0044\n",
      "Epoch 23/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.4065e-04 - val_loss: 0.0055\n",
      "Epoch 24/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.4550e-04 - val_loss: 0.0037\n",
      "Epoch 25/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.8573e-04 - val_loss: 0.0040\n",
      "Epoch 26/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 4.4821e-04 - val_loss: 0.0027\n",
      "Epoch 27/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 4.5169e-04 - val_loss: 0.0053\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9249427f",
   "metadata": {
    "papermill": {
     "duration": 0.014185,
     "end_time": "2025-07-21T14:16:17.200987",
     "exception": false,
     "start_time": "2025-07-21T14:16:17.186802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "75224055",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:16:17.229933Z",
     "iopub.status.busy": "2025-07-21T14:16:17.229710Z",
     "iopub.status.idle": "2025-07-21T14:16:17.746830Z",
     "shell.execute_reply": "2025-07-21T14:16:17.746000Z"
    },
    "papermill": {
     "duration": 0.532828,
     "end_time": "2025-07-21T14:16:17.747921",
     "exception": false,
     "start_time": "2025-07-21T14:16:17.215093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Final Test RMSE: 41805.2783\n",
      "Final Test MAPE: 0.0232\n",
      "Final Test MSLE: 0.000905\n",
      "Final Test R² Score: 0.9397\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ed868c54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:16:17.777781Z",
     "iopub.status.busy": "2025-07-21T14:16:17.777313Z",
     "iopub.status.idle": "2025-07-21T14:16:18.060738Z",
     "shell.execute_reply": "2025-07-21T14:16:18.060025Z"
    },
    "papermill": {
     "duration": 0.299544,
     "end_time": "2025-07-21T14:16:18.062107",
     "exception": false,
     "start_time": "2025-07-21T14:16:17.762563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABW4AAAJOCAYAAAAnP56mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1zVdfvH8dc57I1sUEDce6a23JapdWd7WGl1t627fd/97oa2u6v7bk9Nbe+szFKzzJG59x4ICgiC7M05398fXziKgIICR+D9fDzOQ853XudASe+uc30shmEYiIiIiIiIiIiIiMhpw+rsAkRERERERERERESkMgW3IiIiIiIiIiIiIqcZBbciIiIiIiIiIiIipxkFtyIiIiIiIiIiIiKnGQW3IiIiIiIiIiIiIqcZBbciIiIiIiIiIiIipxkFtyIiIiIiIiIiIiKnGQW3IiIiIiIiIiIiIqcZBbciIiIiIiIiIiIipxkFtyIiIiINbObMmVgsFvbt23fCY9u2bcukSZMavKZFixZhsVhYtGhRg9/rdDJlyhQsFkulbfX9nk+aNIm2bdvW2/WcZdiwYQwbNqxB71Hd9+N0cir/nNTln3sRERGR6ii4FRERETlKfHw8kydPplOnTnh7e+Pt7U23bt2466672Lhxo7PLc7BYLI6H1WolKiqK888//7QPYptq3cdKTk5mypQprF+/3tmlnLSjvxdHPyIiIpxdWhWTJk3CYrHg7+9PYWFhlf27du1y1P/SSy85oUIRERGR+ufq7AJEREREThdz5szhqquuwtXVlQkTJtC7d2+sVivbt2/n22+/5e233yY+Pp7Y2FhnlwrAeeedxw033IBhGMTHx/PWW28xYsQIfvrpJ8aMGXPcc4cMGUJhYSHu7u6NVO0Rp1J3Q9ixYwdWa936GZKTk5k6dSpt27alT58+lfa9//772O32eqyw4VR8L47m5eUFwPz5851RUo1cXV0pKCjgxx9/5Morr6y075NPPsHT05OioiInVSciIiJS/xTcioiIiAB79uzh6quvJjY2loULFxIZGVlp/wsvvMBbb71V54CvIXXq1InrrrvO8fySSy6hV69evPLKKzUGoEVFRbi7u2O1WvH09GysUis51brrm4eHR71ez83NrV6v15CO/V4czRmh/vF4eHhwzjnn8Nlnn1UJbj/99FPGjRvHN99846TqREREROrf6fNfHiIiIiJO9J///If8/HxmzJhRJbQFs9vvnnvuITo6utL23377jcGDB+Pj40NgYCAXX3wx27ZtO+H9DMPg6aefpk2bNnh7ezN8+HC2bNlySq+hZ8+ehISEEB8fDxyZz/n555/z6KOP0rp1a7y9vcnJyalxdueKFSsYO3YsrVq1wsfHh169evHqq69WOmb79u1cfvnlBAUF4enpyRlnnMEPP/zQKHVX1HjBBRcQEBCAt7c3Q4cOZdmyZVWuu3TpUgYMGICnpyft27fn3Xffrfb+1c24zcrK4r777qNt27Z4eHjQpk0bbrjhBtLT01m0aBEDBgwA4MYbb3R8RH/mzJlA9TNu8/PzeeCBB4iOjsbDw4POnTvz0ksvYRhGpeMsFguTJ09m9uzZ9OjRAw8PD7p3784vv/xS17f1lB0747bi+/Lll1/yzDPP0KZNGzw9PRk5ciS7d++udO6SJUu44ooriImJwcPDg+joaO67775qxxzUxbXXXsvPP/9MVlaWY9uqVavYtWsX1157bbXn7N27lyuuuIKgoCC8vb0588wz+emnn6ocd+DAAcaPH4+Pjw9hYWHcd999FBcXV3vN2v4MioiIiJwKddyKiIiIYI5J6NChA4MGDar1Ob/++itjxoyhXbt2TJkyhcLCQl5//XXOOecc1q5de9wFqh5//HGefvppxo4dy9ixY1m7di3nn38+JSUlJ/0aMjMzyczMpEOHDpW2P/XUU7i7u/Pggw9SXFxcYyflggULuPDCC4mMjOQf//gHERERbNu2jTlz5vCPf/wDgC1btnDOOefQunVr/vWvf+Hj48OXX37J+PHj+eabb7jkkksatO7ffvuNMWPG0L9/f5544gmsViszZsxgxIgRLFmyhIEDBwKwadMmzj//fEJDQ5kyZQplZWU88cQThIeHn7CevLw8Bg8ezLZt27jpppvo168f6enp/PDDDxw4cICuXbvy5JNP8vjjj3PrrbcyePBgAM4+++xqr2cYBn/729/4/fffufnmm+nTpw/z5s3joYceIikpif/973+Vjl+6dCnffvstd955J35+frz22mtcdtllJCYmEhwcXOf393iKiopIT0+vtM3Pz++4XcjPP/88VquVBx98kOzsbP7zn/8wYcIEVqxY4Tjmq6++oqCggDvuuIPg4GBWrlzJ66+/zoEDB/jqq69Out5LL72U22+/nW+//ZabbroJMLttu3TpQr9+/aocn5qaytlnn01BQQH33HMPwcHBzJo1i7/97W98/fXXjp/XwsJCRo4cSWJiIvfccw9RUVF89NFH/Pbbb1WuWdufQREREZFTZoiIiIi0cNnZ2QZgjB8/vsq+zMxM49ChQ45HQUGBY1+fPn2MsLAwIyMjw7Ftw4YNhtVqNW644QbHthkzZhiAER8fbxiGYaSlpRnu7u7GuHHjDLvd7jju//7v/wzAmDhx4glrBoybb77ZOHTokJGWlmasWLHCGDlypAEYL7/8smEYhvH7778bgNGuXbtKdR+97/fffzcMwzDKysqMuLg4IzY21sjMzKx07NE1jhw50ujZs6dRVFRUaf/ZZ59tdOzYsUHrttvtRseOHY3Ro0dXqqmgoMCIi4szzjvvPMe28ePHG56enkZCQoJj29atWw0XFxfj2F+BY2NjK73njz/+uAEY3377bZX6K+67atUqAzBmzJhR5ZiJEycasbGxjuezZ882AOPpp5+udNzll19uWCwWY/fu3ZXeH3d390rbNmzYYADG66+/XuVepwKo9lHxmoYOHWoMHTrUcXzF96Vr165GcXGxY/urr75qAMamTZsc2479eTMMw3juuecMi8VS6XvyxBNPVPl+VGfixImGj4+PYRjm+zZy5EjDMAzDZrMZERERxtSpU434+HgDMF588UXHeffee68BGEuWLHFsy83NNeLi4oy2bdsaNpvNMAzDeOWVVwzA+PLLLx3H5efnGx06dKj0z0ldfgaP/edeREREpK40KkFERERavIqP4Pv6+lbZN2zYMEJDQx2PN998E4CUlBTWr1/PpEmTCAoKchzfq1cvzjvvPObOnVvj/X799VdKSkq4++67sVgsju333ntvneqePn06oaGhhIWFMWjQIJYtW8b9999f5ToTJ050LDhVk3Xr1hEfH8+9995LYGBgpX0VNR4+fJjffvuNK6+8ktzcXNLT00lPTycjI4PRo0eza9cukpKSGqzu9evXOz4Sn5GR4bh/fn4+I0eOZPHixdjtdmw2G/PmzWP8+PHExMQ4zu/atSujR48+YX3ffPMNvXv3rrZ7+OjvV23NnTsXFxcX7rnnnkrbH3jgAQzD4Oeff660fdSoUbRv397xvFevXvj7+7N379463/tELr74YhYsWFDpcaL36MYbb6zUtV3RcXx0fUd/3/Lz80lPT+fss8/GMAzWrVt3SjVfe+21LFq0iIMHD/Lbb79x8ODBGsckzJ07l4EDB3Luuec6tvn6+nLrrbeyb98+tm7d6jguMjKSyy+/3HGct7c3t956a6Xr1fZnUERERKQ+tOhRCYsXL+bFF19kzZo1pKSk8N133zF+/Pg6XcMwDF5++WXee+89EhISCAkJ4c477+Tf//53wxQtIiIi9c7Pzw8wPyJ/rHfffZfc3FxSU1MrLeKUkJAAQOfOnauc07VrV+bNm0d+fj4+Pj5V9lec27Fjx0rbQ0NDadWqVa3rvvjii5k8eTIWiwU/Pz+6d+9e7f3i4uJOeK09e/YA0KNHjxqP2b17N4Zh8Nhjj/HYY49Ve0xaWhqtW7dukLp37doFmIFuTbKzsykuLqawsLDK+wvm9+t4oTqY78Vll1123GPqIiEhgaioKMfPWYWuXbs69h/t6LC5QqtWrcjMzDzufQ4ePFjpeUBAwAkD+zZt2jBq1KjjHnOsY+ur+Jk9ur7ExEQef/xxfvjhhyp1Z2dn1+l+xxo7dix+fn588cUXrF+/ngEDBtChQwf27dtX5diEhIRqx58c/d736NGDhIQEOnToUCWYP/af79r+DNbln2MRERGRmrTo4DY/P5/evXtz0003cemll57UNf7xj38wf/58XnrpJXr27Mnhw4c5fPhwPVcqIiIiDSkgIIDIyEg2b95cZV9F6FNdKORstQ3dThTe1VZFJ+GDDz5YY1fmsXNqq3OydVfc/8UXX6RPnz7VnuPr61vjglJNhYuLS7XbjWMWMjvWsYvqzZgxo8qia/XhRPXZbDbOO+88Dh8+zD//+U+6dOmCj48PSUlJTJo06ZQ7Uj08PLj00kuZNWsWe/fuZcqUKad0vbqo7c+giIiISH1o0cHtmDFjGDNmTI37i4uL+fe//81nn31GVlYWPXr04IUXXnCsrrtt2zbefvttNm/e7Pi/8bXpaBEREZHTz7hx45g2bRorV66s1eJCsbGxAOzYsaPKvu3btxMSElJtF+nR5+7atYt27do5th86dOiEXZUNpeKj+Zs3b64xVK2o1c3Nrc5dmvWhokZ/f//j3j80NBQvLy9Hd+TRqvt+VXef6kL8o9VlZEJsbCy//vorubm5lbput2/f7thfHxYsWFDpeffu3evlunW1adMmdu7cyaxZs7jhhhsc24+t71Rce+21fPDBB1itVq6++uoaj4uNja3xn9GK/RV/bt68GcMwKn1vjz23tj+DIiIiIvVBM26PY/LkySxfvpzPP/+cjRs3csUVV3DBBRc4/iPgxx9/pF27dsyZM4e4uDjatm3L3//+d3XcioiINEEPP/ww3t7e3HTTTaSmplbZf2y3Y2RkJH369GHWrFlkZWU5tm/evJn58+czduzYGu81atQo3NzceP311ytd95VXXjnl13Gy+vXrR1xcHK+88kql1wNHXntYWBjDhg3j3XffJSUlpco1Dh061KA19u/fn/bt2/PSSy9VO9ai4v4uLi6MHj2a2bNnk5iY6Ni/bds25s2bd8L7XHbZZWzYsIHvvvuuyr6K96IilD/2varO2LFjsdlsvPHGG5W2/+9//8NisRy3kaAuRo0aVelxbAduY6noyD36Z9swDF599dV6u8fw4cN56qmneOONN4iIiKjxuLFjx7Jy5UqWL1/u2Jafn897771H27Zt6datm+O45ORkvv76a8dxBQUFvPfee5WuV9ufQREREZH60KI7bo8nMTGRGTNmkJiYSFRUFGB+LPCXX35hxowZPPvss+zdu5eEhAS++uorPvzwQ2w2G/fddx+XX345v/32m5NfgYiIiNRFx44d+fTTT7nmmmvo3LkzEyZMoHfv3hiGQXx8PJ9++ilWq5U2bdo4znnxxRcZM2YMZ511FjfffDOFhYW8/vrrBAQEHPfj26GhoTz44IM899xzXHjhhYwdO5Z169bx888/ExIS0givtiqr1crbb7/NRRddRJ8+fbjxxhuJjIxk+/btbNmyxRF4vvnmm5x77rn07NmTW265hXbt2pGamsry5cs5cOAAGzZsaNAap02bxpgxY+jevTs33ngjrVu3Jikpid9//x1/f39+/PFHAKZOncovv/zC4MGDufPOOykrK+P111+ne/fubNy48bj3eeihh/j666+54ooruOmmm+jfvz+HDx/mhx9+4J133qF37960b9+ewMBA3nnnHfz8/PDx8WHQoEHVfvrqoosuYvjw4fz73/9m37599O7dm/nz5/P9999z7733VlqIrDno0qUL7du358EHHyQpKQl/f3+++eabeu0mt1qtPProoyc87l//+hefffYZY8aM4Z577iEoKIhZs2YRHx/PN998g9Vq9rHccsstvPHGG9xwww2sWbOGyMhIPvroI7y9vavct7Y/gyIiIiKnSsFtDTZt2oTNZqNTp06VthcXFxMcHAyYM66Ki4v58MMPHcdNnz6d/v37s2PHjmoXKxEREZHT18UXX8ymTZt4+eWXmT9/Ph988AEWi4XY2FjGjRvH7bffTu/evR3Hjxo1il9++YUnnniCxx9/HDc3N4YOHcoLL7xwwvFJTz/9NJ6enrzzzjv8/vvvDBo0iPnz5zNu3LiGfpk1Gj16NL///jtTp07l5Zdfxm630759e2655RbHMd26dWP16tVMnTqVmTNnkpGRQVhYGH379uXxxx9v8BqHDRvG8uXLHd2WeXl5REREMGjQIG677TbHcb169WLevHncf//9PP7447Rp04apU6eSkpJywuDW19eXJUuW8MQTT/Ddd98xa9YswsLCGDlypCO4d3NzY9asWTzyyCPcfvvtlJWVMWPGjGq/71arlR9++IHHH3+cL774ghkzZtC2bVtefPFFHnjggfp9g04Dbm5u/Pjjj9xzzz0899xzeHp6cskllzB58uRK//w0hvDwcP7880/++c9/8vrrr1NUVESvXr348ccfK/2z5u3tzcKFC7n77rt5/fXX8fb2ZsKECYwZM4YLLrig0jVr+zMoIiIicqosxolWOWghLBYL3333HePHjwfgiy++YMKECWzZsqXKAgy+vr5ERETwxBNP8Oyzz1JaWurYV1hYiLe3N/Pnz+e8885rzJcgIiIiIiIiIiIizYQ6bmvQt29fbDYbaWlpDB48uNpjzjnnHMrKytizZ4/jI247d+4E6m+RCREREREREREREWl5WnTHbV5eHrt37wbMoPa///0vw4cPJygoiJiYGK677jqWLVvGyy+/TN++fTl06BALFy6kV69ejBs3DrvdzoABA/D19eWVV17Bbrdz11134e/vz/z585386kRERERERERERKSpatHB7aJFixg+fHiV7RMnTmTmzJmUlpby9NNP8+GHH5KUlERISAhnnnkmU6dOpWfPngAkJydz9913M3/+fHx8fBgzZgwvv/wyQUFBjf1yREREREREREREpJlo0cGtiIiIiIiIiIiIyOnI6uwCRERERERERERERKQyBbciIiIiIiIiIiIipxlXZxfQ2Ox2O8nJyfj5+WGxWJxdjoiIiIiIiIiIiLQQhmGQm5tLVFQUVuvxe2pbXHCbnJxMdHS0s8sQERERERERERGRFmr//v20adPmuMe0uODWz88PMN8cf39/J1cjIiIiNSktLWX+/Pmcf/75uLm5ObscERERERFpQC3l9/+cnByio6MdGeXxtLjgtmI8gr+/v4JbERGR01hpaSne3t74+/s361/cRERERESk5f3+X5sRrlqcTEREREREREREROQ0o+BWRERERERERERE5DSj4FZERERERERERETkNNPiZtzWls1mo7S01NllSDPj5uaGi4uLs8sQEREREREREZHTnILbYxiGwcGDB8nKynJ2KdJMBQYGEhERUash1CIiIiIiIiIi0jIpuD1GRWgbFhaGt7e3wjWpN4ZhUFBQQFpaGgCRkZFOrkhERERERERERE5XCm6PYrPZHKFtcHCws8uRZsjLywuAtLQ0wsLCNDZBRERERERERESqpcXJjlIx09bb29vJlUhzVvHzpRnKIiIiIiIiIiJSEwW31dB4BGlI+vkSEREREREREZETUXArIiIiIiIiIiIicppRcCuNwmKxMHv27Hq/btu2bXnllVfq/boiIiIiIiIiIiLOpOC2mVm+fDkuLi6MGzeuzuc6MwSdNGkSFosFi8WCu7s7HTp04Mknn6SsrOy4561atYpbb721kaoUERERERERERFpHApum5np06dz9913s3jxYpKTk51dTp1ccMEFpKSksGvXLh544AGmTJnCiy++WO2xJSUlAISGhmoxORERERERERERaXYU3DYjeXl5fPHFF9xxxx2MGzeOmTNnVjnmxx9/ZMCAAXh6ehISEsIll1wCwLBhw0hISOC+++5zdL4CTJkyhT59+lS6xiuvvELbtm0dz1etWsV5551HSEgIAQEBDB06lLVr19a5fg8PDyIiIoiNjeWOO+5g1KhR/PDDD4DZkTt+/HieeeYZoqKi6Ny5M1C1SzgrK4vbbruN8PBwPD096dGjB3PmzHHsX7p0KYMHD8bLy4vo6Gjuuece8vPz61yriIiIiIiIiIhIQ1JwewKGYVBQUuaUh2EYdar1yy+/pEuXLnTu3JnrrruODz74oNI1fvrpJy655BLGjh3LunXrWLhwIQMHDgTg22+/pU2bNjz55JOkpKSQkpJS6/vm5uYyceJEli5dyl9//UXHjh0ZO3Ysubm5dar/WF5eXo7OWoCFCxeyY8cOFixYUCmMrWC32xkzZgzLli3j448/ZuvWrTz//PO4uLgAsGfPHi644AIuu+wyNm7cyBdffMHSpUuZPHnyKdUpIiIiIiIiIiJS31ydXcDprrDURrfH5znl3lufHI23e+2/RdOnT+e6664DzLED2dnZ/PHHHwwbNgyAZ555hquvvpqpU6c6zunduzcAQUFBuLi44OfnR0RERJ3qHDFiRKXn7733HoGBgfzxxx9ceOGFdboWmGH5woULmTdvHnfffbdju4+PD9OmTcPd3b3a83799VdWrlzJtm3b6NSpEwDt2rVz7H/uueeYMGEC9957LwAdO3bktddeY+jQobz99tt4enrWuVYREREREREREZGGoI7bZmLHjh2sXLmSa665BgBXV1euuuoqpk+f7jhm/fr1jBw5st7vnZqayi233ELHjh0JCAjA39+fvLw8EhMT63SdOXPm4Ovri6enJ2PGjOGqq65iypQpjv09e/asMbQF8/W1adPGEdoea8OGDcycORNfX1/HY/To0djtduLj4+tUq4iIiIiIiIiISENSx+0JeLm5sPXJ0U67d21Nnz6dsrIyoqKiHNsMw8DDw4M33niDgIAAvLy86lyD1WqtMrKhtLS00vOJEyeSkZHBq6++SmxsLB4eHpx11lmVxhzUxvDhw3n77bdxd3cnKioKV9fKP54+Pj7HPf9Ery8vL4/bbruNe+65p8q+mJiYOtUqIiIiIiIiIiLSkBTcnoDFYqnTuAJnKCsr48MPP+Tll1/m/PPPr7Rv/PjxfPbZZ9x+++306tWLhQsXcuONN1Z7HXd3d2w2W6VtoaGhHDx4EMMwHAuWrV+/vtIxy5Yt46233mLs2LEA7N+/n/T09Dq/Dh8fHzp06FDn8yr06tWLAwcOsHPnzmq7bvv168fWrVtP6R4iIiIiIiIiIiKNQaMSmoE5c+aQmZnJzTffTI8ePSo9LrvsMse4hCeeeILPPvuMJ554gm3btrFp0yZeeOEFx3Xatm3L4sWLSUpKcgSvw4YN49ChQ/znP/9hz549vPnmm/z888+V7t+xY0c++ugjtm3bxooVK5gwYcJJdfeeqqFDhzJkyBAuu+wyFixYQHx8PD///DO//PILAP/85z/5888/mTx5MuvXr2fXrl18//33WpxMRERERERExEkMw+B/C3by2sJdzi5F5LSj4LYZmD59OqNGjSIgIKDKvssuu4zVq1ezceNGhg0bxldffcUPP/xAnz59GDFiBCtXrnQc++STT7Jv3z7at29PaGgoAF27duWtt97izTffpHfv3qxcuZIHH3ywyv0zMzPp168f119/Pffccw9hYWEN+6Jr8M033zBgwACuueYaunXrxsMPP+zoIu7Vqxd//PEHO3fuZPDgwfTt25fHH3+80ngJEREREREREWk821JyeXXhLv67YCcZecXOLkfktGIxjh1g2szl5OQQEBBAdnY2/v7+lfYVFRURHx9PXFwcnp6eTqpQmjv9nImI1E5paSlz585l7NixuLm5ObscEREREWkAL/yynbcX7QHgh8nn0KtNoHMLEqdpKb//Hy+bPJY6bkVEREREREREpNEZhsGPG5Idz5MyC51YjcjpR8GtiIiIiIiIiIg0unX7szhwVFiblKXgVuRoCm5FRERERERERKTR/bA+udLzA+q4FalEwa2IiIiIiIiIiDQqm93gp00pAAzrbC6Qro5bkcoU3IqIiIiIiIiISKOKT8/nUG4x3u4uXD0gGtCMW5FjKbgVEREREREREZFGlZZTBEBkgCdtQ3wAddyKHEvBrYiIiIiIiIiINKq03GIAwvw8aR3oBUB2YSl5xWXOLEvktKLgVkREREREREREGlVartlxG+bvgZ+nG/6eroDGJYgcTcGtiIiIiIiIiIg0qkOOjlsPAFq38gYgWeMSRBwU3EqdTZo0ifHjxzueDxs2jHvvvbfR61i0aBEWi4WsrKx6ve6+ffuwWCysX7++Xq8rIiIiIiIiIqaKUQmhFcFt+biEAwpuRRwU3DYTkyZNwmKxYLFYcHd3p0OHDjz55JOUlTX8bJhvv/2Wp556qlbHNlTYWpO2bds63hcfHx/69evHV199ddxzoqOjSUlJoUePHo1So4iIiIiIiEhLk5ZzZMYtQJtWZnCrUQkiRyi4bUYuuOACUlJS2LVrFw888ABTpkzhxRdfrPbYkpKSertvUFAQfn5+9Xa9+vbkk0+SkpLCunXrGDBgAFdddRV//vlntceWlJTg4uJCREQErq6ujVypiIiIiIiISMvgmHF7TMdtkjpuRRwU3DYjHh4eREREEBsbyx133MGoUaP44YcfgCPjDZ555hmioqLo3LkzAPv37+fKK68kMDCQoKAgLr74Yvbt2+e4ps1m4/777ycwMJDg4GAefvhhDMOodN9jRyUUFxfzz3/+k+joaDw8POjQoQPTp09n3759DB8+HIBWrVphsViYNGkSAHa7neeee464uDi8vLzo3bs3X3/9daX7zJ07l06dOuHl5cXw4cMr1Xk8fn5+RERE0KlTJ9588028vLz48ccfAbMj96mnnuKGG27A39+fW2+9tdpRCVu2bOHCCy/E398fPz8/Bg8ezJ49exz7p02bRteuXfH09KRLly689dZbtapNREREREREpCU6dOyoBEfHbYHTahI53ail8EQMA0qd9C8NN2+wWE76dC8vLzIyMhzPFy5ciL+/PwsWLACgtLSU0aNHc9ZZZ7FkyRJcXV15+umnueCCC9i4cSPu7u68/PLLzJw5kw8++ICuXbvy8ssv89133zFixIga73vDDTewfPlyXnvtNXr37k18fDzp6elER0fzzTffcNlll7Fjxw78/f3x8jL/xfzcc8/x8ccf884779CxY0cWL17MddddR2hoKEOHDmX//v1ceuml3HXXXdx6662sXr2aBx54oM7viaurK25ubpU6jl966SUef/xxnnjiiWrPSUpKYsiQIQwbNozffvsNf39/li1b5hhD8cknn/D444/zxhtv0LdvX9atW8ctt9yCj48PEydOrHONIiIiIiIiIs1ZUamNnCLzv6krRiWo47bhZBeUkp5fTPtQX2eXInWk4PZESgvg2Sjn3Pv/ksHdp86nGYbBwoULmTdvHnfffbdju4+PD9OmTcPd3R2Ajz/+GLvdzrRp07CUB8QzZswgMDCQRYsWcf755/PKK6/wyCOPcOmllwLwzjvvMG/evBrvvXPnTr788ksWLFjAqFGjAGjXrp1jf1BQEABhYWEEBgYCZofus88+y6+//spZZ53lOGfp0qW8++67DB06lLfffpv27dvz8ssvA9C5c2c2bdrECy+8UOv3paSkhJdffpns7OxKwfOIESMqhcDHdvK++eabBAQE8Pnnn+Pm5gZAp06dHPufeOIJXn75Zcd7FBcXx9atW3n33XcV3IqIiIiIiIgco6Lb1t3Vir+XGU1VdNym5RZTUmbH3VUfEq8vN81axbrETBY9OJyYYG9nlyN1oOC2GZkzZw6+vr6UlpZit9u59tprmTJlimN/z549HaEtwIYNG9i9e3eV+bRFRUXs2bOH7OxsUlJSGDRokGOfq6srZ5xxRpVxCRXWr1+Pi4sLQ4cOrXXdu3fvpqCggPPOO6/S9pKSEvr27QvAtm3bKtUBOELeE/nnP//Jo48+SlFREb6+vjz//POMGzfOsf+MM8447vnr169n8ODBjtD2aPn5+ezZs4ebb76ZW265xbG9rKyMgICAWtUnIiIiIiIi0pIcPd+2opEs2Mcdb3cXCkpsfLl6P9edGevMEpuNolIb6/dnYTdgU1K2gtsmRsHtibh5m52vzrp3HQwfPpy3334bd3d3oqKiqiyu5eNTuXs3Ly+P/v3788knn1S5VmhoaN3rBcfog7rIy8sD4KeffqJ169aV9nl4eJxUHUd76KGHmDRpEr6+voSHhzv+Uqhw7PtyrOO9pora33///SrBsouLy0lWLCIiIiIiItJ8HTvfFsBisXDbkPb879edPP79ZkL9PBjdPcJZJTYbew/lY7ObzXf7MvKdXI3UlYLbE7FYTmpcgTP4+PjQoUOHWh/fr18/vvjiC8LCwvD396/2mMjISFasWMGQIUMAs5N0zZo19OvXr9rje/bsid1u548//nCMSjhaRcevzWZzbOvWrRseHh4kJibW2KnbtWtXx0JrFf76668Tv0ggJCSkTu/LsXr16sWsWbMoLS2t0nUbHh5OVFQUe/fuZcKECSd9DxEREREREZGWIq08uA3zq9ysdc/IDiRnFfLF6v3c/dk6PrppIIPaBTujxGZjR2qO4+t96QpumxoNDGnBJkyYQEhICBdffDFLliwhPj6eRYsWcc8993DgwAEA/vGPf/D8888ze/Zstm/fzp133klWVlaN12zbti0TJ07kpptuYvbs2Y5rfvnllwDExsZisViYM2cOhw4dIi8vDz8/Px588EHuu+8+Zs2axZ49e1i7di2vv/46s2bNAuD2229n165dPPTQQ+zYsYNPP/2UmTNnNvRbBMDkyZPJycnh6quvZvXq1ezatYuPPvqIHTt2ADB16lSee+45XnvtNXbu3MmmTZuYMWMG//3vfxulPhEREREREZGmJC2nIrj1rLTdYrHwzCU9GNU1nJIyO3//cDXbD+ZUOX9tYiaj/7eYXzanNEq9TdmOg3mOrxMyCpxYiZwMBbctmLe3N4sXLyYmJoZLL72Url27cvPNN1NUVOTowH3ggQe4/vrrmThxImeddRZ+fn5ccsklx73u22+/zeWXX86dd95Jly5duOWWW8jPN/+vTuvWrZk6dSr/+te/CA8PZ/LkyQA8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4aJ0+OQuyF1/8PGYYZByJqScAUlTwKL/jRIREZGu59FPHMuWLePpp59m/fr15Ofn8/HHHx+xDcOKFSv45S9/yfbt26mrqyMpKYk77riD+++/v/uKFhERERE5wewoqOal73YD8PicoQT5dHI7gfZyu2Hvclj7qtF2wO00Ztle+z4kTz22a5pMMOpaY2uqheLtRgBbmAZF24zH2iIo32tsOxYa5wXFw+ALjfDX5YCcH2D7QnDZwSsQBp7XHNbOgICozvoJiIiIiLSbR4Pb2tpaRowYwS233MIll1xy1PH+/v7cfffdDB8+HH9/f1asWMEdd9yBv78/t99+ezdULCIiIiJyYnG53Dz80WYcLjdnD47m3KEx3V9EQxVsehd++DeU7Nh/PGkqnP17iBvTOffx8jeu9ePr1ZZAUZoR4hZuMULjqhxY/cKh1+g/Cy54FoJiO6cmERERkWN0zMFtU1MTmZmZpKSkYLUe22VmzZrFrFmz2j1+1KhRjBo1qvV5cnIyH330EcuXL1dwKyIiIiLShnfW7GNjVgUB3lYev3BI9xew6T34/AFoqjGe2/yN3rTjbjV60XYH/wjofZqxAZz3V0j/1GiJUF1gzPyNHQ1JkyFhgjGLV0RERMTDOpy41tXVcc899/Df//4XgJ07d9KnTx/uuece4uLiePjhhzu9yMPZuHEjq1at4oknnjjsmMbGRhobG1ufV1VVAWC327Hb7V1eo4iIiByblr+n9fe1yLErqGrgz19uB+DBmX2J8LN2739T1flYP7sfk70Wd3g/XGN+gmv4leAdaLzusf++LTDoYmP7MYej+8sRERGRU+bzf0feX4eD20ceeYRNmzbx7bffcu6557YeP+uss3jssce6JbiNj4+nuLgYh8PBY489xq233nrYsX/60594/PHHDzm+ePFi/Pz8urJMERER6QRLlizxdAkiJ6z/7DBT22gmOcBNSMlWFi7c2q33H7XvZRLttZT5pbA84ddQbIavlndrDSIiInJiOdk//9fV1bV7bIeD2/nz5/Pee+8xceJETAd8hWjIkCHs3r27o5c7JsuXL6empobVq1fz8MMP07dvX66++uo2xz7yyCM88MADrc+rqqpISEjg7LPPJigoqFvqFRERkY6z2+0sWbKEmTNnYrN5aCElkRPY4rRCNn+/CavZxD9vnMSAmMBuvb8pdz3WjSsBCLriRc6LG92t9xcREZETy6ny+b+lG0B7dDi4LS4uJirq0FVVa2trDwpyu1Lv3r0BGDZsGIWFhTz22GOHDW69vb3x9vY+5LjNZjupfxOIiIicLPR3tkjHVTfY+f3nRouEO6b3YWhCWPcX8c3vjceR12JNntD99xcREZET0sn++b8j783c0YuPHTuWzz//vPV5S1j773//m0mTJnX0csfN5XId1MNWRERERORU9/SiHRRWNZIc7sc9Z/Tr/gIKtsC+lWC2whmPdv/9RURERE4CHZ5x++STTzJr1izS0tJwOBw899xzpKWlsWrVKr777rsOXaumpoaMjIzW55mZmaSmphIWFkZiYiKPPPIIubm5vPnmmwC88MILJCYmMnDgQACWLVvGM888w7333tvRtyEiIiIiclJav6+ct1bvA+DJi4fhY7N0fxFrXzUeB82GoNjuv7+IiIjISaDDwe3UqVNJTU3lz3/+M8OGDWPx4sWMHj2a77//nmHDhnXoWuvWrWPGjBmtz1t60d5444288cYb5Ofnk5WV1fq6y+XikUceITMzE6vVSkpKCk899RR33HFHR9+GiIiIiMhJp8nh4lcfbcHthsvGxDO5b0T3F1FfAVs+MPbH3db99xcRERE5SXQ4uAVISUnh1VdfPe6bn3766bjd7sO+/sYbbxz0/J577uGee+457vuKiIiIiJyMXl2+hx2F1YT7e/Hr8wZ5pojUuWCvg6jBkDTZMzWIiIiInAQ63ON24cKFLFq06JDjixYt4osvvuiUokREREREpGP2FNfw3Fe7APjt7MGE+nt1fxFuN6x/3dgfdyt00+LFIiIiIiejDge3Dz/8ME6n85Djbrebhx9+uFOKEhERERGR9nO73fzq4y00OVyc1j+SOSM81Fe2ZBeU7ASLFwy73DM1iIiIiJwkOhzc7tq1i8GDBx9yfODAgQctNCYiIiIiIt3jg/U5rN5Tho/NzB8vGorJUzNddyw0HnufBj5BnqlBRERE5CTR4eA2ODiYPXv2HHI8IyMDf3//TilKRERERETap6SmkT9+ng7AAzP7kxDm57lidjS3Tut/rudqEBERETlJdDi4vfDCC/n5z3/O7t27W49lZGTw4IMPMmfOnE4tTkREREREjuwPn6VRWW9ncK8gbpnS23OF1JZA9hpjf8Asz9UhIiIicpLocHD7l7/8BX9/fwYO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/EpImdF99xYRERGRU46CWxERERE5oTTYnazeXQrAyITg7rvx2lehcCv4hsI5T3bffUVERETklKTgVkREREROKN/uKKa60UGvYB9GJYR2z01rS+G7Pxv7Z/4O/CO6574iIiIicspScCsiIiIiJ5QFm/MAuGB4L8xmU/fc9Ns/QUMlRA+F0Td0zz1FRERE5JSm4FZEREREThi1jQ6+Si8EYM6IuO65aVE6rHvN2D/3T2C2dM99RUREROSUpuBWRERERE4YS9MLabC7SA73Y2hcNyxM5nbDol+B2wkDL4Dep3X9PUVEREREUHArIiIiIieQBZuMNglzRsRiMnVDm4RdS2D312C2wczfd/39RERERESaKbgVERERkROC2+1mzZ4yAM4eEtP1N3Tajdm2ABN/CuEpXX9PEREREZFmCm5FRERE5IRQWNVIdaMDi9lEv+iArr1ZYw18dj+U7gK/CDjt/7r2fiIiIiIiP2L1dAEiIiIiIu2RUVQDQFKYH97WLlwgbNdS+OznUJltPD/7CfAJ7rr7iYiIiIi0QcGtiIiIiJwQMoqqAUiJ6qLZtrWlsOgR2Pye8TwkEWY/BylndM39RERERESOQMGtiIiIiJwQdjXPuO3X2cGt2w1bP4Qvfgl1JWAyw4Sfwhm/Bi//zr2XiIiIiEg7KbgVERERkRNCS6uEvp0d3H72c1j/hrEfNRjm/APix3buPUREREREOkjBrYiIiIicEHYXd0Fwm7vBCG1NZpj+MEy9H6xenXd9EREREZFjpOBWRERERHq88tomSmqaAEiJ7MTg9runjMdhV8Dpv+y864qIiIiIHCezpwsQERERETmajObZtnEhvvh7d9Lcg7yNsPNLY7btaQ91zjVFRERERDqJglsRERER6fFa+tumdGabhO/+YjwOuxwi+nbedUVEREREOoGCWxERERHp8VoXJuusNgl5qbBjoWbbioiIiEiPpeBWRERERHq81uC2s2bctsy2HXoZRPTrnGuKiIiIiHQiBbciIiIi0uO1BLf9ojshuM3fBDs+B0yabSsiIiIiPZaCWxERERHp0bLL6sitqMdsgv5Rgcd3MXs9fP2EsT/0Uojsf/wFioiIiIh0gU5akldEREREpGt8sTUfgAm9wwn2sx3bRcr3wg//gY1vQX05YILpv+i0GkVEREREOpuCWxERERHp0RZuKQDgvGExHTvR5YI9X8PaV2HnIsBtHA9OhDN+DZEDOrdQEREREZFOpOBWRERERHqs3Ip6UrMrMJngnKHtDG7rKyB1LvzwKpTt2X885QwYfzv0OxvMli6pV0RERESksyi4FREREZEe64stRpuEcclhRAX6HHlw4TZjdu3m98BeZxzzDoKR18K4WyGibxdXKyIiIiLSeRTcioiIiEiP9cVWo03C+cN6HXng+jdgwX37n0cNhvG3wbArwDug6woUEREREekiCm5FREREpEfKr6xn/b5yAM49UpuEplr46vfGfv9ZMPkeSJoMJlM3VCkiIiIi0jUU3IqIiIhIj/Rl82zbsUmhRAcdoU3C+jegrhRCk+HKt8Gij7giIiIicuIze7oAEREREZG2fLHFCG7PO1KbBHsDrHze2J/6gEJbERERETlpKLgVERERkR6nqKqBH/aVAUdpk5D6NtQUQFAcjLi6m6oTEREREel6Cm5FREREerjvdhazbGexp8voVl9uK8DthlGJIcSG+LY9qLEGvnva2J/yc7B6dVt9IiIiIiJdTcGtiIiISA9WUNnALW/8wI2vr2VDVrmny+k2n2/OB+D8I7VJ+P6fxmzb0GQYc2P3FCYiIiIi0k0U3IqIiIj0YF9tL8TpcuN2w0MfbKLB7vR0SV2uuLqRtXuP0iahugBWPmfsn/UYWL27pzgRERERkW6i4FZERESkB/sqvah1f3dxLc99tcuD1XSPRc1tEkYkhBAf6tf2oK9+D/Y6iB8Hgy/q1vpERERERLqDglsRERGRHqquycGKjBIA/u/s/gC8smwPm3MqPFhV11u4xWiTcN7hZttmLIXUd4z9c54Ek6mbKhMRERER6T5WTxcgIiIi7VdY1YDbDTHBPp4uRbrBil0lNDlcxIf6cteMvuworGHBpjwe+mAzC+6Zipe7CXJ+gJ1fGo8NldBUZyzSZfMzNi+//fs2X/DyNx5tfhDWG1LOBN8QT7/VVqU1jazeUwrAeW31t22ohE/vNfYn3AkJ47uxOhERERGR7qPgVkRE5ATRYHcy558rcLpgxS9n4GOzeLok6QIul5tF2wqIDvZhaXohADMHRmAq3c2TAzMZsvMLEsv2UvPXQsIassHtOr4bmq2QMAESJ0LiJKP1gAeD3MVphbjcMCwumISwH7VJcLng8wehKhfC+sCZv/VMkSIiIiIi3UDBrYiIyAlic04lhVWNAORV1NMnMsDDFUlnq2108MD7qSzaVth8xM1s8/f8csdHsDGPQOBOAAtQ3zzEPxL6zoSUMyAw2phJ62g0+r/a68BeD021xqO9HuzN+001kLMOirfDvpXGBoAJYkcZLQiSJnXzT2B/m4RZw37UJsHlhE/vgS0fgMkMF/7LmD0sIiIiInKSUnArIiJyglibWdq6X1DVoOD2JFNZb+eqV1aTnl+Fl8VMH1Mej5tfYYJ5O9QBVl+IGghRg/lfdhDz80MgahCv330BNutxzL4u3Q17V0DWasheDWV7IG8DvD4LJt0Fw6+EqEFgsXXWWz2s8tomVu1ubpMwtBfUlRm15G6AjK+M+kwWuPhlj4TKIiIiIiLdScGtiIjICWLt3vLW/cKqBg9Wcvy+21nMq8v28OTFw0gM9zv6CaeA/63PIT2/ihh/E/8buYG41OcwORtxWXwwn/YgTL7H6E0LTK9u5Im/fUdFgZ2Xl+3h7jP6HfuNw1OMbcyNxvPqAvjqD5D6Nnz/T2Oz+kCvERA7GuLGQNxoo1VBJy8K9vLX27jKtISZQbtJfufXUJ558ACzFS57DQZf2Kn3FRERERHpiRTcioiInAAcThfr95a1Pi+obPRgNcenoq6J+99Lpay2iblrs3h41kBPl9QjrNhZxGnmTTzv/R4h6/caB1POxDz77xCSeNDYyEBvHps9hJ+/l8pzX+3iguGxJEd0UtuAwBi46AUYdAGsfhHyUqGxErLXGFuL+PFw9hOQOOH47+lykrfqPa5b9xvibSXQhLEBhKU0h8VjoO+ZEHEcIbWIiIiIyAlEwa2IiMgJIC2/itomZ+vzE3nG7dOLdlBWa6RyG7LKjzL6JOdyQXUejn1r+Pm+JxnhlWG0RfCLgLP/ACOuPuys1gtHxvLuD1ms3lPGkrRCbjutT+fWNmCWsblcULYbctcbLQty10PBZshZC6+dbfTWHXUdDDivdUZwuzgaIecH2LUE9+b3ia3OAxOUWyIInXY7xI81eu36hXXu+xIREREROUEouBURETkBrM0sO+h5QeWJGdxuzqlg7tqsg547nC6sFrMHq+oGjiYj7MzfZPSQbd0ywdmIFRhhgkZseE24DdPpvwTfkCNe0mQycebAaFbvKWNNZlnnB7ctzGZjlmtEPxhxlXGsKh+++SOkvgO7vzY2s9XohRsxAPzCjRDX5QCnHZxN4LKD02Esila2x+it6zRmjpuAcncA77jP4ZK7/kJoZETXvBcRERERkROIglsREZETwJrm4HZUYggbsyooOAFn3H63s5gH3kvF7TZmi36zvYiqBgfbC6oZGhfc+Td0OoywtGIfVOVBQ5URGtr8jGDRy88IG81WMFsO2G9+bm+A0gwo2QUlO6EyxwgjfUPA4g0WK5htxqJdLedZbM3Hml9rqITSXVC8AxyH+TUzWynziuWdmtEUDLiBP846s91vcXxvYzbqD3vLcLncVDXY+XBDLt5WM+H+XoT5exEe4EWYvzchvjbM5k7qSRvUCy78J0x7EFLnwqZ5UJkNBVuMrb38o2hKnMKjO1KYXzeM+84ZSqxCWxERERERQMGtiIj0EEXVDfxnRSbXjk/SYlU/4nK5+aG5v+2cEbFszKo4oVolOJwunl2yk399uxuAQb2C+M0Fgymvs7NsZzEbs8qPL7h1u6GmCMr37t+KtsGeb43gtKfwDTP6tEb0Mxb2atmCE7jlpTWkVlTwl0H9O3TJIbFB+HlZqKy3s7Oomv8sz+SD9TltjrWYTYT62QhrCXT9vZk+IJIrxiYc+3sK6w1n/Bpm/MoItvM2QEU21JUYrRCag2y32Up5I2SWNVLSaGHy2DEExg2E0N48uSCN9+v20ifSn9umddGsYRERERGRE5CCWxER8Ti3282D729i+a4SVmaU8MldU7F01szAk8Cuohoq6uz42iycNSiaxxekUVTdiMvl7rwZlF0kr6Kee+dtZN0+o5ftdRMTefT8wfjYLIxKCGkObiu4flIHL9xQCcufhZ2LjKDWUd/2OJ8QiBwIQbHgG2rMsrXXQ12pMaPW5TC+wu9yNu8bW3VdA+UNLmL7DMUaNcAIW0OTjHMaKo2v+LucRhsAl7350bH/saUtgM23uc3AAAhPabNfbWWdnc05FQBM69ex2aZWi5kxSaEs31XCkm2FfLopD4DT+kdS2+igrLaJkppGqhscOF1uSmqaKKlpaj3/8y35TOgdRlL4cS5sZjJBSIKxNatqsLMqo5Tlu4pZtquY7LL9v0YT7aG89ZNkUveV8+b3ewH4w4VD8bKe5C0zREREREQ6QMGtiIh43JdbC1i+qwSArblVzF2bxfUTkzxcVc+xtnm27eikEHoF+2A2YYRwtY1EBfp4uLrD+3p7IQ+8v4mKOjuB3lb+dOkwLhge2/r6qMQQoIMLlDkdsOEN+OZJI3xtYTJDULwRroYmGzNBk6cZM1zNlg7VXVDZwJl//ZbaJidP9R7GleMSO3R+R+SU1/HCN7txuSEl0p9ewR1Y3KvZ+OQwlu8q4YVvM2h0uBgYE8h/bx6H6YCQuMnhoryuidKaJspqmyitbeT1lXtJza5g3tpsHp418LjfS1F1A7/6aCvp+VW43W4Kqxtxutytr9ssJsYkhbIlp5LVe8q45Y0fWJNZhssNFwzvxZS+apEgIiIiInIgBbciIuJRtY0Ofv9ZGmB8hT49v4qnv9zOrKExRAR4t+8ilblQnmnMdLT5HVNY15O1LEw2Pjkcq8VMRIA3RdWNFFb2zOC2yeHi6UXbeXV5JgDD4oL55zWjDpnVOTIhBIC9pXWU1TYR5u915AtnLIVFj0JxuvE8vB/MeAR6jYTgBLAe5fx2euLzNGqbnACk5VV1yjUP5HK5WZ5Rwlvf7+Pr7YW0ZJuXjI4/puu19LltsLsAuGZC4kGhLYCX1Ux0kA/RQft/v3hbLdz59nr+tz6bB2b2P67ZrltzK7ntzXXk/2jRvD4R/kzrF8Fp/SOZ2Cccf28ri7cVcPtb61v/seasQVH8+dLhx3xvEREREZGTlYJbERHxqOe/3kV+ZQPxob78785JXPHy92zLq+L5r3bx+wuHHnqCo8lYcCp7LeSsNR6rcg8eE9gLRlwFU+4zvh5/AnO73azNNGaWtgR0McE+FFU3UlDVwDC6YFGv45BdVsc98zaSml0BwE2Tk3nkvIF4Ww8N0kP8vOgT6c+e4loWbSvgnCExhPrZDgodLa5GTLkbYMXTkLHEOOgbCqc/AmNvMXqodqKVGSV8tjm/9XlafucFt7WNDuauyeLtNfvYV1rXenxySjjXTUzi3CExx3TdEQkheFnMNDld+NosXDQqrl3nnTkoiqhA4x8BFqcVHDQbuiO25lZyxcvfU9fkpE+kP09cNJQAbyvhAd7EhRw6g/jsITE8Mmsgf1+6i5unJPN/Zw/o8S0/REREREQ8QcGtiIh4TEbzYkoAj80egr+3lYfOGcBNr//Awi0FPDZ7yP5Ap7Ea5v/M6GnqbDz4QiYzhPYGqzdU5UF1Pqz4G2z7GK58G2KGdfM76zxZZXUUVjVis5haWwsYsyYrKehhC5R9ubWAX/xvE1UNDoJ8rDx9+QjOOUoYOToxlPLifD74+EPWzC+it6WY/l7FJJuL6OUq5AJnKWwyxrpMVkoH30jkBb/pkkB+Q1Y5972bCsCUvuGszCglPb+603oJ//y9VJakFQIQ6GPlsjHxXDshib5RAcd1XR+bhZEJIazdW8bsEb0I8mlfmG2zmLlyXAL/+DqDd1ZnHVNwW1rTyB1vraeuycmkPuG8dP0Ygn2Pfv87pqdw67Q+6mUtIiIiInIECm5FRMQj3G43v5m/DYfLzVmDojhrcDQAk1MiCPS2UlLTyKacCkYlhkJTHcy9CvatME72DYOE8RA/zniMHQ3ezeGXowl2fgmLHzUWrfr3TLjsNRh4nmfe6HFa09wmYUR8CD42Y9ZqTPPX3Qsre0Zw63a7+cNn6by20gjhRyaE8I+rR5EQ5nfkEyuyeLTuLzzj89nBx53NW7Mqtx8rXEN52nEluZviWHGuL1FHqGVTTiU/ZJZxxbiEdoWIAB9tyOHhj7bQ1Nwj9h9Xj2bik19R0+ggp7yexPCjvJc2fLezmPLaJi4aFcfeklqWpBViMsETFw3l4lFx+Hl13sew+87qx+srM7nvrP4dOu+q8Ym88E0G3+8pJau0rkPv0+50cffcjeRW1NM7wr/doW0LhbYiIiIiIkem4FZERDzi0015fL+nFG+rmd/NHtJ63Mtq5rQBkXy+OZ+v0osYFRcI719vhLbeQXD1u5A02VjFvi1WLxg8B5Knwke3GX1RP7gRrv0A+pzePW+uE7X2t21ukwBGqwSgx8y4/XZHcWtoe9u03jx0zsC2+6W6XGCvhYKtsGkebH6PEEfzewhOwBWSRJ1/IpU+sRRaY9nniuCbjDqIGkCT001jTgVNlQ18sC6Hu2b0PejS9U1OFmzK463V+9iSWwlAZmktT1585NnWTpebpxft4KXvdgMwc3A0f7tyJAHeVvrHBLA1t4q0/MojBpqVdXZW7i5h1e4S+kUFcsOkJFZmlHLz62txuSHA28oPzQvMTe8fybUTOn/hvSl9I45pca+4EF8mp0SwIqOEBZvzDvm5HskfP0/n+z2l+HtZeKWDoa2IiIiIiBydglsREel21Q12/vi5scDU3TP6HjIz86xBUXy+OZ+l6YX8n88nkLEUt82PF2OfZOdqP65ylTGhd9ghCzAdxC8Mrn4P/ncTpC+AedfA+X+FQbP3z849AbQEt+MOCG5bFpgqPJbgtqYINr4NldnQWAM2X9zB8ex1hPFltpUacxD3ntEXbwvgdu3fMIFviPFz9Q4GsxkcjVCZw57ln3O3ZTNTesEkuxd8WGVcu7H64K2pBnAfXE/SVJj1Z4gZhhkIaN7igGF2O2bnQs47bxg2m43/rc/h/z7YxLs/ZPHT6SmYzSb2FNfwzposPliXTVWDAzBmcjpdbhZuyeex2UMOu+hWdYOdn7+bylfbiwC4a0YKD87c3291UEyQEdzmVXHu0F6t5zmcLjblVLBsZwnLdhWzKbuidYExgO93l7I6s7T12GMLtlHXvNjZNeMTO/5r1sVmj+hlBLeb2h/cfrAumzdW7QXg2StH0i86sAsrFBERERE5NSm4FRGRLlfdYOfR+VvJLKnlL5cN54N1ORRVN5Ic7sdtp/U5ZPzp/aMwm8BauAn3d09hAt6NfpC/pIcBecxPzaNfVADXT0ri4lFxBB6up6fFCpf+B+ZeCXu+gfl3wucPQP9zYdhl0Pcsoy9uD9BWH9WCygayyuowm2BM0v6eri2tEgra0yrB6YDi7ZCfCntXwtYPD+kRbAJ6Az9tObDnyJd0myxUu30JpBYTbn4CYANKmrej8Q6CQXOMBeSSpx5+9vSPXDC8F79fsI3ssnoWpxWyaFsBH2/cvzBdQpgv101I4pLR8cx6bjklNY2szChhxsBDGytkldZx65s/sLOwBi+rmacvG86FIw9e1GtwbBCsh7T86tZjm7IruPmNHyirbTpobN+oAIbHB/Npah5fbisAYER8MMXVjeSU1wPGr9sZbdTiaecO6cWj87eyvaCanYXV9D9KCPv97lJ+PX8rAPed2e+ofYxFREREROTYKLgVEZEulVVax0/++wO7imoAuORfq2h0uAB4/MKhrX1bDxTq78WkpAB+l/ciJpeD3ZFn8UjGQMwmOG9YL75KL2JXUQ2//WQbT32xnYtGxXHDpGQGxLQROFm94aq5sOp52PwelO2BbR8Zm0+wESCOvw16jejSn8ORLEkr5K65G3h8zhCuPmBG5trmr9cPjg06aMGpmGAjbG6zVUJjDaR/CrkbjLC2YCs46g8eEz8OUs4EL38aaqv4dNlaeplK6etdjtVejRszYQE+WC0WY+E3k8loc1BfDvZaTG4nQRi/ng6zD9sdMWRbkzl38hhMPoHgHWiEs14BzfsHHPMONH5N2hnWHsjHZuGS0fG8sWovP3tnPS63cZkzBkRx3aQkpveLbA2/LxjeizdW7WXBprxDgtuy2iYueXElJTVNRAV688oNYxmZEHLI/Qb3CgIgPb+q9diHG3Ioq20iyMfKtP6RnNYvgmn9IokN8QXgsjHx3D13I742Cy9dP4ZN2RXc+fYGAK4cl4DV0vbsX08K9rMxvX8kS9OLWLApjwfPHnDYsd/tLOb2N9fR5HBx9uBo7juzXzdWKiIiIiJyalFwKyIiXaaqwc7lL6+isKqR6CBvksL8W8PIWUNjmN4/8rDn/tz3S/qbcyl2B3NZ9mWAiV+eO5A7pqdQ1WDno/U5vLV6H7uLa3lnTRbz1mbx+b3TGNQcth3Eyw9Ofxim/xLyNsCWD43gtjofNr4Fm9+H6z+G5Cld9JM4svd+yKLJ4eIPn6Vx+oBIegUbIeDazFIAxieHHzQ+qnnGbXWDg7omx/5FrorS4b3roDTj4Bt4BRrBdOxIo1VE4sTWl7IKq/nF18sI8bOx8dczufbfa1i1u5Qze0fxn5vGHVJrQ30t5/35UyxNVZS6gyg3BeJ2m7hzUgqzzhrYST+Rw7t2QiJvrNqLyw1h/l68dN2Yg/r/tpg9wghuF20roMHuPOgfCF5bkUlJTRN9Iv2Ze+vE1p7BPzaw+fdSbkU9lXV2gv1sra0rnrp0OLOG9TrknMkpEax+5Excbjc+NgsxQT5cMiqOdfvKuXZCz2uT0GL2iNjW4PaBmf3bbEOyJK2Qu97ZQJPTxZkDo3j+6lGHzBIXEREREZHOo+BWRES6zLOLd1JYZbREeO+OSYT5e/HXxTvZnFNx0IJkh6jMZWz2GwD8w3YLvj5RXDUqjtub2yoE+di4aUpvbpyczPd7SvndJ9vYVVTD97tL2w5uW5hMEDfG2M7+A+xbCcuegczvYN7VcPNCiBnaiT+Bo7M7XazeY4SBdU1Onvg8nReuGQ20vTAZQKC3FX8vC7VNTvIqGugbFQBpn8LHdxqLfwXGwtBLoNdII6wNSzF60rahqMpomxAZ4I3JZOL3Fw5h1nPL+Wp7EUvTCjlrcPRB47/dXcWexiBC/cKpanDgbm7kOnvEoSFmV+gXHchNk5PZVVTNny8Zfkh/5BajE0OJC/Elt6Ke33+WRp8If84eHEOwn43/Nvdm/cU5Aw8b2gIE+9qID/Ulp7yetPwqBvUKZHuB0TZhXBthcYsDe+qaTCaevXJkx99oNztrUDQ+NjN7S+vYklvJ8PiQg17/fHM+9727EYfLzayhMTx31ajD9g4WEREREZHOoeBWRES6xLa8St78fi8AT1w0rHVBrYdntWNW5tLfYXLUQcJEfn/L7/j9Yb5WbzKZmJwSwQXDY/nb0p1sya1sf4FmC/Q+zWgb8NYlkLUK3r4EfrIYQpPbf53jlJpdQU2jA38vC/V2J59vzueqccUMiQ1mZ6HRjmBccuhB55hMJvpGB7Ipu4L0/Cr6Zr4DX/wScEPv6XDZa+Af0a77F9cY7Raigoz2C32jAvnJ1D689N1uHluwjSl9I/D12j9bdcGmfAAuH5uAw+nmtZWZpET6t7YV6A6PzTlC6N/MZDJxwYhevPzdHuauyQLg70t3MaVvONWNDvpHB3D2j0LptgzuFUROeT1rM8uoaTQWP+sT6U9EQM/ojdxZ/L2tnDkoms8357NgU95Bwe3HG3N48P1NuNxw4chY/nr5iB7Z8kFERERE5GSjT90iItLp6puc/PrjrbjccP7wXkzt174QEYDstbDlA8AEs55qVy/UYfFGaNih4LaFzReungdRQ6Cm0Ahxa4o7fp1jtHyXsZrX6QOjuGFSMgB//mJ762zbflEBhLcREg6PCwYgeO1f4YtfAG4Yd6vR8qGdoS3sn3EbFbh/5uk9Z/SlV7APOeX1/Ovb/W0XahodLE0vBGDOiFgeOmcA953Zj79eMbLNr9Z72p2npXDT5GQuHR3PsLhgahodLNpm1H/XjL7t+pr/uUONhbfeX5fN6j1G64oJR5hteyKbMyIWgM825+Nqnkk9b20WDzSHtleMjefZK0YqtBURERER6Sb65C0iIp0qv7Key19eRWp2Bf5eFn5z/uCOXeCr3xuPo641vubfDkObQ8zdxTWtsyI7xDcErvsQghOhbDfMvRwaqzt+nWOwMsMIbqf1jeDeM/vh52VhW14Vz321Czj8V/KHxQVzsXk5p+X+2zhwxm/gvGeMmcQdUFTdEtzuD4f9va389gLj1+3l7/aQWVILwOJtBTQ6XPSO8GdIbBC+Xhbun9m/zYW9eoJQfy8emzOEv14xgg9/OpmrxycA0DcqgAuGx7brGucN60Wwr43cinrmrTVm7rbVU/dkML1/JIHeVvIrG1i3r5x312bxyEdbcLvhuomJ/PmS4VjU01ZEREREpNsouBURkU7z7Y4i5vxzJVtzqwjz9+L1m8cfsYfoIfZ8B3uXg8ULpj/c7tOiAn3oFeyD2w1peVXHUDkQ1MuYreoXDnkbjUW+HE3Hdq12qmqwk5pdAcDUfhGE+Xu1LmCVnm+8j8PN7hxn28OfbUZo6576IO5pD1JY3di6kFZ7tQS3kYEHz+o9d2gMp/WPpMnp4nefbqPB7uRvS3cCcPGouB45w/ZIvKxmnrx4GJ/cNYX3bp/Y7gDSx2bh0tHxgNGDGGB87/AjnXLC8rFZOHuIMcP46UXbeXT+VgB+MrU3f7hwqBYiExERERHpZgpuRUTkuNU2Ovj1x1u46fUfKK5uZGBMIJ/cNaVjMxPdbvj6CWN/zE0QktChGlpm3W7OqejQeQeJ6AvXfgA2f9jzLcy/E1yuY7/eUazeXYrT5aZ3hD/xocYiW7dN63PQok/jktv4GVbmkrz0NrxNdhY7x5A5/Oc8viCNCU9+xZQ/f83YPy5pnR16NEVVRo/bHwe3JpOJx+cMwctiZtnOYm56fS3ZZfXEBPnwk6m9j/Ede5bJZGJEQkibrSeO5JoJ+38vxoX4Ehfi29ml9RhzRhozkX/YW47D5Wb2iFgePX/QCRfUi4iIiIicDBTciojIcVm/r5zznl/OO80LQN08JZn5d00hIcyv/Rdxu2HNS5CzFqw+MO3BDtfR0vP1mPrcHihuDFz5FphtsPVD+PJho74u0NIvdkrf/TM4o4J8uGqcERQmhPkS++OQsKkO3r0GU00h+yxJ3G//GcszypjbHNR6WczYnW5+M38ra5p7sh5Jcc2hPW5b9I7w547pfQBYvcfoufubCwbj731qrW3aNyqwdebzydrftsXklHDC/L0AY2G2v1w6XKGtiIiIiIiHKLgVEZFj0uRw8fSi7Vz+0ir2ldYRG+zD3Fsn8LvZQ/CxdaDPakU2vHWxEZACTPwZBMZ0uJ6h8Z0U3AL0PRMufsnYX/syLP/r8V/zRwoqG5i/MQ+AOSPiDnrtnjP6cdagKB6cOWD/QXsD7FwE714D+angF86HA56hFl/+vnQnTQ4Xg3sFseOJc5k9IhaHy83P3tlAXkX9EesoblmcLKjtWag/O71v6wzTaf0iOG9Yx39tTga/Pn8Qk1PCuXVaH0+X0qVsFjOPzBrIaf0jefn6Mfh6daxnsoiIiIiIdJ5Ta8qMiIh0iuLqRm58bS1pzX1YLxkdx+9mDyHY19b+i7jdsOG/sOhRaKo2Ztqe8RuY+NNjqmlY84zbPcW1VDfYCfTpQC1tXvAyqC2BL38JX/8BNr8Pg2bDoAug10g4zlmIryzbQ5PTxfjksENaSkQGevPvG8dBfblx3+2fwa6lYDcWCcNshSveJKEkCTZspry5p+01ExIxmUz85dLh7C6qIS2/ijveWs8Hd05qM0yvb3JS3byY249bJbTw9bLwr2tH89bqfTwws/8pO/tyeHwIc2+b6OkyusXlYxO4fGzHWpWIiIiIiEjnU3ArIiId9vrKTNLyqwj1s/HkxcOYNaxXxy5QkQ2f3gN7vjGeJ0yAC1+AiH7HXFNEgDdxIb7kVtSzLa+KiX06YQGpiXcaofK3T0HJDli+A5Y/A8EJMPACI8RNnAzmjn2BpaSmkblr9wFw9xl9Dx1Quhu++IXRZ9fl2H88KA4Gng8jr4HYUQzz2b8Qm5+XhQub+5P6ell45YYxzPnnSrbkVvLIR1t49ooRh4SuRdVGf1sfm5nAI7Q/GJEQwoiEkA69RxERERERETk+Cm5FRKTDNjUvAPaLcwd2PLRNXwAf/3T/LNszfwsT7gTz8X8le3BsELkV9WzP76TgFuC0h2DcbbBrCaR/ChlLoTIb1rxobP1nweVvgO3QHrFtabA7+f2CNBrsLkbEBzOtX8TBA9I+hU/ugsbmUDZqsBHWDjz/kJm+fSMD8LGZabC7uHBk7EGzjOND/fjnNaO4/j9r+XhjLkNigw75mn9x9f7+tqfqTFoREREREZGeSsGtiIh0iNvtZkuO0Ud2eHNf2XZrrIZP7jZC24SJzbNs25hxeoz6RPgDsLe0rtOuCYBvCAy/3Njs9bD7G6N9wdYPYecXMPdyuGoeeAcc8TKbsit44P1UdhcbLQ/uP7D1QOlu+Or3kDbfeJ44Ceb844izkK0WM2cOiubr9CJumtz7kNcnp0Tw6PmDeHxBGk8uTGdgTBBTDwiKi1qD27bbJIiIiIiIiIjnKLgVEZEOySqro6rBgZfVTP/owI6dvO41aKiA8L5w88JOmWV7oKRwI7jdV1rbqdc9iM0XBp5nbCOvgblXQuYyeON8uGouBMcdcord6eKFbzL4x9cZOF1uogK9eeqy4Zw+IApy1hsLoG39CFx2wAST7oKzHgPL0fv0/v3KkdQ1OQ/bX/imyclsy6vif+tzuHveBhbcPZWEMD8AiqqMVgmH628rIiIiIiIintOxpnwiInLK29w823ZQryBslg78NWJvgFX/NPanPtDpoS1AcrgRSHb6jNvD3nAq3PAp+IZBfiq8cjrs+AKc+/vSZhTVcNmLq/j70l04XW4uHBrOkpt7M6PhG3j1DPj3GbD5PSO0TTkT7lwB5/yxXaEtgM1iPuKicCaTiScuGsqIhBAq6uz8/rO01tc041ZERERERKTn0oxbERHpkK25RnA7LC6oYydufAtqi4yFvYZf0QWVQXJzq4TssjocThfWjgTLxyp+DNz+Dcy7Boq2wbyrwC8CEsazt9ZGWlYpD7nLifGpJNFWhVdGFWQccL7FC4ZcAhNuh7gxXVKij83C72YP5pJ/rSI1u6L1eGtwG9S+/rwiIiIiIiLSfTw643bZsmXMnj2b2NhYTCYT8+fPP+L4/Px8rrnmGvr374/ZbObnP/95t9QpIiL7tcy4HR4X0v6TnHZY+byxP+W+ds8m7aiYIB+8rWYcLje5FfVdco82hSbDTxbDhJ+CXzjUlcCOhSTnfMIc8wqmWrbRlxy87M0Ljlm8jHYRMx6F+9Pgkpe7LLRtMTDGaGtRXN1IWW1T6z6oVYKIiIiIiEhP5NEZt7W1tYwYMYJbbrmFSy655KjjGxsbiYyM5NFHH+Vvf/tbN1QoIiIHcrncbM0zgtuhcR1YmGzLB1CZBf5RMOq6LqoOzGYTSeF+7CysYW9pXWvP227hHQCz/gxnPwH7VrA9bRPzv08j2M+bOy+YjCkwBgKijc03FFoWJesmfl5WEsP8yCqrY2dhNRP7hLfOuFVwKyIiIiIi0vN4NLidNWsWs2bNavf45ORknnvuOQBee+21ripLREQOY19ZHdUNDrytZvpFB7TvJJcTlj9r7E+6y1jcqwslhfuzs7CmeYGyyC69V5ssVuhzOh/viOZlZ1+uHJCAacTw7q+jDf2jA8kqq2NHgRHcFlcbi5Opx62IiIiIiEjPo8XJRESk3TbnVAAdXJgsfQGU7gKfYBj3k64rrlnLAmWZJbVdfq8jWZtZBsD43mEereNAA2KMsH1HYTUOp4vS5pYJUYHqcSsiIiIiItLTnPSLkzU2NtLY2Nj6vKrK6C9ot9ux2+2eKktE5IS0ObscgKGxge37M9TtxrrsGUyAc+xtuMw+0MV/9iaEGiFkZnGNx/6cr2tysKW5F/DohKAe8/dNSoQRau/IryK7tAa3GyxmE4Feph5T44FaauqJtYmIiIiISOc6VT7/d+T9nfTB7Z/+9Ccef/zxQ44vXrwYPz8/D1QkInLi+m6bBTDhLNnLwoWZRx0fVbmJSYVbcJi9WVzZG/vChV1eY0GlCbCQllXMwm64X1t2VppwuCyEeLnZtOobNndvO9vDKqwFsJKWW84/P/oWsBDv52LRl194trCjWLJkiadLEBERERGRbnKyf/6vq6tr99iTPrh95JFHeOCBB1qfV1VVkZCQwNlnn01QUJAHKxMRObG4XG5+teFrwMm1505lQEzgkU9wu7G8+QIApnE/YeZZV3Z9kcCIinr+lbaccruZs8+ZibW9LR2aLd9VwqacSi4YHkPyYRY3K6ttYtXuUlJzKjl/WAyjEkJosDv5z8p99Ivyx1xQDWl7mDawF+ef3zP62wI0OVz8detX1DthbWUAUM+10wZy3uQkT5fWJrvdzpIlS5g5cyY2m83T5YiIiIiISBc6VT7/t3QDaI+TPrj19vbG2/vQRVdsNttJ/ZtARKSz7S6uobbRiY/NzMDYkKMHontXQs4asHhhmXoflm76Mzcx3IqX1UyTw0VxrZPE8PYvvNVgd3LPu5uobXLy3Ne7mdYvgusmJjG9fySbsitYtquYZTtL2JpXidttnDN3bTa/PHcgn27KY3Nze4RAH+Ov14kpET3q7xqbDfpEGou3ZZfXYzLBhaPie1SNbdHf2SIiIiIip46T/fN/R96bR4PbmpoaMjIyWp9nZmaSmppKWFgYiYmJPPLII+Tm5vLmm2+2jklNTW09t7i4mNTUVLy8vBg8eHB3ly8ickpp6dk6uFdQ+2axLn/GeBx1HQTGdGFlBzObTSSG+ZFRVMPe0loSw9vfFmf1nlJqm5x4WczYXS6W7yph+a4SzCZwuQ8eOzAmkGBfG2syy3ji83QAAryt1DQ6qG5wADChBy1M1qJ/dCA7C2sAo77oIC1MJiIiIiIi0hN5NLhdt24dM2bMaH3e0tLgxhtv5I033iA/P5+srKyDzhk1alTr/vr165k7dy5JSUns3bu3W2oWETlVbck1gtvh8SFHH5y7AXZ/DSYLTLmvawtrQ3K4PxlFNWSW1HJa/8h2n/dVehEAl46J52enp/DOmizeX5dNWW0TYf5eTOsXwWn9IpnWL4KoIB9cLjfPf72Lvy/dRf/oAP5z4zg25VTwfx9sIjbYl5TIgK56i8dsQHQgn5EPwOwRsR6uRkRERERERA7Ho8Ht6aefjtvtPuzrb7zxxiHHjjReRES6TsuM26FxwUcfvPyvxuOwyyE0ueuKOoyhcUEsTS/ku53F3DjZuP+2vEr6RQXiZW17trDb7ear9EIAZg6OIiHMj4dnDeTnZ/WjsKqBhFA/zOaDVxkzm038/Kz+XD0+kXB/L6wWMwlhfkxJicDLasZk6iGrkh2gf3NvYqvZxKyhvTxcjYiIiIiIiBxOx1ZsERGRU5LT5WZbXsuM26MEt0XbYftngAmmPXDksV3kguFGILlsZzEVdU18uD6H859fwTWvrqbB7mzznLT8KvIqG/CxmZmcEtF63MdmISnc/5DQ9kDRQT4HtY8I9ffC37tntpGf0jeCccmh3Dk9hTB/L0+XIyIiIiIiIoeh4FZERI4qs6SG2iYnvjbL0b/+v+JZ43HQBRA5oOuLa0PfqEAG9QrC4XLz2eZ8nvtqFwDr9pVz99wNOJyuQ85paZMwrV8kPjZLt9bbnQK8rXxw52T+7xzP/NqIiIiIiIhI+yi4FRGRo2rpbzskNgjL4WaeNtXB13+ELR8Yz6c92E3VtW32CGPW7VNfbCerrI4gHyveVjNL04v41cdbDmm9s7S5TcJZg6K6vVYRERERERGRH1NwKyIiR7UxqwI4TH9btxvSF8ALE2DZX8DtglHXQ+yoQ8d2o9nDjYW3qhsdANwxPYV/XD0KswneX5fDM4t3tI7dmlvJ5pxKzCaYMVDBrYiIiIiIiHhez2zAJyJyMrPXQ9b3kL8JaoqgptB4rK8A70DwCzM23+ZHv3BIngahSd1W4p8WprMhq5zfXziUuiYH89ZmATChd9jBA0sy4ItfwO6vjOfBCXDOkzBodrfVejgJYX6MSgxhY1YFQT5WbpiURKCPjScvHsbDH23hhW92ExHgzc1TevOvbzMAmD0ilqhAHw9XLiIiIiIiIqLgVkSkazmaoDoPKnMgdz3s/hqyVoOjoWPXMVth9A1w2kMQFNs1tTbbklPJy8v2AHDpi6vwtVmwO93MGhrDuUNjjEGORvj2z7DqH+Cyg8ULJt9rtEfw8uvS+jripsnJbMxK5d4z+xHoYwPgqvGJlNQ08szinfz+szSq6h18sbUAgJ+d3teT5YqIiIiIiIi0UnArItIZ3G7IT4Xtn0PJLiOorcqF6gLAfej4wF6QNBmC4yEg2th8QqCxCurLoK4c6kqN/bJMyFkL616DrR/BxS/DgHO77K388xtjIS8/Lwt1TU7qmpwMiA7kmctHYDI197f94hew/g1jv+9MmPUUhKd0WU3H6sKRcZw+IIpgX9tBx++a0Zfi6kb++/0+/rZ0JwDnDIlmQEygJ8oUEREREREROYSCW5ETUWM1NFSC0w4uJ7gczdsBz5124xEgMAaC4sAnyLN1n2xcLihKg20fw7aPoGxP2+Ms3hAcBxH9oc/p0GcGRA4A02EW+WrLvlWw6FeQtxHmXQnT/g9m/BrMnduqfEdBNYu2GYt0ffjTyXySmseGrHKevmw4/t7Nf2XsWro/tL30PzD00o69l27249AWwGQy8dvZQyipbeLzzfkA3D2jX3eXJiIiIiIiInJYCm7llNXkcPHyd7uZmBLOuOSwo5/gKW43FO+AzO8gcxnkb4bKrGO7VsQAY5ZneIox4zOwlxHqBvbqUV9v7zJuNzRUQE0xlGdC6W4o220ErpW5Rq9ZRyNYbEZrAosNzDawWJsfW457GaF4yU6w1+2/vtUX+p8NCRONmbQtm1/E8QesSZPhlsWw5Dew5iVY/gxUZMGFL4DV6/iufYCWXq+zhsYwqFcQg3r9KOyvL4dP7zH2J9wJwy7rtHt3N4vZxLNXjCDC34uoIB+Gxbex8JqIiIiIiIiIhyi4lVPWF1vz+euSnVi+MvHbCwZzw6Sk/V8D725utzGDtrbY2KoLjECxeAdkLoeagkPPsXg3B4kWI0w0N4eLLc9bQkaXw7heQwWU7DC2tvgEQ+RASJoCCRMgeogROvbgmZRtcjqMXrJZ30PBFqgtgtpSqCsxWg+0zEI+Ekd9u2/ntvpgSjnDmHXa/1zwDjiO4o/C6mW0JOg1wghPt7xv/H65am6nBO+ZJbUs2JQHGK0EDuG0w4e3GT17w1LgzN8d9z09zdtq4fELh3q6DBEREREREZFDKLiVU9a6veUAOF1ufvfpNjKKanh8zhDM5qMHlUvSCnnpu9389oLBjEgI6diNXU7YuwLS5hsBY01zWOuyH/4cqw8kTjS+Zh8/zghVfUM7dt/aUiPMzPnB6L1alQ/VzZu9zgiOs9cYWwub/8EzR4PjwT8C/CONzS/CeO4T7PmAtzANNr4FWz4wfp5H4hUIIYkQ3scIIMNTIDjBmH1s82tuNdHU3G7CboTBLntr+4lnF20jLa+KTHcMpe54QnP9sBWYuKOpgkvHdGFw22LkNeAfBe/fAHu+gfevN8Jbq/dxXfbFbzNwuWHGgEiGxv1o9qnLBfN/ChlLjJnFl7x6aszSFhEREREREfEQBbdyytqYbQS3ZwyM4psdRby1eh91TU7+ctlwLEcIb8trm/jF/zZRXmfntjfXseCeqUQH+Rz9hnVlsOFNWPsqVOW0PcY7qDkYjYKw3jhC+2BJnIApYQLY2nGPI/EPh0EXGNuB3G5jQayqPCNI3rvSWGSrZCfYa488S7eFxRv6ngmjrod+M43Zvsdh7pos/vn1Lu6YnsKNk5MPP9Dlgt1fwff/hD3f7j/uG2rMHI4fB0Gx4Bdu/Fz9Ioz94/hZ7iut5fmcJkwmiAvxpaK8norGWgAe+t8mIgO9Oa1/5CHn1TQ68LKY8bJ2Uk/afmfBdR/C25dAxlJ491qY8QjEjj6mED23op6PNuQCcPcZP+r16nLCZ/cbobjZCle+DfFjOuNdiIiIiIiIiMhhKLiVU1Jdk4P0/GoAnrhoKOv2lXP/e6l8uCGHRoeTv105Epul7YDtL4u2U15nzI4tqm7kjrfW894dE/G2Wtq+WckuWP0vSJ23/yv4vqEwaDb0O8cIFgOijFDxgEBxxa4SbnhtDb84N547+xxnaHskJpMxY9YnGKIGwajrjOOORqjMMfqoVuYYW1Wu0W6gthhqS4ytqRqcjbBjobEFRMOIq4wQN6Jjiz05nC7+8Fka//1+HwCPLdhGYpgfMwZGGQOcdijfa/xMi7fDpnlGwAxgMsPA82HkdUaIfJzh8eHMXWv0F57WL5I3bhpHWn4VDXYnc9dk8dHGXO6Zt5FHZg2koKqBfaV17CutJausjpKaJqKDvFl8//Q2F8s6JkmT4Op58M4VxkzYjCUQkgRDLoahl0DM8HaHuC9/txuHy83klHDGJB0wm9tpN2babvnA+Blf/LIRGouIiIiIiIhIl1JwK6ekLTmVOF1uYoJ8iA3xZU6IL14WM/fM28Bnm/Npcrj4xzWjDgljN2aV8+4P2QA8c/kI/vBZGqnZFVz1ymqevWIkvSP89w+uKYZv/ggb/gtuFwDu6KHkDLiZqpTZDEmKPmKNr6/MxOWG11Zkctu0PkecBdwlrN5GC4HwlCOPszcY/Xg3zYNN7xoLfK18ztgSJsKIK2HA+RB45PcL8OK3u1tD2xFxQZC3gd3vvk+/yDKC6rIIqMvB7D64R63bOwjT6Btg/O0QmnTMb7c9mhwu/rfOmC19zfhEzGZTa0uBoXHB7CmpJTW7goc/2tLm+YVVjczfmHvkWcQd1ed0uHmh8Y8DO76Ain2w8u/GFpZi9N6d9LMjttYoqmpo/X199xkH9LatL4cPbzVm9JqtRnuEoZd0Xu0iIiIiIiIiclgKbuWUtDG7AoBRiSGtx84dGsMr14/ljrfXszitkNvfXM/L14/Bx2aEt06Xm998shW3Gy4ZHcdlY+KJDfbhjrfXszGrgmuf+5wnx9Yy3Wc3ppy1kLfR6JMK0P9cfuh1DY9vCWXr4mpslvUsfWA6SeH+tKWirollu4w+rUXVjazNLGNSSniX/TyOi83H6Ll79hPGYlU7Fxm9ZncthuzVxvbZA0aoavMHm6/RG9XmZ+x7B0JADG6/cJyrd/EzSzWXJVbTu34bJm8jxOWAlrV1bm/2uHuR6Y5hnWsAGwNn8ZPo4VwYGtflb3XRtgJKa5uICvTmzEFRB73mY7Pw0nVj+L8PNuFwuUgK8ycpws94DPdjRUYJf/5iO++s2df5C+HFj4XLXoOmOti1CLZ+ZPz8y3bDsr/A5veM9ga9hrd5+qvL99DkcDEmKZRJvUONWdYFW2HRI8YMZ6sPXPEm9D+n82oWERERERERkSNScCunpI1ZRn/bA4NbgBkDo3jtxnHc+uYPfLezmFve+IF/3zgWPy8rc9fsY2tuFYE+Vh6ZNQiAyYFFrB7yMVXbl9HLmQsbf3SjXiPhnCfZbB3CFS+sxO022jPYnW4WbyvkttP6tFnfl1sLsDvdrc8XbM47anDrdrv5dFMe2WV13H5aSuf1Uu0Ii21/H92qfNj8LqQvMHrnlu894qkm4OcANiDfOOa2+rE5YBKbzYMpsCVQYEug3BIBJhNOl5sf9pZRV+zkvndTSYkMOHRBrU6UllfF7z7dBsCV4xLabKURE+zD27dOaPP8hDA//r50JzsLa1i/r5yxyWGdX6SXn9EmYcjF0FgNO76Er/9gzML9z0xjVvLoG/a3sKivoHrXCvzXLOBZWw5n2Ssw/SnT6G3cIiQRrnznsKGviIiIiIiIiHQNBbdyynG73WzIqgBgdOKhXx+f2i+CN2+ZwM2vr2XV7lKufmU1t53Wh6cXGQt0PXTOACKpgCUvwPcv4O9y0DJvdqc7nnXOfqRZBzNj5mzOnDwRpxt+86+VuN0wc3A0g3sF8dxXu1iafvjgdsHmPACm9A1nZUYpX2zJ5/E5Qw7bd7e4upFHPtrM0vQiAEwmE3fN6Nvm2G4T1Aum3m9sVflQmQ1NtWCvB3td81YPDZVQXUDa7j3sKaknKjSQ8WMnQsxwTMlTGOHlz4jD3KK6wc698zbyzY5i5q7N4smLh3XJW9mUXcENr62lst7O0Ligw/66HUmwr43Zw2P5YH0Oc9dkdU1weyDvQBh+udGP9qPbjRm4q543Nq9A8A2ByhwCcfPzlt9WZc2PZpvRIiNhApz1GPh1ca0iIiIiIiIicggFt3LKya2op7i6EesB/Ul/bHzvMN66dQI3vraWTTmVPDh3DZPM27gweCcXbdwFi9L2Dx54AYy+ERLGYa62Mu+9TWzJreTtBWVM276WlMgANuVUEuht5Y8XD6XR7uK5r3axbl85FXVNhPh5HXTvouoGvt9dCsATFw3j8pdWUVLTxIqMEmYMOPjr+QBfbs3nVx9vpay2CbMJXG74x9e7uHBkLPGhfp33gzseQb2M7TBcLjc3//krCu2NvHLOGBgS067LBvrYuO20Pnyzo5hPNubyq/MGEeDd/j/W3G5jVvOR2has21vGTa//QE2jg9GJIbx+83iCfI5tcbFrJiTywfocPtuSz29nDz7k175L+IbC1e8ZC8dtfNsIcJuqjQ3Y4+5FqiuFocPH0n/oOIgcAKHJXba4m4iIiIiIiIi0j4JbOeWs32e0SRgcG9Tav7YtoxNDWXj3JFIX/Ivx+14imnJoBIoATBA7Eqb/EgbMaj2nry989LPJ/PPrDP75TQbLd5WwfFcJAA+c3Z+oQB8ABkQHsqOwmm93FHPRKKM3q9Pl5tsdRbyybA8uN4xMCKF3hD/nD+vFf7/fx4frcw4Kbqsa7Dz26TY+2pALwKBeQTx7xQge+3QbazLL+P2CNF65YWzn/eC60A97yyisaiTQx8r0AZEdOndSn3D6RPizp6SWT1PzuGZC4hHHu91utuVVMXdtFgtS8zh9YBTPXTkScxuLv63aXcKt/11HXZOTCb3D+M9N4zoUDP/YyIQQBvUKIj2/ig835PKTqb2P+VodYjbvb2HRWMPHy9bx1tcbyXFHUkQow+KC+eTSKdDdC+CJiIiIiIiIyGEpuJVTzpK0QgAm9vlRz9j6cihMg6LmrTCNhKJ0EhorAXAFxGDufw70OR16Twf/tnvO2ixm7p/Zn4tHxfHOmn18uCGX/tEBXD8xqXXMmYOi2FFYzdL0Qqb2i+D9ddm8szqL3Ip6AEwmuHN6CgCXj03gv9/v47PN+dw8pYwxSWGs2l3C/72/ibzKBszNY+87qx/eVgt/uGgo5z23nMVphXyzvYgZAw+dpdtddhVWs6+0DoCUqAB6R7S9GFtL+HzukBi8rYcP09tiMpm4enwif1yYzty1+9oMbivqjBnLy3eWsHxXMXmVDa2vLdiUR3K4Hw+ePeCgc77dUcQdb62n0eFiWr8IXrl+LL5eHautrVqvmZDIb+ZvZe6afdwyJblzFylrD+8APs8LYIO7P7dN680lo+PpHeHfZnAtIiIiIiIiIp6j4FZOKbWNDpamG8HtBcN7gdsNWz+Eb/8MpbvaPsk3FE57CPO4W8Hq3e57JUf48+vzB/Pr8wcf8tpZg6P517e7WbytkMXbCmlyugCjD+oVY+O5dkISyc0h59C4YK4YG8/763J4dP42LhwZy1NfbsfthsQwP569YsRB/VL7Rwdyy9TevLJsD7/7dBuTUsKPOLO4q2SX1XH+8yta35vJBJeNjufBswcQE+zTOq6gsoGPNxrB7RXjEo7pXpeOiefpxTvYmlvF+n1GuF1R18RrK/fy3c5iNudU4N6/1hteVjMzB0fTLyqAvy/dxT++zmBQryDOG2a0c1i8rYC7526kyenirEFR/POa0Z32M7xoZCx/WpjO7uJa1maWMeHH/4DQxexOF6v3GK045oyIY1CvoG69v4iIiIiIiIi0j4JbOaUsTS+kwe4iOcyXYQ3r4T9/gpwf9g8IToTowRA1GKKHQNQgiOjf6f0+R8aHEBHgTUlNIwAj4oO5bmISs0fEthkQ/vLcgSzaVkh6fhXp+VUAXD4mnsfmDMG/ja/u33tmPz5NzSOrrI4Xv93N/TP7d2r97fHppjyanC7C/b2IDvIhLb+KD9bnsGBzHrdN68Md01MI8LbyyrI9NDldjO8dxrhjXLArzN+Li0bG8v66HF74Zjf/viGUn/x3XWtbDID+0QFM6xfJaf0jGZ8c1jp7trrBwX9WZHLvvI2U1zVR3+TkyYXpuNxw3rAY/n7lKLysbS8KdywCfWxcODKWeWuzmbs2q9uD2805FdQ0OgjxszEkVqGtiIiIiIiISE+l4FY6l70BqvOhpgjcTjBZwGw1emyarcZz7wAIiAFrNyzM9CMLUvM4y7yeP5i/wPR28wJjNn+Yej+Mvw18Q7qlDrPZxN+vHMnyXcWcN6wXIxKOfN/wAG8eOmcAj87fisVs4jfnD+LGyYf/mn2At5VHLxjE3XM38uJ3u5k1LIaBMd0b0i3YlAcYofMV4xJYv6+cJxems35fOf/4OoN5a7O447QU5q7dB8A9Z/Q9rvv99PS+/G99Dl9vL+IPn6exfl85fl4WHps9hGn9I+gV7NvmeY/MGkhxdSOfbsrj1x9vbT1+1bgEnrhoKFZL54W2La4Zn8S8tdl8saWA381uIsy/+/5baOm5PCUlQu0RRERERERERHowBbdy/OorYMsHkP4p7F1pBLZHZTJaEHgHgneQEeZ6BxqbV8Chx70CjOcBURAcb5zbkd6gNcXUp37Ig5kvMMgrC2oAqy+MvRmm3AeBMcf45o/d1H4RTO0X0e7x14xPJMDbSnKEPyOPEvQCnD+sF+/1y2b5rhIuf/F7nr9m1EGLm3WlnYXVbC+oxmYxcc4Q42c7JimU/905iUXbCnjqyx1kltTyx4XpAIxICGFq3/b/LNrSO8Kf2SNi+SQ1j9dX7gXg52f1O2r7BavFzHNXjaR/dADPLN6J2QSPnj+Ym7uw/+yw+GCGxQWzJbeS+RtzuaW7FikDVjQHtx35vSciIiIiIiIi3U/BrXSY2+2mwe7Cty4Pfvg3rHsNGqv2D7D6GgGrxQtcDiPIdTmNfZcDGqrAZYf6MmM7FlZfCIo1Alyrt3Eva3Pf1Kaa5q22eauBhip8cTPIBHX44jf1Tph4FwREHv8PpJuYzSYuGhXX7vEmk4nnrhrFHW+t44e95fzkjR/41XmD+MnU3u0KJJ0uoyms5RhmZbbMtp3eP4pgv/1tJkwmE+cO7cWZg6KZuyaL577aRXldEw/M7N8pIeldM/rySapx735RAdw8pX2BqMlk4u4z+nFa/0isZjODu6GFwOVj49mSW8mHG3K6LbitbrCzMbsC4LiDchERERERERHpWgpuT3IZRTVUNdjbfM3LYmZIbFDbgZnTDnXNwWpdGdXlhWTsyyY3L5fykgL6OHYz2bwNE80rPkUOgpHXwMDzIazPkWfDulxQVwq1xUao2li9f2t9XgWNNQcfa6iCmgLjPEc9lO3u0M9ih7kv7zdOIH7Grdx81ugOnXuiCvP34p1bJ/Lo/C28vy6HJz5PZ0dBNQ+c3Z/oQJ/DflW+ptHBta+uZm9pHQ+dM4Brxie2+2v1brebT5uD29kjerU5xmYxc+PkZC4bE09pTROJ4X7H9gZ/pH90IJePiefTTXn88eJh2DrY5mB4fEin1NEes4fH8ofP0tiWZ/Qt7upFwpbtLObV5XtwutwkhfuRENY5P3MRERERERER6RoKbk9yGW//nKiKjTiw4MKMw202HrHgxEJToC+jksIxNVUfENSWQ1P1QdcJBEY1bwA052EZ/qNJOv9BbAPPM/rYtofZbMx0PdbZri19dKtyjTDX2QiOJuPR7TbaK3gFgJd/8xbAV5mN/OTDfQT5WFk5ddix3fcE5WU189SlwxkQE8QfP0/jg/U5fLA+By+rmcQwP5LD/UgM8ycp3I9xyWEMjAnkgfdS2ZRTCcCj87fy0YYc/njxsHaFi9/vKWVfaR2+NgszB0cfcay/t7XNxdWOx1OXDufxC4fg59Wz/3gL9ffizIHRfLmtgA/X5/DoBYO77F6fpOZy37uprc9vm9any+4lIiIiIiIiIp2jZycbctySXdkMNGccfkAdkN72Sy5MVLr9KXcHUEEAdu9Q/IIiCYuMIdsRzC+2JZHVEMWd+1J4eHDnL+B0WDYfCOttbO3gdrv56zsrALhpSm8CfWxHOePkYzKZ+MnU3qRE+vPkwnT2FNfS5HCRUVRDRlHNQWMTw/zIKqvDy2Lmlqm9eev7vWzIquCCf6zglinJ3HZaH6ICfdq8j93p4vFPjUXfLh0T55Hw1Gw29fjQtsWlY+L5clsB81PzeHjWwC5ZCA1g/sZcAM4dEsMvzh1An8iALrmPiIiIiIiIiHSeEyPdkGM28MonoKawuc+sw2hT0Nx3duPeEv63bh8WnFw6aSAj+vUBvzDwDWN1gZtr3t5OiL8Pj54/iKn9Ig4K6+KAhzblcc+8jfx7+R4uGxNH36hAz73RI/h6exFp+VX4e1m4eXKyp8vxqNMHRHH6gCgcThd5FQ3sK6tlb2kdWaW1ZBTVsCKjhKyyOgCeuHgoV4xN4MbJSTz+aRpfbivg1eWZvL5yL+cOjeG6iUlM6B12UKuN/67ay47CakL9bPzf2QM89TZPGKcPiCTc34uSmkaW7SrmjIFHnqF8LJocLtZkGr2k7z2zn0JbERER+f/27jw66vLe4/hnZjJZyWJiQhayiSRQWcIWIBZLwiJVuFDRilqRXm8tmrTIcnut2oI91+bYXhapC61c0RqpVY7AdaNAQlhiQAlESFhkS2IgJGHJRsg+94/I2JRdM5lfkvfrnDk58/x+88z3geSc+X1+zzwPAADoJAhuu7rw4Vc8NHiw9LHrfr227bg27XPXtruS7BtRbf78gFpk1pjYQN0zpNdlXz95UKjW5Z7UpgOl+s3afN07tJe2fFmuRxIiNTTS3yHDuai5xabUjw+op4+7fnbHlb/2XVZdp2fW5EmSfjIyUjd5uTq0rs7CxWJWRICnIgI8NbrPN+3l1fVas6dYN3m66r5h4ZKkEF8PLX94qDIOlurlzUeVU3hOH+4t0Yd7S9QnqIceHhWpSQNDtf3IaS3Z+KUk6akf9pWfJ//W12K1mDUlLkyvZx3X6pxihwS3e4rOqbahWTf3cFXfYGPeXAEAAAAAAJciuO3m5k2I1Xs5xTpZWactX5bZg6OsI6clSaP7XH3n+QWTv6dth8uVfeyMso+dkSSdqqrTuz8f5dC603YUasX245Kk22+9Wd8LvXTt1YamFj2RtlunqurUO9BLKUm3OrSmriDQ202P3dH7sseS+vZUUt+eyj9ZqbQdRVq754QOl9Xot+vy9dt1+fbzhkbepPuGhndUyZ3etKGtwe2m/WWqqG1o98B7+9d/ywm9b77uDeYAAAAAAIDzdeDCpDAid6tF076eUbtqZ5Ek6ez5BuWfrJLUGopeTbi/p+aOj5EkBXm7SZJyv6pQfVOzo0pWeXW9/mfDIfvzlzMvv4bvwg/ytavwnLzdXPTajGHdcm1bR7gt1Fep9wzQzmfGauHk76l3oJckqaePm2aP7aPXHxlOQHgDbgv1Vd9gbzU0t+iDvSXt3v+2w63B7fevcRMGAAAAAAAYCzNuoQfiI/S/248r42CZTlZcUE7hOdlsUt9g7ytuQvXPfv6D3rprQIhCfN01MjVdp2satLe4UsOjvttyCTabTTX1TaqobVTlhUZVXWhUU4tNf/usSNV1TYoM8FThmVp9vK9ER8pqdGvQN2t3vr2zUKt2FslkkpY9MJh1PR3Ax92qmbdH65GEKJ2srFOQt5usDtpcq6u7d2gv/fdHB7Q6p1gPj4xst34rLzRqb3GFpGvPngcAAAAAAMZCcAvdGtRDI6L9tfP4WaXtKNSZmgZJ0vevMdv2n4X7e0qS4qP99fG+U/rs+NmrBreFZ84r/UCZKi40qrK2ofXnhUZV1LYGtBefN7fYLvt6k0l6cfpgvbz5iDbuL9WrmUe16MeDJEm7Cs5q4f+1fnV//oRYJfYNuu5x4MaZTCaF+Xk4u4xObUpcmFI/OagvvqrQ4dJq9enZPmvRZh89oxab1DvQSyG+/B8BAAAAANCZENxCkvTQyEjtPH5Wr2Qelenrb7nf/i1m6MVHtQa3O4+fVXLi5c85UlatqS9/qpr6puvq09XFLD8Pq3w9rHKxmGWSNCUuVHHhfkpJvFUb95dqzZ5i/WhwmG4N6qFZabvV2GzTXQOC9cSYy6/XChhJoLebxsQEKv1gme77c7Z+mdRHPxkZKVeXbz+DuaXFprd2FEi6sZswAAAAAADAGAhuIUm6q3+wdidEadVnRWpoapG71awR0Te+1EF8dIAkaXfhOTU1t8jlX746X3mhUT/7a45q6pvUN9hbw6Jukp+Hq3w9rPL1tNoDWj9P169/WuVutVzx/QaF++nHw3rp3V3FSvnbboX5eeh0Tb36Bnvrj/cOksnEWqvoHJ6+u58Kz9bqSFmNfvfhfr2ZXaD/mthXP+wf/K1+j1/bdkxZR87I3WrWjISo9i8YAAAAAAA4FMEtJEkuFrMW/tttmj22jz7aV6JbbvaSp+uN/3rEBnvLx91FVXVNOlBSrQG9fGWz2VRwplZbvyzX6pxiHT99XmF+Hnr7P0YooIfbd679d1P669Cpan1RXKmK2kb5eVr1l4eHycuNX290Hr0De2j97NF6d1exFm/8UoVnavXE27s1JMJPz9zdT0Mjr/9GyhdfVeiP/2jdwG/B5NvUmzWeAQAAAADodEi20MZNXq76yXfYHMliNml4lL/SD5Zp5afH5W61aOuX5So+d8F+jrvVrD8/PLRdQtvW/ixa/vBQTXkpS2fPN+ilB4YoIsCzXfoGOpKLxawHR0RoSlyo/rL1mP6y9Zh2F1Vo2qvZ+s87Y5WceOs1+6ipb9Iv39mjppbW5UKmDw/vgMoBAAAAAEB7I7hFu4uPbg1u3999wt5mtZg0LNJfo2Nu1t0DQhQZ4NWu7xni66H0eT9QSNjNhgAADN9JREFUVV0TG2Wh0/Nyc9Gc8TF6cESE/viPQ1qdU6zXth3T4z/oLbP56ssm/HZtngrP1CrMz0OpPxrIciEAAAAAAHRSBLdod3cNCNHrWcfl5eqiO2ICNbrPzRp5S4DDly7wdrfK293q0PcAOlJPH3el3jNAH+0tUUVtow6X1Sg22PuK56/ZU6z395yQ2SS9OD1Ovp78PQAAAAAA0FkR3KLdhft7aufT45xdBtAlWC1mDY28SduPnNZnBWevGNwWnjmvZ9fkSZJmj43RsKgb31wQAAAAAAAYh9nZBQAAri4+ujWE/ez42cseb2hq0S//tkfnG5oVH+2vlKRrr4ULAAAAAACMjRm3AGBww6MuBrdnZLPZZDKZZLPZ9ManBdp8qFznzjdo34lK+XpYtfT+OFmusQ4uAAAAAAAwPoJbADC4wRF+slpMKq2qV9HZWkUGeOmv2YV67oP9bc57YdoAhbI5HwAAAAAAXQLBLQAYnLvVokG9/LSr8Jx2Hj+rkxV1+t2HraHtv98erf5hPgrz89CIWwKcXCkAAAAAAGgvBLcA0AnER/trV+E5LUs/rDM1DWpusWlqXKh+M6mfTCaWRgAAAAAAoKthczIA6AQublBWfO6CLjQ2a0S0v1LvGUhoCwAAAABAF8WMWwDoBBJ636wfDQ5Ti82mB+MjFB/tT2gLAAAAAEAXRnALAJ2Aq4tZS+6Pc3YZAAAAAACgg7BUAgAAAAAAAAAYDMEtAAAAAAAAABgMwS0AAAAAAAAAGAzBLQAAAAAAAAAYDMEtAAAAAAAAABgMwS0AAAAAAAAAGAzBLQAAAAAAAAAYDMEtAAAAAAAAABgMwS0AAAAAAAAAGAzBLQAAAAAAAAAYDMEtAAAAAAAAABgMwS0AAAAAAAAAGAzBLQAAAAAAAAAYDMEtAAAAAAAAABgMwS0AAAAAAAAAGAzBLQAAAAAAAAAYDMEtAAAAAAAAABgMwS0AAAAAAAAAGAzBLQAAAAAAAAAYDMEtAAAAAAAAABiMi7ML6Gg2m02SVFVV5eRKAADA1TQ2Nqq2tlZVVVWyWq3OLgcAAACAA3WXz/8XM8mLGeXVdLvgtrq6WpIUHh7u5EoAAAAAAAAAdEfV1dXy9fW96jkm2/XEu11IS0uLTp48KW9vb5lMJmeXAwAArqCqqkrh4eH66quv5OPj4+xyAAAAADhQd/n8b7PZVF1drdDQUJnNV1/FttvNuDWbzerVq5ezywAAANfJx8enS39wAwAAAPCN7vD5/1ozbS9iczIAAAAAAAAAMBiCWwAAAAAAAAAwGIJbAABgSG5ublqwYIHc3NycXQoAAAAAB+Pz/6W63eZkAAAAAAAAAGB0zLgFAAAAAAAAAIMhuAUAAAAAAAAAgyG4BQAAAAAAAACDIbgFAAAOkZqaquHDh8vb21tBQUGaOnWqDh061Oacuro6JScnKyAgQD169NC0adNUWlpqP/7FF1/ogQceUHh4uDw8PNSvXz+9+OKLV3zPrKwsubi4KC4uzlHDAgAAAHAFHXUNkJmZKZPJdMnj1KlTHTLOjkJwCwAAHGLLli1KTk7Wjh07tHHjRjU2NmrChAk6f/68/Zw5c+bogw8+0HvvvactW7bo5MmTuueee+zHc3JyFBQUpLS0NOXn5+uZZ57Rr3/9a7300kuXvF9FRYVmzJihsWPHdsj4AAAAALTV0dcAhw4dUklJif0RFBTUIePsKCabzWZzdhEAAKDrKy8vV1BQkLZs2aI77rhDlZWVCgwM1KpVq3TvvfdKkg4ePKh+/fopOztbI0eOvGw/ycnJOnDggDIyMtq0T58+XX369JHFYtHatWuVm5vr6CEBAAAAuApHXQNkZmYqMTFR586dk5+fX0cNp8Mx4xYAAHSIyspKSZK/v7+k1jvpjY2NGjdunP2cvn37KiIiQtnZ2Vft52IfF61cuVLHjh3TggULHFA5AAAAgG/DkdcAkhQXF6eQkBCNHz9eWVlZ7Vy987k4uwAAAND1tbS06Mknn9Ttt9+u/v37S5JOnTolV1fXS+6Q9+zZ84prU3366af6+9//ro8++sjedvjwYT311FPatm2bXFz4aAMAAAAYgSOvAUJCQrR8+XINGzZM9fX1WrFihcaMGaOdO3dqyJAhDhtTR+PqBgAAOFxycrLy8vK0ffv2b91HXl6epkyZogULFmjChAmSpObmZj344IN67rnnFBMT017lAgAAAPiOHHUNIEmxsbGKjY21P09ISNDRo0e1ZMkSvfXWW9+pbiMhuAUAAA6VkpKiDz/8UFu3blWvXr3s7cHBwWpoaFBFRUWbO+6lpaUKDg5u08f+/fs1duxYPfbYY3r22Wft7dXV1dq1a5f27NmjlJQUSa139m02m1xcXLRhwwYlJSU5doAAAAAA2nDkNcCVxMfHf6eQ2IhY4xYAADiEzWZTSkqK1qxZo4yMDEVHR7c5PnToUFmtVqWnp9vbDh06pKKiIo0aNcrelp+fr8TERD3yyCN6/vnn2/Th4+Ojffv2KTc31/6YNWuWYmNjlZubqxEjRjh2kAAAAADsOuIa4Epyc3MVEhLSPgMxCGbcAgAAh0hOTtaqVau0bt06eXt729es8vX1lYeHh3x9ffXoo49q7ty58vf3l4+Pj37xi19o1KhR9t1k8/LylJSUpDvvvFNz586192GxWBQYGCiz2WxfL+uioKAgubu7X9IOAAAAwLE64hpAkpYuXaro6Gjddtttqqur04oVK5SRkaENGzY4Z+AOQnALAAAc4tVXX5UkjRkzpk37ypUrNXPmTEnSkiVLZDabNW3aNNXX1+vOO+/UK6+8Yj939erVKi8vV1pamtLS0uztkZGRKigocPQQAAAAANyAjroGaGho0Lx583TixAl5enpq4MCB2rRpkxITEx06vo5mstlsNmcXAQAAAAAAAAD4BmvcAgAAAAAAAIDBENwCAAAAAAAAgMEQ3AIAAAAAAACAwRDcAgAAAAAAAIDBENwCAAAAAAAAgMEQ3AIAAAAAAACAwRDcAgAAAAAAAIDBENwCAAAAAAAAgMEQ3AIAAAAAAACAwRDcAgAAoNuZOXOmTCaTTCaTrFarevbsqfHjx+v1119XS0vLdffzxhtvyM/Pz3GFAgAAoNsiuAUAAEC3NHHiRJWUlKigoECffPKJEhMTNXv2bE2aNElNTU3OLg8AAADdHMEtAAAAuiU3NzcFBwcrLCxMQ4YM0dNPP61169bpk08+0RtvvCFJWrx4sQYMGCAvLy+Fh4friSeeUE1NjSQpMzNTP/3pT1VZWWmfvbtw4UJJUn19vebPn6+wsDB5eXlpxIgRyszMdM5AAQAA0CkR3AIAAABfS0pK0qBBg/T+++9Lksxms5YtW6b8/Hy9+eabysjI0K9+9StJUkJCgpYuXSofHx+VlJSopKRE8+fPlySlpKQoOztb77zzjvbu3av77rtPEydO1OHDh502NgAAAHQuJpvNZnN2EQAAAEBHmjlzpioqKrR27dpLjk2fPl179+7V/v37Lzm2evVqzZo1S6dPn5bUusbtk08+qYqKCvs5RUVFuuWWW1RUVKTQ0FB7+7hx4xQfH6/f//737T4eAAAAdD0uzi4AAAAAMBKbzSaTySRJ2rRpk1JTU3Xw4EFVVVWpqalJdXV1qq2tlaen52Vfv2/fPjU3NysmJqZNe319vQICAhxePwAAALoGglsAAADgnxw4cEDR0dEqKCjQpEmT9Pjjj+v555+Xv7+/tm/frkcffVQNDQ1XDG5rampksViUk5Mji8XS5liPHj06YggAAADoAghuAQAAgK9lZGRo3759mjNnjnJyctTS0qJFixbJbG7dGuLdd99tc76rq6uam5vbtA0ePFjNzc0qKyvT6NGjO6x2AAAAdC0EtwAAAOiW6uvrderUKTU3N6u0tFTr169XamqqJk2apBkzZigvL0+NjY3605/+pMmTJysrK0vLly9v00dUVJRqamqUnp6uQYMGydPTUzExMXrooYc0Y8YMLVq0SIMHD1Z5ebnS09M1cOBA3X333U4aMQAAADoTs7MLAAAAAJxh/fr1CgkJUVRUlCZOnKjNmzdr2bJlWrdunSwWiwYNGqTFixfrhRdeUP/+/fX2228rNTW1TR8JCQmaNWuW7r//fgUGBuoPf/iDJGnlypWaMWOG5s2bp9jYWE2dOlWff/65IiIinDFUAAAAdEImm81mc3YRAAAAAAAAAIBvMOMWAAAAAAAAAAyG4BYAAAAAAAAADIbgFgAAAAAAAAAMhuAWAAAAAAAAAAyG4BYAAAAAAAAADIbgFgAAAAAAAAAMhuAWAAAAAAAAAAyG4BYAAAAAAAAADIbgFgAAAAAAAAAMhuAWAAAAAAAAAAyG4BYAAAAAAAAADIbgFgAAAAAAAAAM5v8BnkxGO0poMSIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7de4a028",
   "metadata": {
    "papermill": {
     "duration": 0.015442,
     "end_time": "2025-07-21T14:16:18.093933",
     "exception": false,
     "start_time": "2025-07-21T14:16:18.078491",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bc86d24f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-21T14:16:18.127052Z",
     "iopub.status.busy": "2025-07-21T14:16:18.126060Z",
     "iopub.status.idle": "2025-07-21T14:16:18.159073Z",
     "shell.execute_reply": "2025-07-21T14:16:18.158110Z"
    },
    "papermill": {
     "duration": 0.0505,
     "end_time": "2025-07-21T14:16:18.160279",
     "exception": false,
     "start_time": "2025-07-21T14:16:18.109779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12456043,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 148.272715,
   "end_time": "2025-07-21T14:16:21.021090",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-21T14:13:52.748375",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
