{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "412b34c7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:24.584084Z",
     "iopub.status.busy": "2025-09-15T15:04:24.583638Z",
     "iopub.status.idle": "2025-09-15T15:04:26.546469Z",
     "shell.execute_reply": "2025-09-15T15:04:26.545180Z"
    },
    "papermill": {
     "duration": 1.97224,
     "end_time": "2025-09-15T15:04:26.548438",
     "exception": false,
     "start_time": "2025-09-15T15:04:24.576198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72afe900",
   "metadata": {
    "papermill": {
     "duration": 0.002574,
     "end_time": "2025-09-15T15:04:26.554488",
     "exception": false,
     "start_time": "2025-09-15T15:04:26.551914",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Random Forest 1A\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "473ef8e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:26.562152Z",
     "iopub.status.busy": "2025-09-15T15:04:26.560960Z",
     "iopub.status.idle": "2025-09-15T15:04:28.450522Z",
     "shell.execute_reply": "2025-09-15T15:04:28.449662Z"
    },
    "papermill": {
     "duration": 1.895079,
     "end_time": "2025-09-15T15:04:28.452345",
     "exception": false,
     "start_time": "2025-09-15T15:04:26.557266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score, mean_squared_log_error\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85b698ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.459578Z",
     "iopub.status.busy": "2025-09-15T15:04:28.459172Z",
     "iopub.status.idle": "2025-09-15T15:04:28.492086Z",
     "shell.execute_reply": "2025-09-15T15:04:28.491199Z"
    },
    "papermill": {
     "duration": 0.038327,
     "end_time": "2025-09-15T15:04:28.493690",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.455363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load data\n",
    "df = pd.read_csv('/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv')  # Ganti dengan nama file dataset Anda\n",
    "df['Date'] = pd.to_datetime(df['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb49347e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.500757Z",
     "iopub.status.busy": "2025-09-15T15:04:28.500317Z",
     "iopub.status.idle": "2025-09-15T15:04:28.505489Z",
     "shell.execute_reply": "2025-09-15T15:04:28.504689Z"
    },
    "papermill": {
     "duration": 0.010684,
     "end_time": "2025-09-15T15:04:28.507227",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.496543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Gunakan hanya harga emas\n",
    "df['Price'] = df['Price'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f0444042",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.514296Z",
     "iopub.status.busy": "2025-09-15T15:04:28.513969Z",
     "iopub.status.idle": "2025-09-15T15:04:28.522204Z",
     "shell.execute_reply": "2025-09-15T15:04:28.521303Z"
    },
    "papermill": {
     "duration": 0.013778,
     "end_time": "2025-09-15T15:04:28.523917",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.510139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Membuat fitur lag (misalnya: 3 hari sebelumnya)\n",
    "df['lag_1'] = df['Price'].shift(1)\n",
    "df['lag_2'] = df['Price'].shift(2)\n",
    "df['lag_3'] = df['Price'].shift(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e1d87e56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.531025Z",
     "iopub.status.busy": "2025-09-15T15:04:28.530679Z",
     "iopub.status.idle": "2025-09-15T15:04:28.539949Z",
     "shell.execute_reply": "2025-09-15T15:04:28.538937Z"
    },
    "papermill": {
     "duration": 0.014612,
     "end_time": "2025-09-15T15:04:28.541627",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.527015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Hapus baris dengan nilai NaN akibat lag\n",
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3f28d349",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.548597Z",
     "iopub.status.busy": "2025-09-15T15:04:28.548263Z",
     "iopub.status.idle": "2025-09-15T15:04:28.556247Z",
     "shell.execute_reply": "2025-09-15T15:04:28.555401Z"
    },
    "papermill": {
     "duration": 0.013427,
     "end_time": "2025-09-15T15:04:28.557929",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.544502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Definisi fitur dan target\n",
    "features = ['lag_1', 'lag_2', 'lag_3']\n",
    "target = 'Price'\n",
    "\n",
    "#features = [f'Price_lag{i}']\n",
    "\n",
    "X = df[features]\n",
    "y = df[target]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "98346eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.565058Z",
     "iopub.status.busy": "2025-09-15T15:04:28.564732Z",
     "iopub.status.idle": "2025-09-15T15:04:28.571198Z",
     "shell.execute_reply": "2025-09-15T15:04:28.569982Z"
    },
    "papermill": {
     "duration": 0.011989,
     "end_time": "2025-09-15T15:04:28.572790",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.560801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# Train-Validation-Test split (70:15:15 tanpa shuffle agar time-series)\n",
    "train_size = int(len(df) * 0.7)\n",
    "val_size   = int(len(df) * 0.15)\n",
    "\n",
    "X_train = X[:train_size]\n",
    "y_train = y[:train_size]\n",
    "\n",
    "X_val = X[train_size:train_size + val_size]\n",
    "y_val = y[train_size:train_size + val_size]\n",
    "\n",
    "X_test = X[train_size + val_size:]\n",
    "y_test = y[train_size + val_size:]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8be25420",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.579834Z",
     "iopub.status.busy": "2025-09-15T15:04:28.579403Z",
     "iopub.status.idle": "2025-09-15T15:04:28.583625Z",
     "shell.execute_reply": "2025-09-15T15:04:28.582726Z"
    },
    "papermill": {
     "duration": 0.00995,
     "end_time": "2025-09-15T15:04:28.585803",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.575853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b0ba8c5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.593322Z",
     "iopub.status.busy": "2025-09-15T15:04:28.592538Z",
     "iopub.status.idle": "2025-09-15T15:04:28.966999Z",
     "shell.execute_reply": "2025-09-15T15:04:28.966062Z"
    },
    "papermill": {
     "duration": 0.379894,
     "end_time": "2025-09-15T15:04:28.968774",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.588880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(random_state=42)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training model Random Forest\n",
    "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87dba13b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T15:04:28.976839Z",
     "iopub.status.busy": "2025-09-15T15:04:28.976498Z",
     "iopub.status.idle": "2025-09-15T15:04:29.033600Z",
     "shell.execute_reply": "2025-09-15T15:04:29.032438Z"
    },
    "papermill": {
     "duration": 0.062891,
     "end_time": "2025-09-15T15:04:29.035335",
     "exception": false,
     "start_time": "2025-09-15T15:04:28.972444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Dataset    MAPE         RMSE      R²    MSLE\n",
      "0       Train  0.0021    2631.3164  0.9997  0.0000\n",
      "1  Validation  0.0138   19074.3265  0.8410  0.0003\n",
      "2        Test  0.1944  310654.4240 -3.0606  0.0641\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score, mean_squared_log_error\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def evaluate_model(model, X, y, dataset_name):\n",
    "    y_pred = model.predict(X)\n",
    "    mape = mean_absolute_percentage_error(y, y_pred)\n",
    "    rmse = np.sqrt(mean_squared_error(y, y_pred))\n",
    "    r2   = r2_score(y, y_pred)\n",
    "    msle = mean_squared_log_error(y, y_pred)\n",
    "    return {\n",
    "        \"Dataset\": dataset_name,\n",
    "        \"MAPE\": round(mape, 4),\n",
    "        \"RMSE\": round(rmse, 4),\n",
    "        \"R²\": round(r2, 4),\n",
    "        \"MSLE\": round(msle, 4)\n",
    "    }\n",
    "\n",
    "# Evaluasi di semua dataset\n",
    "results = []\n",
    "results.append(evaluate_model(model, X_train, y_train, \"Train\"))\n",
    "results.append(evaluate_model(model, X_val, y_val, \"Validation\"))\n",
    "results.append(evaluate_model(model, X_test, y_test, \"Test\"))\n",
    "\n",
    "# Tampilkan hasil evaluasi sebagai tabel\n",
    "df_results = pd.DataFrame(results)\n",
    "print(df_results)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.362582,
   "end_time": "2025-09-15T15:04:29.759841",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-15T15:04:19.397259",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
