{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b1a72dac",
   "metadata": {
    "papermill": {
     "duration": 0.003969,
     "end_time": "2025-05-27T14:10:43.972607",
     "exception": false,
     "start_time": "2025-05-27T14:10:43.968638",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1C: Menggunakan harga emas historis + Cadangan Devisa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "86a6076c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:10:43.980129Z",
     "iopub.status.busy": "2025-05-27T14:10:43.979852Z",
     "iopub.status.idle": "2025-05-27T14:10:45.600368Z",
     "shell.execute_reply": "2025-05-27T14:10:45.599533Z"
    },
    "papermill": {
     "duration": 1.625871,
     "end_time": "2025-05-27T14:10:45.601729",
     "exception": false,
     "start_time": "2025-05-27T14:10:43.975858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "05735252",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:10:45.610422Z",
     "iopub.status.busy": "2025-05-27T14:10:45.609692Z",
     "iopub.status.idle": "2025-05-27T14:11:00.557599Z",
     "shell.execute_reply": "2025-05-27T14:11:00.556944Z"
    },
    "papermill": {
     "duration": 14.953462,
     "end_time": "2025-05-27T14:11:00.559020",
     "exception": false,
     "start_time": "2025-05-27T14:10:45.605558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-27 14:10:48.588383: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748355048.827191      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748355048.895625      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f97ddd",
   "metadata": {
    "papermill": {
     "duration": 0.003263,
     "end_time": "2025-05-27T14:11:00.566118",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.562855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c1bbf239",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.573787Z",
     "iopub.status.busy": "2025-05-27T14:11:00.573284Z",
     "iopub.status.idle": "2025-05-27T14:11:00.600485Z",
     "shell.execute_reply": "2025-05-27T14:11:00.599526Z"
    },
    "papermill": {
     "duration": 0.032384,
     "end_time": "2025-05-27T14:11:00.601759",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.569375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
      "0  1/3/2017  606000  13485            116.9         4936881.99\n",
      "1  1/4/2017  606000  13478            116.9         4936881.99\n",
      "2  1/5/2017  607000  13370            116.9         4936881.99\n",
      "3  1/6/2017  606000  13347            116.9         4936881.99\n",
      "4  1/9/2017  602000  13385            116.9         4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81963b14",
   "metadata": {
    "papermill": {
     "duration": 0.003661,
     "end_time": "2025-05-27T14:11:00.609305",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.605644",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "169c500e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.617686Z",
     "iopub.status.busy": "2025-05-27T14:11:00.617447Z",
     "iopub.status.idle": "2025-05-27T14:11:00.641876Z",
     "shell.execute_reply": "2025-05-27T14:11:00.641088Z"
    },
    "papermill": {
     "duration": 0.030032,
     "end_time": "2025-05-27T14:11:00.642936",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.612904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "55faf33c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.650838Z",
     "iopub.status.busy": "2025-05-27T14:11:00.650610Z",
     "iopub.status.idle": "2025-05-27T14:11:00.662875Z",
     "shell.execute_reply": "2025-05-27T14:11:00.662310Z"
    },
    "papermill": {
     "duration": 0.017299,
     "end_time": "2025-05-27T14:11:00.663912",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.646613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e612436d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.671476Z",
     "iopub.status.busy": "2025-05-27T14:11:00.671207Z",
     "iopub.status.idle": "2025-05-27T14:11:00.677746Z",
     "shell.execute_reply": "2025-05-27T14:11:00.677142Z"
    },
    "papermill": {
     "duration": 0.011402,
     "end_time": "2025-05-27T14:11:00.678824",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.667422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2927cd18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.686643Z",
     "iopub.status.busy": "2025-05-27T14:11:00.686426Z",
     "iopub.status.idle": "2025-05-27T14:11:00.691765Z",
     "shell.execute_reply": "2025-05-27T14:11:00.691190Z"
    },
    "papermill": {
     "duration": 0.010476,
     "end_time": "2025-05-27T14:11:00.692826",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.682350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5bb56fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.701199Z",
     "iopub.status.busy": "2025-05-27T14:11:00.700629Z",
     "iopub.status.idle": "2025-05-27T14:11:00.703843Z",
     "shell.execute_reply": "2025-05-27T14:11:00.703369Z"
    },
    "papermill": {
     "duration": 0.008376,
     "end_time": "2025-05-27T14:11:00.704910",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.696534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Cadangan Devisa']\n",
    "\n",
    "# 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "74c87caa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.713368Z",
     "iopub.status.busy": "2025-05-27T14:11:00.712600Z",
     "iopub.status.idle": "2025-05-27T14:11:00.720819Z",
     "shell.execute_reply": "2025-05-27T14:11:00.720313Z"
    },
    "papermill": {
     "duration": 0.013465,
     "end_time": "2025-05-27T14:11:00.721924",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.708459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "feb06791",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.730189Z",
     "iopub.status.busy": "2025-05-27T14:11:00.729985Z",
     "iopub.status.idle": "2025-05-27T14:11:00.737556Z",
     "shell.execute_reply": "2025-05-27T14:11:00.737063Z"
    },
    "papermill": {
     "duration": 0.012831,
     "end_time": "2025-05-27T14:11:00.738723",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.725892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "29fa7283",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.747285Z",
     "iopub.status.busy": "2025-05-27T14:11:00.746729Z",
     "iopub.status.idle": "2025-05-27T14:11:00.750528Z",
     "shell.execute_reply": "2025-05-27T14:11:00.749993Z"
    },
    "papermill": {
     "duration": 0.008963,
     "end_time": "2025-05-27T14:11:00.751569",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.742606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4d25b69",
   "metadata": {
    "papermill": {
     "duration": 0.003261,
     "end_time": "2025-05-27T14:11:00.758165",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.754904",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3548e1db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:11:00.766029Z",
     "iopub.status.busy": "2025-05-27T14:11:00.765827Z",
     "iopub.status.idle": "2025-05-27T14:12:47.488739Z",
     "shell.execute_reply": "2025-05-27T14:12:47.487974Z"
    },
    "papermill": {
     "duration": 106.728221,
     "end_time": "2025-05-27T14:12:47.489840",
     "exception": false,
     "start_time": "2025-05-27T14:11:00.761619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748355062.240193      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748355062.240936      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1748355067.277783      63 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=77974.3078\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=39896.4981\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=67925.0865\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=70462.8777\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=87106.8895\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=88408.0594\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=51274.3676\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=46583.4005\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=40163.4541\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=33501.8050\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=27333.0566\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=46345.2527\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=43179.9053\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=40058.2713\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=23886.5038\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=25913.5552\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "14     64      0.3         0.0005          32  23886.503776  0.014387   \n",
      "15     64      0.3         0.0005          64  25913.555177  0.016487   \n",
      "10     64      0.2         0.0005          32  27333.056630  0.016730   \n",
      "9      64      0.2         0.0010          64  33501.805048  0.021892   \n",
      "1      32      0.2         0.0010          64  39896.498085  0.022531   \n",
      "\n",
      "          R2  \n",
      "14  0.980328  \n",
      "15  0.976847  \n",
      "10  0.974241  \n",
      "9   0.961302  \n",
      "1   0.945119  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c71715",
   "metadata": {
    "papermill": {
     "duration": 0.005739,
     "end_time": "2025-05-27T14:12:47.501890",
     "exception": false,
     "start_time": "2025-05-27T14:12:47.496151",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5237ce7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:12:47.514679Z",
     "iopub.status.busy": "2025-05-27T14:12:47.513996Z",
     "iopub.status.idle": "2025-05-27T14:12:55.122535Z",
     "shell.execute_reply": "2025-05-27T14:12:55.121761Z"
    },
    "papermill": {
     "duration": 7.616303,
     "end_time": "2025-05-27T14:12:55.123950",
     "exception": false,
     "start_time": "2025-05-27T14:12:47.507647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - loss: 0.0143 - val_loss: 0.0036\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0017 - val_loss: 0.0024\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0015 - val_loss: 0.0050\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0049\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0046\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0038\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0062\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0050\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0039\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.6201e-04 - val_loss: 0.0100\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0028\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.4345e-04 - val_loss: 0.0047\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "958e4579",
   "metadata": {
    "papermill": {
     "duration": 0.009516,
     "end_time": "2025-05-27T14:12:55.144031",
     "exception": false,
     "start_time": "2025-05-27T14:12:55.134515",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3a68cf07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:12:55.164593Z",
     "iopub.status.busy": "2025-05-27T14:12:55.163854Z",
     "iopub.status.idle": "2025-05-27T14:12:55.712939Z",
     "shell.execute_reply": "2025-05-27T14:12:55.712043Z"
    },
    "papermill": {
     "duration": 0.560538,
     "end_time": "2025-05-27T14:12:55.714151",
     "exception": false,
     "start_time": "2025-05-27T14:12:55.153613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Final Test RMSE: 47363.8557\n",
      "Final Test MAPE: 0.0268\n",
      "Final Test MSLE: 0.001196\n",
      "Final Test R² Score: 0.9227\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5df00155",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:12:55.735626Z",
     "iopub.status.busy": "2025-05-27T14:12:55.735378Z",
     "iopub.status.idle": "2025-05-27T14:12:56.044567Z",
     "shell.execute_reply": "2025-05-27T14:12:56.043890Z"
    },
    "papermill": {
     "duration": 0.321989,
     "end_time": "2025-05-27T14:12:56.046456",
     "exception": false,
     "start_time": "2025-05-27T14:12:55.724467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5aaf552",
   "metadata": {
    "papermill": {
     "duration": 0.011142,
     "end_time": "2025-05-27T14:12:56.069162",
     "exception": false,
     "start_time": "2025-05-27T14:12:56.058020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "723322bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T14:12:56.092096Z",
     "iopub.status.busy": "2025-05-27T14:12:56.091826Z",
     "iopub.status.idle": "2025-05-27T14:12:56.125411Z",
     "shell.execute_reply": "2025-05-27T14:12:56.124555Z"
    },
    "papermill": {
     "duration": 0.046603,
     "end_time": "2025-05-27T14:12:56.126599",
     "exception": false,
     "start_time": "2025-05-27T14:12:56.079996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 139.375328,
   "end_time": "2025-05-27T14:12:59.071202",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-27T14:10:39.695874",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
