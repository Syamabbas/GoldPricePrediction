{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "28ae3ab4",
   "metadata": {
    "papermill": {
     "duration": 0.004135,
     "end_time": "2025-07-27T07:49:10.659868",
     "exception": false,
     "start_time": "2025-07-27T07:49:10.655733",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with GRU\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "26b4706b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:10.667697Z",
     "iopub.status.busy": "2025-07-27T07:49:10.667448Z",
     "iopub.status.idle": "2025-07-27T07:49:12.502707Z",
     "shell.execute_reply": "2025-07-27T07:49:12.501782Z"
    },
    "papermill": {
     "duration": 1.84076,
     "end_time": "2025-07-27T07:49:12.504117",
     "exception": false,
     "start_time": "2025-07-27T07:49:10.663357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1d79e09d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:12.512529Z",
     "iopub.status.busy": "2025-07-27T07:49:12.512216Z",
     "iopub.status.idle": "2025-07-27T07:49:33.134622Z",
     "shell.execute_reply": "2025-07-27T07:49:33.133961Z"
    },
    "papermill": {
     "duration": 20.628436,
     "end_time": "2025-07-27T07:49:33.136222",
     "exception": false,
     "start_time": "2025-07-27T07:49:12.507786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-27 07:49:17.550237: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753602557.910129      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753602558.011046      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef7b6d7e",
   "metadata": {
    "papermill": {
     "duration": 0.003263,
     "end_time": "2025-07-27T07:49:33.143315",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.140052",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4bd4869c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.151086Z",
     "iopub.status.busy": "2025-07-27T07:49:33.150610Z",
     "iopub.status.idle": "2025-07-27T07:49:33.182507Z",
     "shell.execute_reply": "2025-07-27T07:49:33.181627Z"
    },
    "papermill": {
     "duration": 0.037159,
     "end_time": "2025-07-27T07:49:33.183797",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.146638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply\n",
      "0  1/3/2017  606000          13485                      116.9    4936881.99\n",
      "1  1/4/2017  606000          13478                      116.9    4936881.99\n",
      "2  1/5/2017  607000          13370                      116.9    4936881.99\n",
      "3  1/6/2017  606000          13347                      116.9    4936881.99\n",
      "4  1/9/2017  602000          13385                      116.9    4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('../input/Final Dataset Gold Prediction.csv')  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4515d6a5",
   "metadata": {
    "papermill": {
     "duration": 0.003256,
     "end_time": "2025-07-27T07:49:33.190721",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.187465",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80f97072",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.198298Z",
     "iopub.status.busy": "2025-07-27T07:49:33.198074Z",
     "iopub.status.idle": "2025-07-27T07:49:33.225647Z",
     "shell.execute_reply": "2025-07-27T07:49:33.224835Z"
    },
    "papermill": {
     "duration": 0.032691,
     "end_time": "2025-07-27T07:49:33.226770",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.194079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9cdfdcb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.234681Z",
     "iopub.status.busy": "2025-07-27T07:49:33.234485Z",
     "iopub.status.idle": "2025-07-27T07:49:33.246995Z",
     "shell.execute_reply": "2025-07-27T07:49:33.246430Z"
    },
    "papermill": {
     "duration": 0.017764,
     "end_time": "2025-07-27T07:49:33.248170",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.230406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dea893ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.255833Z",
     "iopub.status.busy": "2025-07-27T07:49:33.255606Z",
     "iopub.status.idle": "2025-07-27T07:49:33.262459Z",
     "shell.execute_reply": "2025-07-27T07:49:33.261684Z"
    },
    "papermill": {
     "duration": 0.011966,
     "end_time": "2025-07-27T07:49:33.263618",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.251652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6cfb65f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.271211Z",
     "iopub.status.busy": "2025-07-27T07:49:33.271002Z",
     "iopub.status.idle": "2025-07-27T07:49:33.275833Z",
     "shell.execute_reply": "2025-07-27T07:49:33.275335Z"
    },
    "papermill": {
     "duration": 0.009952,
     "end_time": "2025-07-27T07:49:33.276881",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.266929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ecaabd8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.284779Z",
     "iopub.status.busy": "2025-07-27T07:49:33.284555Z",
     "iopub.status.idle": "2025-07-27T07:49:33.287864Z",
     "shell.execute_reply": "2025-07-27T07:49:33.287179Z"
    },
    "papermill": {
     "duration": 0.008467,
     "end_time": "2025-07-27T07:49:33.288912",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.280445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate']\n",
    "\n",
    "# 'Kurs', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "442f491a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.296571Z",
     "iopub.status.busy": "2025-07-27T07:49:33.296344Z",
     "iopub.status.idle": "2025-07-27T07:49:33.303623Z",
     "shell.execute_reply": "2025-07-27T07:49:33.302832Z"
    },
    "papermill": {
     "duration": 0.012364,
     "end_time": "2025-07-27T07:49:33.304823",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.292459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "728a3e06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.312702Z",
     "iopub.status.busy": "2025-07-27T07:49:33.312489Z",
     "iopub.status.idle": "2025-07-27T07:49:33.320466Z",
     "shell.execute_reply": "2025-07-27T07:49:33.319972Z"
    },
    "papermill": {
     "duration": 0.013116,
     "end_time": "2025-07-27T07:49:33.321517",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.308401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 100\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f6b14ca9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.329453Z",
     "iopub.status.busy": "2025-07-27T07:49:33.328911Z",
     "iopub.status.idle": "2025-07-27T07:49:33.332355Z",
     "shell.execute_reply": "2025-07-27T07:49:33.331843Z"
    },
    "papermill": {
     "duration": 0.008416,
     "end_time": "2025-07-27T07:49:33.333400",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.324984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d81c9ff",
   "metadata": {
    "papermill": {
     "duration": 0.003273,
     "end_time": "2025-07-27T07:49:33.340654",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.337381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b34967b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:49:33.348220Z",
     "iopub.status.busy": "2025-07-27T07:49:33.347682Z",
     "iopub.status.idle": "2025-07-27T07:51:57.644731Z",
     "shell.execute_reply": "2025-07-27T07:51:57.643856Z"
    },
    "papermill": {
     "duration": 144.302071,
     "end_time": "2025-07-27T07:51:57.645997",
     "exception": false,
     "start_time": "2025-07-27T07:49:33.343926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753602575.255641      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753602575.256460      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753602580.595907      63 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=20654.8379\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=23342.2176\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 53ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=19590.2558\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=22525.4135\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=25494.9019\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=26626.9113\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=27304.0736\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=22550.1172\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=15818.4213\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=16657.3090\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=17508.6645\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=16316.0355\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=17357.9724\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=20700.8890\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=16346.3670\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=24580.9606\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "8      64      0.2         0.0010          32  15818.421278  0.009785   \n",
      "11     64      0.2         0.0005          64  16316.035549  0.009448   \n",
      "14     64      0.3         0.0005          32  16346.366999  0.010181   \n",
      "9      64      0.2         0.0010          64  16657.309038  0.009784   \n",
      "12     64      0.3         0.0010          32  17357.972379  0.011358   \n",
      "\n",
      "          R2  \n",
      "8   0.991305  \n",
      "11  0.990749  \n",
      "14  0.990715  \n",
      "9   0.990358  \n",
      "12  0.989530  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(GRU(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(GRU(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8d0a652",
   "metadata": {
    "papermill": {
     "duration": 0.006259,
     "end_time": "2025-07-27T07:51:57.658896",
     "exception": false,
     "start_time": "2025-07-27T07:51:57.652637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "92d117c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:51:57.672504Z",
     "iopub.status.busy": "2025-07-27T07:51:57.672286Z",
     "iopub.status.idle": "2025-07-27T07:52:11.086225Z",
     "shell.execute_reply": "2025-07-27T07:52:11.085511Z"
    },
    "papermill": {
     "duration": 13.422376,
     "end_time": "2025-07-27T07:52:11.087530",
     "exception": false,
     "start_time": "2025-07-27T07:51:57.665154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 22ms/step - loss: 0.0239 - val_loss: 0.0018\n",
      "Epoch 2/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0015 - val_loss: 4.4547e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0013 - val_loss: 4.8363e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0011 - val_loss: 5.1734e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 9.7917e-04 - val_loss: 0.0019\n",
      "Epoch 6/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.0011 - val_loss: 3.8392e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 9.1356e-04 - val_loss: 3.6152e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 9.8731e-04 - val_loss: 5.1986e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 8.1645e-04 - val_loss: 2.6898e-04\n",
      "Epoch 10/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 8.3283e-04 - val_loss: 4.4990e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 8.0040e-04 - val_loss: 2.9189e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 8.9940e-04 - val_loss: 0.0010\n",
      "Epoch 13/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 7.9761e-04 - val_loss: 4.8055e-04\n",
      "Epoch 14/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.7013e-04 - val_loss: 3.1249e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 6.6034e-04 - val_loss: 3.4464e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 7.4683e-04 - val_loss: 3.3986e-04\n",
      "Epoch 17/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 5.7208e-04 - val_loss: 4.3952e-04\n",
      "Epoch 18/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.3946e-04 - val_loss: 7.3401e-04\n",
      "Epoch 19/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 6.3042e-04 - val_loss: 0.0013\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(GRU(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(GRU(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76d3bc77",
   "metadata": {
    "papermill": {
     "duration": 0.01353,
     "end_time": "2025-07-27T07:52:11.116590",
     "exception": false,
     "start_time": "2025-07-27T07:52:11.103060",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "574189bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:52:11.146006Z",
     "iopub.status.busy": "2025-07-27T07:52:11.145141Z",
     "iopub.status.idle": "2025-07-27T07:52:11.660702Z",
     "shell.execute_reply": "2025-07-27T07:52:11.660022Z"
    },
    "papermill": {
     "duration": 0.531454,
     "end_time": "2025-07-27T07:52:11.661819",
     "exception": false,
     "start_time": "2025-07-27T07:52:11.130365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Final Test RMSE: 15908.4502\n",
      "Final Test MAPE: 0.0095\n",
      "Final Test MSLE: 0.000152\n",
      "Final Test R² Score: 0.9912\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3d27ef5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:52:11.691021Z",
     "iopub.status.busy": "2025-07-27T07:52:11.690768Z",
     "iopub.status.idle": "2025-07-27T07:52:12.020389Z",
     "shell.execute_reply": "2025-07-27T07:52:12.019521Z"
    },
    "papermill": {
     "duration": 0.345875,
     "end_time": "2025-07-27T07:52:12.021789",
     "exception": false,
     "start_time": "2025-07-27T07:52:11.675914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aedf20a",
   "metadata": {
    "papermill": {
     "duration": 0.014195,
     "end_time": "2025-07-27T07:52:12.051461",
     "exception": false,
     "start_time": "2025-07-27T07:52:12.037266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7c978ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T07:52:12.081883Z",
     "iopub.status.busy": "2025-07-27T07:52:12.081648Z",
     "iopub.status.idle": "2025-07-27T07:52:12.120153Z",
     "shell.execute_reply": "2025-07-27T07:52:12.119498Z"
    },
    "papermill": {
     "duration": 0.054992,
     "end_time": "2025-07-27T07:52:12.121209",
     "exception": false,
     "start_time": "2025-07-27T07:52:12.066217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 189.991125,
   "end_time": "2025-07-27T07:52:14.964173",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-27T07:49:04.973048",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
