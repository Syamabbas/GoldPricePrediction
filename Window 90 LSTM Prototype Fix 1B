{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2f16bf8c",
   "metadata": {
    "papermill": {
     "duration": 0.003741,
     "end_time": "2025-07-27T06:51:57.349586",
     "exception": false,
     "start_time": "2025-07-27T06:51:57.345845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3353da16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:51:57.357028Z",
     "iopub.status.busy": "2025-07-27T06:51:57.356807Z",
     "iopub.status.idle": "2025-07-27T06:51:59.263975Z",
     "shell.execute_reply": "2025-07-27T06:51:59.263082Z"
    },
    "papermill": {
     "duration": 1.912078,
     "end_time": "2025-07-27T06:51:59.265287",
     "exception": false,
     "start_time": "2025-07-27T06:51:57.353209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6ff94baa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:51:59.273407Z",
     "iopub.status.busy": "2025-07-27T06:51:59.272641Z",
     "iopub.status.idle": "2025-07-27T06:52:19.327727Z",
     "shell.execute_reply": "2025-07-27T06:52:19.327088Z"
    },
    "papermill": {
     "duration": 20.0602,
     "end_time": "2025-07-27T06:52:19.329096",
     "exception": false,
     "start_time": "2025-07-27T06:51:59.268896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-27 06:52:04.648334: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753599124.990388      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753599125.094802      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c23519db",
   "metadata": {
    "papermill": {
     "duration": 0.003156,
     "end_time": "2025-07-27T06:52:19.335816",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.332660",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c359b3c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.343100Z",
     "iopub.status.busy": "2025-07-27T06:52:19.342703Z",
     "iopub.status.idle": "2025-07-27T06:52:19.383486Z",
     "shell.execute_reply": "2025-07-27T06:52:19.382822Z"
    },
    "papermill": {
     "duration": 0.045647,
     "end_time": "2025-07-27T06:52:19.384616",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.338969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply\n",
      "0  1/3/2017  606000          13485                      116.9    4936881.99\n",
      "1  1/4/2017  606000          13478                      116.9    4936881.99\n",
      "2  1/5/2017  607000          13370                      116.9    4936881.99\n",
      "3  1/6/2017  606000          13347                      116.9    4936881.99\n",
      "4  1/9/2017  602000          13385                      116.9    4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1e35e98",
   "metadata": {
    "papermill": {
     "duration": 0.003084,
     "end_time": "2025-07-27T06:52:19.391030",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.387946",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "581d6b0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.398613Z",
     "iopub.status.busy": "2025-07-27T06:52:19.398393Z",
     "iopub.status.idle": "2025-07-27T06:52:19.428087Z",
     "shell.execute_reply": "2025-07-27T06:52:19.427461Z"
    },
    "papermill": {
     "duration": 0.03482,
     "end_time": "2025-07-27T06:52:19.429201",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.394381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f0b6c94f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.436707Z",
     "iopub.status.busy": "2025-07-27T06:52:19.436492Z",
     "iopub.status.idle": "2025-07-27T06:52:19.448580Z",
     "shell.execute_reply": "2025-07-27T06:52:19.448061Z"
    },
    "papermill": {
     "duration": 0.017086,
     "end_time": "2025-07-27T06:52:19.449678",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.432592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b43c02cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.457051Z",
     "iopub.status.busy": "2025-07-27T06:52:19.456634Z",
     "iopub.status.idle": "2025-07-27T06:52:19.462168Z",
     "shell.execute_reply": "2025-07-27T06:52:19.461637Z"
    },
    "papermill": {
     "duration": 0.010199,
     "end_time": "2025-07-27T06:52:19.463132",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.452933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b933bbb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.470730Z",
     "iopub.status.busy": "2025-07-27T06:52:19.470131Z",
     "iopub.status.idle": "2025-07-27T06:52:19.474922Z",
     "shell.execute_reply": "2025-07-27T06:52:19.474390Z"
    },
    "papermill": {
     "duration": 0.009519,
     "end_time": "2025-07-27T06:52:19.475913",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.466394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ea67173b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.483575Z",
     "iopub.status.busy": "2025-07-27T06:52:19.483027Z",
     "iopub.status.idle": "2025-07-27T06:52:19.485982Z",
     "shell.execute_reply": "2025-07-27T06:52:19.485502Z"
    },
    "papermill": {
     "duration": 0.007677,
     "end_time": "2025-07-27T06:52:19.486915",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.479238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Exchange Rate']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f695be18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.494192Z",
     "iopub.status.busy": "2025-07-27T06:52:19.493994Z",
     "iopub.status.idle": "2025-07-27T06:52:19.500446Z",
     "shell.execute_reply": "2025-07-27T06:52:19.499881Z"
    },
    "papermill": {
     "duration": 0.011097,
     "end_time": "2025-07-27T06:52:19.501356",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.490259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ecd4ff8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.508747Z",
     "iopub.status.busy": "2025-07-27T06:52:19.508563Z",
     "iopub.status.idle": "2025-07-27T06:52:19.518797Z",
     "shell.execute_reply": "2025-07-27T06:52:19.518146Z"
    },
    "papermill": {
     "duration": 0.0151,
     "end_time": "2025-07-27T06:52:19.519815",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.504715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 100\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "37809466",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.527265Z",
     "iopub.status.busy": "2025-07-27T06:52:19.526866Z",
     "iopub.status.idle": "2025-07-27T06:52:19.529948Z",
     "shell.execute_reply": "2025-07-27T06:52:19.529463Z"
    },
    "papermill": {
     "duration": 0.007823,
     "end_time": "2025-07-27T06:52:19.530926",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.523103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8504494c",
   "metadata": {
    "papermill": {
     "duration": 0.003201,
     "end_time": "2025-07-27T06:52:19.537540",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.534339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9c5ae429",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:52:19.544898Z",
     "iopub.status.busy": "2025-07-27T06:52:19.544718Z",
     "iopub.status.idle": "2025-07-27T06:54:22.695509Z",
     "shell.execute_reply": "2025-07-27T06:54:22.694670Z"
    },
    "papermill": {
     "duration": 123.155909,
     "end_time": "2025-07-27T06:54:22.696739",
     "exception": false,
     "start_time": "2025-07-27T06:52:19.540830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753599141.942415      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753599141.943124      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1753599147.122354      62 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=49217.6729\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=48934.9536\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=35814.5815\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 52ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=69265.0352\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=55117.7768\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=30318.2838\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=39748.7574\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=50707.4998\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=33048.5803\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=44625.6045\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=37284.8752\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=21518.9360\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=24879.0203\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 61ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=37019.8804\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=38537.1821\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=23432.8388\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "11     64      0.2         0.0005          64  21518.935974  0.012830   \n",
      "15     64      0.3         0.0005          64  23432.838787  0.014511   \n",
      "12     64      0.3         0.0010          32  24879.020300  0.015570   \n",
      "5      32      0.3         0.0010          64  30318.283840  0.016912   \n",
      "8      64      0.2         0.0010          32  33048.580285  0.020181   \n",
      "\n",
      "          R2  \n",
      "11  0.983909  \n",
      "15  0.980919  \n",
      "12  0.978492  \n",
      "5   0.968059  \n",
      "8   0.962047  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "690ea314",
   "metadata": {
    "papermill": {
     "duration": 0.006033,
     "end_time": "2025-07-27T06:54:22.708957",
     "exception": false,
     "start_time": "2025-07-27T06:54:22.702924",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0a3a8e0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:54:22.721177Z",
     "iopub.status.busy": "2025-07-27T06:54:22.720969Z",
     "iopub.status.idle": "2025-07-27T06:54:30.756393Z",
     "shell.execute_reply": "2025-07-27T06:54:30.755650Z"
    },
    "papermill": {
     "duration": 8.043063,
     "end_time": "2025-07-27T06:54:30.757668",
     "exception": false,
     "start_time": "2025-07-27T06:54:22.714605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 0.0204 - val_loss: 0.0011\n",
      "Epoch 2/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0019 - val_loss: 0.0050\n",
      "Epoch 3/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0013 - val_loss: 0.0067\n",
      "Epoch 4/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0013 - val_loss: 0.0055\n",
      "Epoch 5/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0012 - val_loss: 0.0079\n",
      "Epoch 6/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0011 - val_loss: 0.0074\n",
      "Epoch 7/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 9.7078e-04 - val_loss: 0.0049\n",
      "Epoch 8/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0011 - val_loss: 0.0061\n",
      "Epoch 9/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.5977e-04 - val_loss: 0.0067\n",
      "Epoch 10/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 9.8364e-04 - val_loss: 0.0054\n",
      "Epoch 11/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 8.8198e-04 - val_loss: 0.0056\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f3d125",
   "metadata": {
    "papermill": {
     "duration": 0.010027,
     "end_time": "2025-07-27T06:54:30.778427",
     "exception": false,
     "start_time": "2025-07-27T06:54:30.768400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4bd5a580",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:54:30.799649Z",
     "iopub.status.busy": "2025-07-27T06:54:30.799175Z",
     "iopub.status.idle": "2025-07-27T06:54:31.310976Z",
     "shell.execute_reply": "2025-07-27T06:54:31.310048Z"
    },
    "papermill": {
     "duration": 0.523702,
     "end_time": "2025-07-27T06:54:31.312160",
     "exception": false,
     "start_time": "2025-07-27T06:54:30.788458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Final Test RMSE: 32096.2579\n",
      "Final Test MAPE: 0.0219\n",
      "Final Test MSLE: 0.000672\n",
      "Final Test R² Score: 0.9642\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b9758807",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:54:31.333967Z",
     "iopub.status.busy": "2025-07-27T06:54:31.333767Z",
     "iopub.status.idle": "2025-07-27T06:54:31.669563Z",
     "shell.execute_reply": "2025-07-27T06:54:31.668868Z"
    },
    "papermill": {
     "duration": 0.348521,
     "end_time": "2025-07-27T06:54:31.671404",
     "exception": false,
     "start_time": "2025-07-27T06:54:31.322883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2464cdf0",
   "metadata": {
    "papermill": {
     "duration": 0.010986,
     "end_time": "2025-07-27T06:54:31.694092",
     "exception": false,
     "start_time": "2025-07-27T06:54:31.683106",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8d2ec85f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-27T06:54:31.717626Z",
     "iopub.status.busy": "2025-07-27T06:54:31.717413Z",
     "iopub.status.idle": "2025-07-27T06:54:31.752845Z",
     "shell.execute_reply": "2025-07-27T06:54:31.752049Z"
    },
    "papermill": {
     "duration": 0.048206,
     "end_time": "2025-07-27T06:54:31.753982",
     "exception": false,
     "start_time": "2025-07-27T06:54:31.705776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 162.955204,
   "end_time": "2025-07-27T06:54:34.647191",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-27T06:51:51.691987",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
