{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "daf1d244",
   "metadata": {
    "papermill": {
     "duration": 0.003855,
     "end_time": "2025-06-29T09:39:23.107143",
     "exception": false,
     "start_time": "2025-06-29T09:39:23.103288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1B: Menggunakan harga emas historis + nilai tukar (USD/IDR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc68e00a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:23.114418Z",
     "iopub.status.busy": "2025-06-29T09:39:23.113950Z",
     "iopub.status.idle": "2025-06-29T09:39:24.560916Z",
     "shell.execute_reply": "2025-06-29T09:39:24.560129Z"
    },
    "papermill": {
     "duration": 1.451754,
     "end_time": "2025-06-29T09:39:24.562087",
     "exception": false,
     "start_time": "2025-06-29T09:39:23.110333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b726cd39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:24.569743Z",
     "iopub.status.busy": "2025-06-29T09:39:24.569426Z",
     "iopub.status.idle": "2025-06-29T09:39:38.035304Z",
     "shell.execute_reply": "2025-06-29T09:39:38.034539Z"
    },
    "papermill": {
     "duration": 13.471121,
     "end_time": "2025-06-29T09:39:38.036797",
     "exception": false,
     "start_time": "2025-06-29T09:39:24.565676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-29 09:39:27.255530: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751189967.471276      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751189967.530874      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b58ce82",
   "metadata": {
    "papermill": {
     "duration": 0.003119,
     "end_time": "2025-06-29T09:39:38.043447",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.040328",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "24875ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.051046Z",
     "iopub.status.busy": "2025-06-29T09:39:38.050386Z",
     "iopub.status.idle": "2025-06-29T09:39:38.076316Z",
     "shell.execute_reply": "2025-06-29T09:39:38.075537Z"
    },
    "papermill": {
     "duration": 0.030724,
     "end_time": "2025-06-29T09:39:38.077371",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.046647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
      "0  1/3/2017  606000  13485            116.9         4936881.99\n",
      "1  1/4/2017  606000  13478            116.9         4936881.99\n",
      "2  1/5/2017  607000  13370            116.9         4936881.99\n",
      "3  1/6/2017  606000  13347            116.9         4936881.99\n",
      "4  1/9/2017  602000  13385            116.9         4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4a83332",
   "metadata": {
    "papermill": {
     "duration": 0.003028,
     "end_time": "2025-06-29T09:39:38.083620",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.080592",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6bbd4ebd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.090726Z",
     "iopub.status.busy": "2025-06-29T09:39:38.090511Z",
     "iopub.status.idle": "2025-06-29T09:39:38.109855Z",
     "shell.execute_reply": "2025-06-29T09:39:38.109045Z"
    },
    "papermill": {
     "duration": 0.024249,
     "end_time": "2025-06-29T09:39:38.111040",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.086791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f0944ed1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.118262Z",
     "iopub.status.busy": "2025-06-29T09:39:38.118068Z",
     "iopub.status.idle": "2025-06-29T09:39:38.129312Z",
     "shell.execute_reply": "2025-06-29T09:39:38.128774Z"
    },
    "papermill": {
     "duration": 0.016131,
     "end_time": "2025-06-29T09:39:38.130347",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.114216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e1ca9994",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.137831Z",
     "iopub.status.busy": "2025-06-29T09:39:38.137650Z",
     "iopub.status.idle": "2025-06-29T09:39:38.143755Z",
     "shell.execute_reply": "2025-06-29T09:39:38.143080Z"
    },
    "papermill": {
     "duration": 0.010904,
     "end_time": "2025-06-29T09:39:38.144767",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.133863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a6ed06e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.152598Z",
     "iopub.status.busy": "2025-06-29T09:39:38.151975Z",
     "iopub.status.idle": "2025-06-29T09:39:38.156702Z",
     "shell.execute_reply": "2025-06-29T09:39:38.156113Z"
    },
    "papermill": {
     "duration": 0.009559,
     "end_time": "2025-06-29T09:39:38.157739",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.148180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e1aaf7ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.165795Z",
     "iopub.status.busy": "2025-06-29T09:39:38.165121Z",
     "iopub.status.idle": "2025-06-29T09:39:38.168280Z",
     "shell.execute_reply": "2025-06-29T09:39:38.167794Z"
    },
    "papermill": {
     "duration": 0.008075,
     "end_time": "2025-06-29T09:39:38.169300",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.161225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Kurs']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8afe45c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.177304Z",
     "iopub.status.busy": "2025-06-29T09:39:38.176841Z",
     "iopub.status.idle": "2025-06-29T09:39:38.182765Z",
     "shell.execute_reply": "2025-06-29T09:39:38.182242Z"
    },
    "papermill": {
     "duration": 0.010963,
     "end_time": "2025-06-29T09:39:38.183854",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.172891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e632037e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.191261Z",
     "iopub.status.busy": "2025-06-29T09:39:38.190984Z",
     "iopub.status.idle": "2025-06-29T09:39:38.200517Z",
     "shell.execute_reply": "2025-06-29T09:39:38.199856Z"
    },
    "papermill": {
     "duration": 0.014442,
     "end_time": "2025-06-29T09:39:38.201599",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.187157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 100\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3eb71f42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.209054Z",
     "iopub.status.busy": "2025-06-29T09:39:38.208670Z",
     "iopub.status.idle": "2025-06-29T09:39:38.212202Z",
     "shell.execute_reply": "2025-06-29T09:39:38.211523Z"
    },
    "papermill": {
     "duration": 0.008368,
     "end_time": "2025-06-29T09:39:38.213213",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.204845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ac1a773",
   "metadata": {
    "papermill": {
     "duration": 0.003187,
     "end_time": "2025-06-29T09:39:38.219836",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.216649",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8e23c7d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:39:38.227187Z",
     "iopub.status.busy": "2025-06-29T09:39:38.227019Z",
     "iopub.status.idle": "2025-06-29T09:41:43.623253Z",
     "shell.execute_reply": "2025-06-29T09:41:43.622474Z"
    },
    "papermill": {
     "duration": 125.401214,
     "end_time": "2025-06-29T09:41:43.624400",
     "exception": false,
     "start_time": "2025-06-29T09:39:38.223186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751189979.526738      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1751189979.527418      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1751189984.248536      61 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=37190.8285\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=31197.0081\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=91170.9070\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=47368.9584\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=48460.3795\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=33177.0910\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=72650.5459\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=26672.8580\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=21530.3790\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=28195.3508\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=39916.9284\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=29682.8607\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=52036.5692\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=40000.5970\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=23596.1551\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 27ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=21635.6844\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "8      64      0.2         0.0010          32  21530.379041  0.013239   \n",
      "15     64      0.3         0.0005          64  21635.684432  0.012651   \n",
      "14     64      0.3         0.0005          32  23596.155104  0.014008   \n",
      "7      32      0.3         0.0005          64  26672.857955  0.015565   \n",
      "9      64      0.2         0.0010          64  28195.350754  0.017648   \n",
      "\n",
      "          R2  \n",
      "8   0.983892  \n",
      "15  0.983734  \n",
      "14  0.980653  \n",
      "7   0.975278  \n",
      "9   0.972375  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08e0fc63",
   "metadata": {
    "papermill": {
     "duration": 0.006841,
     "end_time": "2025-06-29T09:41:43.638336",
     "exception": false,
     "start_time": "2025-06-29T09:41:43.631495",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "298840ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:41:43.652806Z",
     "iopub.status.busy": "2025-06-29T09:41:43.652528Z",
     "iopub.status.idle": "2025-06-29T09:41:52.521844Z",
     "shell.execute_reply": "2025-06-29T09:41:52.521011Z"
    },
    "papermill": {
     "duration": 8.87819,
     "end_time": "2025-06-29T09:41:52.523228",
     "exception": false,
     "start_time": "2025-06-29T09:41:43.645038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - loss: 0.0260 - val_loss: 6.0338e-04\n",
      "Epoch 2/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0018 - val_loss: 0.0033\n",
      "Epoch 3/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0013 - val_loss: 0.0019\n",
      "Epoch 4/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0012 - val_loss: 0.0026\n",
      "Epoch 5/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0011 - val_loss: 0.0037\n",
      "Epoch 6/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0011 - val_loss: 0.0043\n",
      "Epoch 7/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.9991e-04 - val_loss: 0.0050\n",
      "Epoch 8/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.0011 - val_loss: 0.0019\n",
      "Epoch 9/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.9515e-04 - val_loss: 0.0043\n",
      "Epoch 10/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.7696e-04 - val_loss: 0.0077\n",
      "Epoch 11/150\n",
      "\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 9.5131e-04 - val_loss: 0.0059\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a0ce64",
   "metadata": {
    "papermill": {
     "duration": 0.010657,
     "end_time": "2025-06-29T09:41:52.545833",
     "exception": false,
     "start_time": "2025-06-29T09:41:52.535176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8dadb93f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:41:52.568064Z",
     "iopub.status.busy": "2025-06-29T09:41:52.567853Z",
     "iopub.status.idle": "2025-06-29T09:41:53.160097Z",
     "shell.execute_reply": "2025-06-29T09:41:53.159217Z"
    },
    "papermill": {
     "duration": 0.604814,
     "end_time": "2025-06-29T09:41:53.161391",
     "exception": false,
     "start_time": "2025-06-29T09:41:52.556577",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Final Test RMSE: 23826.7978\n",
      "Final Test MAPE: 0.0158\n",
      "Final Test MSLE: 0.000383\n",
      "Final Test R² Score: 0.9803\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d08d3423",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:41:53.188316Z",
     "iopub.status.busy": "2025-06-29T09:41:53.188083Z",
     "iopub.status.idle": "2025-06-29T09:41:53.494066Z",
     "shell.execute_reply": "2025-06-29T09:41:53.493314Z"
    },
    "papermill": {
     "duration": 0.321435,
     "end_time": "2025-06-29T09:41:53.496113",
     "exception": false,
     "start_time": "2025-06-29T09:41:53.174678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABW0AAAJOCAYAAADMCCWlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1zVdfvH8dc57L0REAXce6c2zJ2r0rJppbb3Xne/7ru0u7vu5t3epbaX2TBLTTNH5t4TBUWm7D0O53x/fxw4ioCCgpC8n48HDzjfeZ0Dpry7zvUxGYZhICIiIiIiIiIiIiLNgrmpCxARERERERERERGRIxTaioiIiIiIiIiIiDQjCm1FREREREREREREmhGFtiIiIiIiIiIiIiLNiEJbERERERERERERkWZEoa2IiIiIiIiIiIhIM6LQVkRERERERERERKQZUWgrIiIiIiIiIiIi0owotBURERERERERERFpRhTaioiIiDSy2bNnYzKZOHDgwAmPjY6OZvr06Y1e07JlyzCZTCxbtqzR79WczJgxA5PJVGVbQ7/m06dPJzo6usGu11SGDRvGsGHDGvUeNX0/mpNT+XNSnz/3IiIiIsdSaCsiIiJylPj4eO666y46deqEp6cnnp6edOvWjTvvvJOtW7c2dXkOJpPJ8WE2m4mIiOCCCy5o9iHs37XuYyUnJzNjxgw2b97c1KWctKO/F0d/hIWFNXVp1UyfPh2TyYSvry/FxcXV9sfGxjrqf/HFF5ugQhEREZGG5dzUBYiIiIg0F/Pnz+fKK6/E2dmZa665ht69e2M2m9m9ezffffcdb7/9NvHx8URFRTV1qQCMHj2aqVOnYhgG8fHxvPXWW4wYMYKff/6ZcePGHffc888/n+LiYlxdXU9TtUecSt2NYc+ePZjN9etlSE5OZubMmURHR9OnT58q+95//31sNlsDVth4Kr8XR/Pw8ABg0aJFTVFSrZydnSkqKuKnn37iiiuuqLLvs88+w93dnZKSkiaqTkRERKRhKbQVERERAfbv389VV11FVFQUS5YsITw8vMr+5557jrfeeqve4V5j6tSpE9dee63j8SWXXEKvXr145ZVXag0/S0pKcHV1xWw24+7ufrpKreJU625obm5uDXo9FxeXBr1eYzr2e3G0pgj0j8fNzY1zzz2XL774olpo+/nnnzNhwgTmzp3bRNWJiIiINKzm81uHiIiISBN6/vnnKSwsZNasWdUCW7B3+d1zzz20adOmyvalS5cyZMgQvLy88Pf3Z+LEiezateuE9zMMg6effprIyEg8PT0ZPnw4O3bsOKXn0LNnT4KDg4mPjweOzOP88ssv+ec//0nr1q3x9PQkLy+v1lmda9asYfz48QQEBODl5UWvXr149dVXqxyze/duLrvsMgIDA3F3d2fAgAH8+OOPp6XuyhrHjh2Ln58fnp6eDB06lFWrVlW77sqVKznrrLNwd3enffv2vPvuuzXev6aZtjk5Odx///1ER0fj5uZGZGQkU6dOJSMjg2XLlnHWWWcBcP311zvelj979myg5pm2hYWFPPjgg7Rp0wY3Nzc6d+7Miy++iGEYVY4zmUzcddddfP/99/To0QM3Nze6d+/Or7/+Wt+X9ZQdO9O28vvy9ddf85///IfIyEjc3d0ZOXIk+/btq3LuihUruPzyy2nbti1ubm60adOG+++/v8bRBvUxZcoUfvnlF3Jychzb1q1bR2xsLFOmTKnxnLi4OC6//HICAwPx9PRk8ODB/Pzzz9WOS0xMZNKkSXh5eREaGsr9999PaWlpjdes68+giIiIyMlSp62IiIgI9tEIHTp0YNCgQXU+57fffmPcuHG0a9eOGTNmUFxczOuvv865557Lxo0bj7sY1RNPPMHTTz/N+PHjGT9+PBs3buSCCy6grKzspJ9DdnY22dnZdOjQocr2f//737i6uvLQQw9RWlpaawfl4sWLufDCCwkPD+fee+8lLCyMXbt2MX/+fO69914AduzYwbnnnkvr1q35xz/+gZeXF19//TWTJk1i7ty5XHLJJY1a99KlSxk3bhz9+/fnySefxGw2M2vWLEaMGMGKFSsYOHAgANu2beOCCy4gJCSEGTNmUF5ezpNPPkmrVq1OWE9BQQFDhgxh165d3HDDDfTr14+MjAx+/PFHEhMT6dq1K0899RRPPPEEt9xyC0OGDAHgnHPOqfF6hmFw8cUX8/vvv3PjjTfSp08fFi5cyMMPP0xSUhL/+9//qhy/cuVKvvvuO+644w58fHx47bXXmDx5MgkJCQQFBdX79T2ekpISMjIyqmzz8fE5bvfxf//7X8xmMw899BC5ubk8//zzXHPNNaxZs8ZxzDfffENRURG33347QUFBrF27ltdff53ExES++eabk6730ksv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jz76CLPZzFVXXVXrcVFRUbX+Ga3cX/l5+/btGIZR5Xt77Ll1/RkUEREROVWaaXscd911F6tXr+bLL79k69atXH755YwdO9bxC8BPP/1Eu3btmD9/PjExMURHR3PTTTep01ZERORv6JFHHsHT05MbbriBtLS0avuP7XIMDw+nT58+zJkzh5ycHMf27du3s2jRIsaPH1/rvUaNGoWLiwuvv/56leu+8sorp/w8Tla/fv2IiYnhlVdeqfJ84MhzDw0NZdiwYbz77rukpKRUu0Z6enqj1ti/f3/at2/Piy++WOMoi8r7Ozk5MWbMGL7//nsSEhIc+3ft2sXChQtPeJ/JkyezZcsW5s2bV21f5WtRGcgf+1rVZPz48VitVt54440q2//3v/9hMpmO20RQH6NGjarycWzn7elS2Yl79M+2YRi8+uqrDXaP4cOH8+9//5s33niDsLCwWo8bP348a9euZfXq1Y5thYWFvPfee0RHR9OtWzfHccnJyXz77beO44qKinjvvfeqXK+uP4MiIiIip6pFd9oeT0JCArNmzSIhIYGIiAjA/lbAX3/9lVmzZvHMM88QFxfHwYMH+eabb/j444+xWq3cf//9XHbZZSxdurSJn4GIiIjUR8eOHfn888+5+uqr6dy5M9dccw29e/fGMAzi4+P5/PPPMZvNREZGOs554YUXGDduHGeffTY33ngjxcXFvP766/j5+R33LdshISE89NBDPPvss1x44YWMHz+eTZs28csvvxAcHHwanm11ZrOZt99+m4suuog+ffpw/fXXEx4ezu7du9mxY4cj7HzzzTc577zz6NmzJzfffDPt2rUjLS2N1atXk5iYyJYtWxq1xg8++IBx48bRvXt3rr/+elq3bk1SUhK///47vr6+/PTTTwDMnDmTX3/9lSFDhnDHHXdQXl7O66+/Tvfu3dm6detx7/Pwww/z7bffcvnll3PDDTfQv39/srKy+PHHH3nnnXfo3bs37du3x9/fn3feeQcfHx+8vLwYNGhQje+6uuiiixg+fDiPP/44Bw4coHfv3ixatIgffviB++67r8qiY2eCLl260L59ex566CGSkpLw9fVl7ty5DdpFbjab+ec//3nC4/7xj3/wxRdfMG7cOO655x4CAwOZM2cO8fHxzJ07F7PZ3sNy880388YbbzB16lQ2bNhAeHg4n3zyCZ6entXuW9efQREREZFTodC2Ftu2bcNqtdKpU6cq20tLSwkKCgLsM61KS0v5+OOPHcd9+OGH9O/fnz179tS4MImIiIg0XxMnTmTbtm289NJLLFq0iI8++giTyURUVBQTJkzgtttuo3fv3o7jR40axa+//sqTTz7JE088gYuLC0OHDuW555474cikp59+Gnd3d9555x1+//13Bg0axKJFi5gwYUJjP81ajRkzht9//52ZM2fy0ksvYbPZaN++PTfffLPjmG7durF+/XpmzpzJ7NmzyczMJDQ0lL59+/LEE080eo3Dhg1j9erVji7LgoICwsLCGDRoELfeeqvjuF69erFw4UIeeOABnnjiCSIjI5k5cyYpKSknDG29vb1ZsWIFTz75JPPmzWPOnDmEhoYycuRIR2jv4uLCnDlzeOyxx7jtttsoLy9n1qxZNX7fzWYzP/74I0888QRfffUVs2bNIjo6mhdeeIEHH3ywYV+gZsDFxYWffvqJe+65h2effRZ3d3cuueQS7rrrrip/fk6HVq1a8eeff/Loo4/y+uuvU1JSQq9evfjpp5+q/Fnz9PRkyZIl3H333bz++ut4enpyzTXXMG7cOMaOHVvlmnX9GRQRERE5FSbjRCsatBAmk4l58+YxadIkAL766iuuueYaduzYUW2xBW9vb8LCwnjyySd55plnsFgsjn3FxcV4enqyaNEiRo8efTqfgoiIiIiIiIiIiJwB1Glbi759+2K1Wjl8+DBDhgyp8Zhzzz2X8vJy9u/f73hb2969e4GGW1BCREREREREREREWpYW3WlbUFDAvn37AHtI+/LLLzN8+HACAwNp27Yt1157LatWreKll16ib9++pKens2TJEnr16sWECROw2WycddZZeHt788orr2Cz2bjzzjvx9fVl0aJFTfzsRERERERERERE5O+oRYe2y5YtY/jw4dW2T5s2jdmzZ2OxWHj66af5+OOPSUpKIjg4mMGDBzNz5kx69uwJQHJyMnfffTeLFi3Cy8uLcePG8dJLLxEYGHi6n46IiIiIiIiIiIicAVp0aCsiIiIiIiIiIiLS3JibugAREREREREREREROUKhrYiIiIiIiIiIiEgz4tzUBZxuNpuN5ORkfHx8MJlMTV2OiIiIiIiIiIiItBCGYZCfn09ERARmc+39tC0utE1OTqZNmzZNXYaIiIiIiIiIiIi0UIcOHSIyMrLW/S0utPXx8QHsL4yvr28TVyMiInJmslgsLFq0iAsuuAAXF5emLkdERERERJq5lvI7RF5eHm3atHFklLVpcaFt5UgEX19fhbYiIiKNxGKx4Onpia+v7xn9Dy4REREREWkYLe13iBONbdVCZCIiIiIiIiIiIiLNiEJbERERERERERERkWZEoa2IiIiIiIiIiIhIM9LiZtrWldVqxWKxNHUZcoZxcXHBycmpqcsQEREREREREZFmTKHtMQzDIDU1lZycnKYuRc5Q/v7+hIWFnXDgtIiIiIiIiIiItEwKbY9RGdiGhobi6empYE0ajGEYFBUVcfjwYQDCw8ObuCIREREREREREWmOFNoexWq1OgLboKCgpi5HzkAeHh4AHD58mNDQUI1KEBERERERERGRarQQ2VEqZ9h6eno2cSVyJqv8+dLMZBERERERERERqYlC2xpoJII0Jv18iYiIiIiIiIjI8Si0FREREREREREREWlGFNrKaWEymfj+++8b/LrR0dG88sorDX5dERERERERERGRpqLQ9gyzevVqnJycmDBhQr3PbcoAdPr06ZhMJkwmE66urnTo0IGnnnqK8vLy4563bt06brnlltNUpYiIiIiIiIiISONTaHuG+fDDD7n77rtZvnw5ycnJTV1OvYwdO5aUlBRiY2N58MEHmTFjBi+88EKNx5aVlQEQEhKiheNEREREREREROSMotD2DFJQUMBXX33F7bffzoQJE5g9e3a1Y3766SfOOuss3N3dCQ4O5pJLLgFg2LBhHDx4kPvvv9/R8QowY8YM+vTpU+Uar7zyCtHR0Y7H69atY/To0QQHB+Pn58fQoUPZuHFjvet3c3MjLCyMqKgobr/9dkaNGsWPP/4I2DtxJ02axH/+8x8iIiLo3LkzUL07OCcnh1tvvZVWrVrh7u5Ojx49mD9/vmP/ypUrGTJkCB4eHrRp04Z77rmHwsLCetcqIiIiIiIiIiLSWBTanoBhGBSVlTfJh2EY9ar166+/pkuXLnTu3Jlrr72Wjz76qMo1fv75Zy655BLGjx/Ppk2bWLJkCQMHDgTgu+++IzIykqeeeoqUlBRSUlLqfN/8/HymTZvGypUr+euvv+jYsSPjx48nPz+/XvUfy8PDw9FRC7BkyRL27NnD4sWLqwSxlWw2G+PGjWPVqlV8+umn7Ny5k//+9784OTkBsH//fsaOHcvkyZPZunUrX331FStXruSuu+46pTpFREREREREREQaknNTF9DcFVusdHtiYZPce+dTY/B0rfu36MMPP+Taa68F7KMGcnNz+eOPPxg2bBgA//nPf7jqqquYOXOm45zevXsDEBgYiJOTEz4+PoSFhdWrzhEjRlR5/N577+Hv788ff/zBhRdeWK9rgT0oX7JkCQsXLuTuu+92bPfy8uKDDz7A1dW1xvN+++031q5dy65du+jUqRMA7dq1c+x/9tlnueaaa7jvvvsA6NixI6+99hpDhw7l7bffxt3dvd61ioiIiIiIiIiINDR12p4h9uzZw9q1a7n66qsBcHZ25sorr+TDDz90HLN582ZGjhzZ4PdOS0vj5ptvpmPHjvj5+eHr60tBQQEJCQn1us78+fPx9vbG3d2dcePGceWVVzJjxgzH/p49e9Ya2IL9+UVGRjoC22Nt2bKF2bNn4+3t7fgYM2YMNpuN+Pj4etUqIiIiIiIiIiLSWNRpewIeLk7sfGpMk927rj788EPKy8uJiIhwbDMMAzc3N9544w38/Pzw8PCodw1ms7namAaLxVLl8bRp08jMzOTVV18lKioKNzc3zj777CqjDepi+PDhvP3227i6uhIREYGzc9UfTy8vr+Oef6LnV1BQwK233so999xTbV/btm3rVauIiIiIiIiIiEhjUWh7AiaTqV4jCppCeXk5H3/8MS+99BIXXHBBlX2TJk3iiy++4LbbbqNXr14sWbKE66+/vsbruLq6YrVaq2wLCQkhNTUVwzAci5Nt3ry5yjGrVq3irbfeYvz48QAcOnSIjIyMej8PLy8vOnToUO/zKvXq1YvExET27t1bY7dtv3792Llz5yndQ0REREREREREpLFpPMIZYP78+WRnZ3PjjTfSo0ePKh+TJ092jEh48skn+eKLL3jyySfZtWsX27Zt47nnnnNcJzo6muXLl5OUlOQIXYcNG0Z6ejrPP/88+/fv58033+SXX36pcv+OHTvyySefsGvXLtasWcM111xzUl29p2ro0KGcf/75TJ48mcWLFxMfH88vv/zCr7/+CsCjjz7Kn3/+yV133cXmzZuJjY3lhx9+0EJkIiIiIiIiIqfZL9tSeOCrzZRYrCc+WKQFUmh7Bvjwww8ZNWoUfn5+1fZNnjyZ9evXs3XrVoYNG8Y333zDjz/+SJ8+fRgxYgRr1651HPvUU09x4MAB2rdvT0hICABdu3blrbfe4s0336R3796sXbuWhx56qNr9s7Oz6devH9dddx333HMPoaGhjfukazF37lzOOussrr76arp168Yjjzzi6B7u1asXf/zxB3v37mXIkCH07duXJ554ospICRERERERERFpXBarjce/3853m5JYsutwU5cj0iyZjGMHlp7h8vLy8PPzIzc3F19f3yr7SkpKiI+PJyYmBnd39yaqUM50+jkTkZbAYrGwYMECxo8fj4uLS1OXIyIiIiLNyO+7D3P97HUAPDauC7cObd/EFUlz0FJ+hzheNnk0ddqKiIiIiIiIiMhp88PmJMfXSTnFTViJSPOl0FZERERERERERE6LorJyFu1MczxOzFZoK1IThbYiIiIiIiIiInJaLN6ZRlGZFZPJ/jgxu6hpCxJpphTaioiIiIiIiIjIafHj5mQAxvcMByApu5gWttySSJ0otBURERERERERkUZnGAar4zIBuHlIOwAKy6zkFFmasiyRZkmhrYiIiIiIiIiINLqC0nKKyqwAdGrlTYiPG6DFyERqotBWREREREREREQa3eH8UgB83JzxdHUmMsAD0FxbkZootBURERERERERkUZ3OM8e2ob42jtsW/tXhrbqtBU5lkJbERERERERERFpdIfzSwAIrRiLEBngCSi0FamJQlupt+nTpzNp0iTH42HDhnHfffed9jqWLVuGyWQiJyenQa974MABTCYTmzdvbtDrioiIiIiIiLRklZ22rXzdAY4aj6DQVuRYCm3PENOnT8dkMmEymXB1daVDhw489dRTlJeXN/q9v/vuO/7973/X6djGClprEx0d7XhdvLy86NevH998881xz2nTpg0pKSn06NHjtNQoIiIiIiIi0hIc22nbuiK01UJkItUptD2DjB07lpSUFGJjY3nwwQeZMWMGL7zwQo3HlpWVNdh9AwMD8fHxabDrNbSnnnqKlJQUNm3axFlnncWVV17Jn3/+WeOxZWVlODk5ERYWhrOz82muVEREREREROTMVbkQWaiPvdO2jRYiE6mVQtsziJubG2FhYURFRXH77bczatQofvzxR+DISIP//Oc/RERE0LlzZwAOHTrEFVdcgb+/P4GBgUycOJEDBw44rmm1WnnggQfw9/cnKCiIRx55BMMwqtz32PEIpaWlPProo7Rp0wY3Nzc6dOjAhx9+yIEDBxg+fDgAAQEBmEwmpk+fDoDNZuPZZ58lJiYGDw8PevfuzbffflvlPgsWLKBTp054eHgwfPjwKnUej4+PD2FhYXTq1Ik333wTDw8PfvrpJ8Deifvvf/+bqVOn4uvryy233FLjeIQdO3Zw4YUX4uvri4+PD0OGDGH//v2O/R988AFdu3bF3d2dLl268NZbb9WpNhEREREREZGWIi2votO2YiGyiIqFyPJLyskttjRZXSLNkVoJT8QwwNJE/8fHxRNMppM+3cPDg8zMTMfjJUuW4Ovry+LFiwGwWCyMGTOGs88+mxUrVuDs7MzTTz/N2LFj2bp1K66urrz00kvMnj2bjz76iK5du/LSSy8xb948RowYUet9p06dyurVq3nttdfo3bs38fHxZGRk0KZNG+bOncvkyZPZs2cPvr6+eHjY/wP97LPP8umnn/LOO+/QsWNHli9fzrXXXktISAhDhw7l0KFDXHrppdx5553ccsstrF+/ngcffLDer4mzszMuLi5VOo1ffPFFnnjiCZ588skaz0lKSuL8889n2LBhLF26FF9fX1atWuUYPfHZZ5/xxBNP8MYbb9C3b182bdrEzTffjJeXF9OmTat3jSIiIiIiIiJnomM7bT1dnQnyciWzsIyk7GL8PFyasrwzUnGZlQOZhXQJ88F0ChmTnH4KbU/EUgTPRDTNvf8vGVy96n2aYRgsWbKEhQsXcvfddzu2e3l58cEHH+Dq6grAp59+is1m44MPPnD8wZ01axb+/v4sW7aMCy64gFdeeYXHHnuMSy+9FIB33nmHhQsX1nrvvXv38vXXX7N48WJGjRoFQLt27Rz7AwMDAQgNDcXf3x+wd+Y+88wz/Pbbb5x99tmOc1auXMm7777L0KFDefvtt2nfvj0vvfQSAJ07d2bbtm0899xzdX5dysrKeOmll8jNza0SOo8YMaJKAHxsB++bb76Jn58fX375JS4u9r9AOnXq5Nj/5JNP8tJLLzleo5iYGHbu3Mm7776r0FZERERERESkQnrFQmSVnbZgX4wss7CMxOwiukX4NlVpZ6zHv9/GdxuT+OymQZzbIbipy5F6UGh7Bpk/fz7e3t5YLBZsNhtTpkxhxowZjv09e/Z0BLYAW7ZsYd++fdXm0ZaUlLB//35yc3NJSUlh0KBBjn3Ozs4MGDCg2oiESps3b8bJyYmhQ4fWue59+/ZRVFTE6NGjq2wvKyujb9++AOzatatKHYAj4D2RRx99lH/+85+UlJTg7e3Nf//7XyZMmODYP2DAgOOev3nzZoYMGeIIbI9WWFjI/v37ufHGG7n55psd28vLy/Hz86tTfSIiIiIiIiJnuqKycvJL7e9YrVyIDKBNoCdbEnP5at0hRnQJxdlJkzwb0pq4LAA2JWQrtP2bUWh7Ii6e9o7Xprp3PQwfPpy3334bV1dXIiIiqi2k5eVVtWu3oKCA/v3789lnn1W7VkhISP3rBce4g/ooKCgA4Oeff6Z169ZV9rm5udV0Sr08/PDDTJ8+HW9vb1q1alXt7QDHvi7HOt5zqqz9/fffrxYqOzk5nWTFIiIiIiIiImeWwxVdth4uTni7Hckrrj83hkU701iy+zD/+G4bz0/uhdmst/E3hPwSC0k5xQDEZ2ixt78bhbYnYjKd1IiCpuDl5UWHDh3qfHy/fv346quvCA0Nxde35rcghIeHs2bNGs4//3zA3kG6YcMG+vXrV+PxPXv2xGaz8ccffzjGIxytstPXarU6tnXr1g03NzcSEhJq7dDt2rWrY1G1Sn/99deJnyQQHBxcr9flWL169WLOnDlYLJZq3batWrUiIiKCuLg4rrnmmpO+h4iIiIiIiMiZrHKebStftyrNVP2jAnhzSj9u+3QD325IxN/DhccndNX81QawNy3f8fWBzMImrEROhnrOW7BrrrmG4OBgJk6cyIoVK4iPj2fZsmXcc889JCYmAnDvvffy3//+l++//57du3dzxx13kJOTU+s1o6OjmTZtGjfccAPff/+945pff/01AFFRUZhMJubPn096ejoFBQX4+Pjw0EMPcf/99zNnzhz279/Pxo0bef3115kzZw4At912G7GxsTz88MPs2bOHzz//nNmzZzf2SwTAXXfdRV5eHldddRXr168nNjaWTz75hD179gAwc+ZMnn32WV577TX27t3Ltm3bmDVrFi+//PJpqU9ERERERESkuTucXwIcWYTsaKO7teL5yb0A+GBlPG8t21/tGMMweOy7rVz93l+Uldsat9gzxO7Uo0LbDIW2fzcKbVswT09Pli9fTtu2bbn00kvp2rUrN954IyUlJY7O2wcffJDrrruOadOmcfbZZ+Pj48Mll1xy3Ou+/fbbXHbZZdxxxx106dKFm2++mcJC+38c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\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01457934",
   "metadata": {
    "papermill": {
     "duration": 0.011721,
     "end_time": "2025-06-29T09:41:53.520247",
     "exception": false,
     "start_time": "2025-06-29T09:41:53.508526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7a8c820a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:41:53.544695Z",
     "iopub.status.busy": "2025-06-29T09:41:53.544431Z",
     "iopub.status.idle": "2025-06-29T09:41:53.577852Z",
     "shell.execute_reply": "2025-06-29T09:41:53.577292Z"
    },
    "papermill": {
     "duration": 0.046731,
     "end_time": "2025-06-29T09:41:53.578832",
     "exception": false,
     "start_time": "2025-06-29T09:41:53.532101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 158.288953,
   "end_time": "2025-06-29T09:41:57.288075",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-29T09:39:18.999122",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
