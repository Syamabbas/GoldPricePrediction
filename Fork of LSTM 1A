{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d85f16d6",
   "metadata": {
    "papermill": {
     "duration": 0.005968,
     "end_time": "2025-09-14T05:26:25.752190",
     "exception": false,
     "start_time": "2025-09-14T05:26:25.746222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c30e5edf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:25.762664Z",
     "iopub.status.busy": "2025-09-14T05:26:25.762244Z",
     "iopub.status.idle": "2025-09-14T05:26:27.840499Z",
     "shell.execute_reply": "2025-09-14T05:26:27.839296Z"
    },
    "papermill": {
     "duration": 2.085261,
     "end_time": "2025-09-14T05:26:27.842169",
     "exception": false,
     "start_time": "2025-09-14T05:26:25.756908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Dataset Harga Emas dan Indikator Moneter.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "181a1b07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:27.852835Z",
     "iopub.status.busy": "2025-09-14T05:26:27.852360Z",
     "iopub.status.idle": "2025-09-14T05:26:48.134353Z",
     "shell.execute_reply": "2025-09-14T05:26:48.133083Z"
    },
    "papermill": {
     "duration": 20.289202,
     "end_time": "2025-09-14T05:26:48.136192",
     "exception": false,
     "start_time": "2025-09-14T05:26:27.846990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-14 05:26:31.852590: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1757827592.126629      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1757827592.204419      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da53a957",
   "metadata": {
    "papermill": {
     "duration": 0.004091,
     "end_time": "2025-09-14T05:26:48.145271",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.141180",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "37613066",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.155444Z",
     "iopub.status.busy": "2025-09-14T05:26:48.154881Z",
     "iopub.status.idle": "2025-09-14T05:26:48.185391Z",
     "shell.execute_reply": "2025-09-14T05:26:48.184244Z"
    },
    "papermill": {
     "duration": 0.037624,
     "end_time": "2025-09-14T05:26:48.187161",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.149537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price  Exchange Rate  Foreign Exchange Reserves  Money Supply\n",
      "0  1/3/2017  606000          13485                      116.9    4936881.99\n",
      "1  1/4/2017  606000          13478                      116.9    4936881.99\n",
      "2  1/5/2017  607000          13370                      116.9    4936881.99\n",
      "3  1/6/2017  606000          13347                      116.9    4936881.99\n",
      "4  1/9/2017  602000          13385                      116.9    4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37f96fcc",
   "metadata": {
    "papermill": {
     "duration": 0.004099,
     "end_time": "2025-09-14T05:26:48.195911",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.191812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c723f4d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.206306Z",
     "iopub.status.busy": "2025-09-14T05:26:48.205937Z",
     "iopub.status.idle": "2025-09-14T05:26:48.232026Z",
     "shell.execute_reply": "2025-09-14T05:26:48.230885Z"
    },
    "papermill": {
     "duration": 0.03309,
     "end_time": "2025-09-14T05:26:48.233546",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.200456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Date                       1932 non-null   object \n",
      " 1   Price                      1932 non-null   int64  \n",
      " 2   Exchange Rate              1932 non-null   int64  \n",
      " 3   Foreign Exchange Reserves  1932 non-null   float64\n",
      " 4   Money Supply               1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2cb73e13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.245430Z",
     "iopub.status.busy": "2025-09-14T05:26:48.245099Z",
     "iopub.status.idle": "2025-09-14T05:26:48.261158Z",
     "shell.execute_reply": "2025-09-14T05:26:48.260077Z"
    },
    "papermill": {
     "duration": 0.02453,
     "end_time": "2025-09-14T05:26:48.262929",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.238399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ccdf8c2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.273699Z",
     "iopub.status.busy": "2025-09-14T05:26:48.273315Z",
     "iopub.status.idle": "2025-09-14T05:26:48.283311Z",
     "shell.execute_reply": "2025-09-14T05:26:48.282272Z"
    },
    "papermill": {
     "duration": 0.017092,
     "end_time": "2025-09-14T05:26:48.284997",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.267905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3ef8f4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.295753Z",
     "iopub.status.busy": "2025-09-14T05:26:48.295398Z",
     "iopub.status.idle": "2025-09-14T05:26:48.302872Z",
     "shell.execute_reply": "2025-09-14T05:26:48.301912Z"
    },
    "papermill": {
     "duration": 0.014828,
     "end_time": "2025-09-14T05:26:48.304798",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.289970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e5f7f6a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.315557Z",
     "iopub.status.busy": "2025-09-14T05:26:48.315210Z",
     "iopub.status.idle": "2025-09-14T05:26:48.320067Z",
     "shell.execute_reply": "2025-09-14T05:26:48.318993Z"
    },
    "papermill": {
     "duration": 0.012216,
     "end_time": "2025-09-14T05:26:48.321784",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.309568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price']\n",
    "\n",
    "# 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ca62b3bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.333188Z",
     "iopub.status.busy": "2025-09-14T05:26:48.332789Z",
     "iopub.status.idle": "2025-09-14T05:26:48.342206Z",
     "shell.execute_reply": "2025-09-14T05:26:48.341081Z"
    },
    "papermill": {
     "duration": 0.017164,
     "end_time": "2025-09-14T05:26:48.343920",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.326756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a3254eb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.354616Z",
     "iopub.status.busy": "2025-09-14T05:26:48.354248Z",
     "iopub.status.idle": "2025-09-14T05:26:48.363998Z",
     "shell.execute_reply": "2025-09-14T05:26:48.362763Z"
    },
    "papermill": {
     "duration": 0.017071,
     "end_time": "2025-09-14T05:26:48.365801",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.348730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c7bedbd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.377322Z",
     "iopub.status.busy": "2025-09-14T05:26:48.376987Z",
     "iopub.status.idle": "2025-09-14T05:26:48.382913Z",
     "shell.execute_reply": "2025-09-14T05:26:48.381926Z"
    },
    "papermill": {
     "duration": 0.014,
     "end_time": "2025-09-14T05:26:48.384481",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.370481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Validation-Test split (70:15:15)\n",
    "train_size = int(0.7 * len(X))\n",
    "val_size   = int(0.15 * len(X))\n",
    "\n",
    "X_train = X[:train_size]\n",
    "y_train = y[:train_size]\n",
    "\n",
    "X_val = X[train_size:train_size + val_size]\n",
    "y_val = y[train_size:train_size + val_size]\n",
    "\n",
    "X_test = X[train_size + val_size:]\n",
    "y_test = y[train_size + val_size:]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ade9c639",
   "metadata": {
    "papermill": {
     "duration": 0.004637,
     "end_time": "2025-09-14T05:26:48.393893",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.389256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "20f2f4b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:26:48.405224Z",
     "iopub.status.busy": "2025-09-14T05:26:48.404848Z",
     "iopub.status.idle": "2025-09-14T05:34:43.579873Z",
     "shell.execute_reply": "2025-09-14T05:34:43.578667Z"
    },
    "papermill": {
     "duration": 475.182706,
     "end_time": "2025-09-14T05:34:43.581747",
     "exception": false,
     "start_time": "2025-09-14T05:26:48.399041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-14 05:26:48.420662: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 66ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=64824.0377\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 66ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=45356.7674\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 66ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=65634.0300\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 66ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=91428.4955\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 68ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=60367.7331\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 69ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=86008.5923\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 174ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=81451.5065\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 68ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=29202.0263\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=36186.7517\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 237ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=53144.1215\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 76ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=52008.0757\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 71ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=41476.0482\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 75ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=46560.7728\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 75ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=28834.9233\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 73ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=42797.5875\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 72ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=34609.3277\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "13     64      0.3         0.0010          64  28834.923253  0.016579   \n",
      "7      32      0.3         0.0005          64  29202.026340  0.016719   \n",
      "15     64      0.3         0.0005          64  34609.327742  0.020092   \n",
      "8      64      0.2         0.0010          32  36186.751659  0.021454   \n",
      "11     64      0.2         0.0005          64  41476.048243  0.024676   \n",
      "\n",
      "          R2  \n",
      "13  0.964134  \n",
      "7   0.963215  \n",
      "15  0.948331  \n",
      "8   0.943513  \n",
      "11  0.925793  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_val, y_val), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d8729c3",
   "metadata": {
    "papermill": {
     "duration": 0.009416,
     "end_time": "2025-09-14T05:34:43.600870",
     "exception": false,
     "start_time": "2025-09-14T05:34:43.591454",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "33f23c66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:34:43.621026Z",
     "iopub.status.busy": "2025-09-14T05:34:43.620227Z",
     "iopub.status.idle": "2025-09-14T05:35:35.052518Z",
     "shell.execute_reply": "2025-09-14T05:35:35.051458Z"
    },
    "papermill": {
     "duration": 51.444121,
     "end_time": "2025-09-14T05:35:35.054389",
     "exception": false,
     "start_time": "2025-09-14T05:34:43.610268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 72ms/step - loss: 0.0312 - val_loss: 2.4994e-04\n",
      "Epoch 2/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 58ms/step - loss: 0.0012 - val_loss: 2.9934e-04\n",
      "Epoch 3/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step - loss: 0.0010 - val_loss: 6.2358e-04\n",
      "Epoch 4/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 59ms/step - loss: 0.0010 - val_loss: 6.1876e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 8.7805e-04 - val_loss: 3.4758e-04\n",
      "Epoch 6/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 8.3845e-04 - val_loss: 2.8439e-04\n",
      "Epoch 7/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step - loss: 8.2572e-04 - val_loss: 2.4683e-04\n",
      "Epoch 8/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step - loss: 7.9278e-04 - val_loss: 2.4769e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 7.9255e-04 - val_loss: 1.9299e-04\n",
      "Epoch 10/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step - loss: 8.1294e-04 - val_loss: 4.5522e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 63ms/step - loss: 8.0806e-04 - val_loss: 2.1098e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 61ms/step - loss: 7.5067e-04 - val_loss: 4.5075e-04\n",
      "Epoch 13/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 59ms/step - loss: 7.2283e-04 - val_loss: 6.3261e-04\n",
      "Epoch 14/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 56ms/step - loss: 6.3292e-04 - val_loss: 2.1775e-04\n",
      "Epoch 15/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 6.6152e-04 - val_loss: 3.3461e-04\n",
      "Epoch 16/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 59ms/step - loss: 6.5732e-04 - val_loss: 4.3933e-04\n",
      "Epoch 17/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - loss: 6.3477e-04 - val_loss: 5.1409e-04\n",
      "Epoch 18/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 56ms/step - loss: 7.2189e-04 - val_loss: 3.2587e-04\n",
      "Epoch 19/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 58ms/step - loss: 6.0435e-04 - val_loss: 4.8354e-04\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_val, y_val),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fe2aed1",
   "metadata": {
    "papermill": {
     "duration": 0.114686,
     "end_time": "2025-09-14T05:35:35.212779",
     "exception": false,
     "start_time": "2025-09-14T05:35:35.098093",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4de68e63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:35:35.298986Z",
     "iopub.status.busy": "2025-09-14T05:35:35.298624Z",
     "iopub.status.idle": "2025-09-14T05:35:36.384027Z",
     "shell.execute_reply": "2025-09-14T05:35:36.382644Z"
    },
    "papermill": {
     "duration": 1.130276,
     "end_time": "2025-09-14T05:35:36.386197",
     "exception": false,
     "start_time": "2025-09-14T05:35:35.255921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 71ms/step\n",
      "Final Test RMSE: 52366.8935\n",
      "Final Test MAPE: 0.0320\n",
      "Final Test MSLE: 0.001432\n",
      "Final Test R² Score: 0.8817\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4e1a26f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:35:36.472728Z",
     "iopub.status.busy": "2025-09-14T05:35:36.472372Z",
     "iopub.status.idle": "2025-09-14T05:35:36.745842Z",
     "shell.execute_reply": "2025-09-14T05:35:36.744664Z"
    },
    "papermill": {
     "duration": 0.318428,
     "end_time": "2025-09-14T05:35:36.747349",
     "exception": false,
     "start_time": "2025-09-14T05:35:36.428921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Validation RMSE: 13475.3752\n",
      "Validation MAPE: 0.0096\n",
      "Validation R² Score: 0.9245\n"
     ]
    }
   ],
   "source": [
    "# Evaluation on Validation set\n",
    "y_val_pred = final_model.predict(X_val)\n",
    "\n",
    "# inverse transform\n",
    "y_val_pred_inv = scaler.inverse_transform(\n",
    "    np.concatenate((y_val_pred, np.zeros((y_val_pred.shape[0], scaled_features.shape[1]-1))), axis=1)\n",
    ")[:,0]\n",
    "\n",
    "y_val_inv = scaler.inverse_transform(\n",
    "    np.concatenate((y_val.reshape(-1,1), np.zeros((y_val.shape[0], scaled_features.shape[1]-1))), axis=1)\n",
    ")[:,0]\n",
    "\n",
    "# metrics\n",
    "val_rmse = np.sqrt(mean_squared_error(y_val_inv, y_val_pred_inv))\n",
    "val_mape = mean_absolute_percentage_error(y_val_inv, y_val_pred_inv)\n",
    "val_r2   = r2_score(y_val_inv, y_val_pred_inv)\n",
    "\n",
    "print(f\"Validation RMSE: {val_rmse:.4f}\")\n",
    "print(f\"Validation MAPE: {val_mape:.4f}\")\n",
    "print(f\"Validation R² Score: {val_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "36ff6db9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:35:36.836495Z",
     "iopub.status.busy": "2025-09-14T05:35:36.836172Z",
     "iopub.status.idle": "2025-09-14T05:35:37.235801Z",
     "shell.execute_reply": "2025-09-14T05:35:37.234853Z"
    },
    "papermill": {
     "duration": 0.445115,
     "end_time": "2025-09-14T05:35:37.237630",
     "exception": false,
     "start_time": "2025-09-14T05:35:36.792515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d6f112b",
   "metadata": {
    "papermill": {
     "duration": 0.05014,
     "end_time": "2025-09-14T05:35:37.335533",
     "exception": false,
     "start_time": "2025-09-14T05:35:37.285393",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7b4f2365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-14T05:35:37.430247Z",
     "iopub.status.busy": "2025-09-14T05:35:37.429929Z",
     "iopub.status.idle": "2025-09-14T05:35:37.471265Z",
     "shell.execute_reply": "2025-09-14T05:35:37.469546Z"
    },
    "papermill": {
     "duration": 0.088198,
     "end_time": "2025-09-14T05:35:37.472958",
     "exception": false,
     "start_time": "2025-09-14T05:35:37.384760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 12588679,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 561.248976,
   "end_time": "2025-09-14T05:35:40.944775",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-14T05:26:19.695799",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
