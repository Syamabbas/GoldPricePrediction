{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3a7709cd",
   "metadata": {
    "papermill": {
     "duration": 0.003005,
     "end_time": "2025-05-25T10:31:25.972783",
     "exception": false,
     "start_time": "2025-05-25T10:31:25.969778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# GRU Model\n",
    "- Skenario 1C: Menggunakan harga emas historis + Inflasi."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b36a72dd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:25.978460Z",
     "iopub.status.busy": "2025-05-25T10:31:25.978262Z",
     "iopub.status.idle": "2025-05-25T10:31:27.389324Z",
     "shell.execute_reply": "2025-05-25T10:31:27.388470Z"
    },
    "papermill": {
     "duration": 1.415448,
     "end_time": "2025-05-25T10:31:27.390812",
     "exception": false,
     "start_time": "2025-05-25T10:31:25.975364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce526c1e",
   "metadata": {
    "papermill": {
     "duration": 0.002359,
     "end_time": "2025-05-25T10:31:27.396043",
     "exception": false,
     "start_time": "2025-05-25T10:31:27.393684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Library Input**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "89ed1f34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:27.401959Z",
     "iopub.status.busy": "2025-05-25T10:31:27.401404Z",
     "iopub.status.idle": "2025-05-25T10:31:41.082657Z",
     "shell.execute_reply": "2025-05-25T10:31:41.082068Z"
    },
    "papermill": {
     "duration": 13.68565,
     "end_time": "2025-05-25T10:31:41.084049",
     "exception": false,
     "start_time": "2025-05-25T10:31:27.398399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-25 10:31:28.833133: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748169089.025068      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748169089.080655      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import GRU, Dense, Dropout, Input\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8c6222f",
   "metadata": {
    "papermill": {
     "duration": 0.00235,
     "end_time": "2025-05-25T10:31:41.090335",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.087985",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Dataset Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b1b90796",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.096235Z",
     "iopub.status.busy": "2025-05-25T10:31:41.095808Z",
     "iopub.status.idle": "2025-05-25T10:31:41.133572Z",
     "shell.execute_reply": "2025-05-25T10:31:41.132754Z"
    },
    "papermill": {
     "duration": 0.041988,
     "end_time": "2025-05-25T10:31:41.134742",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.092754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Inflasi            1932 non-null   float64\n",
      " 4   IndONIA            1932 non-null   float64\n",
      " 5   Cadangan Devisa    1932 non-null   float64\n",
      " 6   Money Supply (M2)  1932 non-null   float64\n",
      " 7   Minyak             1932 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 120.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1eea02f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.140936Z",
     "iopub.status.busy": "2025-05-25T10:31:41.140364Z",
     "iopub.status.idle": "2025-05-25T10:31:41.154258Z",
     "shell.execute_reply": "2025-05-25T10:31:41.153748Z"
    },
    "papermill": {
     "duration": 0.017986,
     "end_time": "2025-05-25T10:31:41.155313",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.137327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Kurs', 'IndONIA', 'Cadangan Devisa','Money Supply (M2)', 'Minyak'], axis=1, inplace=True)\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# 'Inflasi',  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67eb9f27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.161336Z",
     "iopub.status.busy": "2025-05-25T10:31:41.160883Z",
     "iopub.status.idle": "2025-05-25T10:31:41.169057Z",
     "shell.execute_reply": "2025-05-25T10:31:41.167999Z"
    },
    "papermill": {
     "duration": 0.012339,
     "end_time": "2025-05-25T10:31:41.170210",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.157871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype         \n",
      "---  ------   --------------  -----         \n",
      " 0   Date     1932 non-null   datetime64[ns]\n",
      " 1   Price    1932 non-null   float64       \n",
      " 2   Inflasi  1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(2)\n",
      "memory usage: 45.4 KB\n"
     ]
    }
   ],
   "source": [
    "# Preprocess numeric columns\n",
    "NumCols = df.columns.drop(['Date'])\n",
    "df[NumCols] = df[NumCols].astype('float64')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7d7ec047",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.176174Z",
     "iopub.status.busy": "2025-05-25T10:31:41.175961Z",
     "iopub.status.idle": "2025-05-25T10:31:41.181062Z",
     "shell.execute_reply": "2025-05-25T10:31:41.180411Z"
    },
    "papermill": {
     "duration": 0.009171,
     "end_time": "2025-05-25T10:31:41.182047",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.172876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values: 0\n",
      "Duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "# Cek data\n",
    "print(\"Missing values:\", df.isnull().sum().sum())\n",
    "print(\"Duplicates:\", df.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f3beb49b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.188003Z",
     "iopub.status.busy": "2025-05-25T10:31:41.187785Z",
     "iopub.status.idle": "2025-05-25T10:31:41.193843Z",
     "shell.execute_reply": "2025-05-25T10:31:41.193165Z"
    },
    "papermill": {
     "duration": 0.01021,
     "end_time": "2025-05-25T10:31:41.194855",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.184645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test size: 720\n"
     ]
    }
   ],
   "source": [
    "# Split train/test by date\n",
    "df_train = df[df['Date'].dt.year < 2022]\n",
    "df_test = df[df['Date'].dt.year >= 2022]\n",
    "test_size = df_test.shape[0]\n",
    "print(\"Test size:\", test_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a8af9125",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.201028Z",
     "iopub.status.busy": "2025-05-25T10:31:41.200669Z",
     "iopub.status.idle": "2025-05-25T10:31:41.206366Z",
     "shell.execute_reply": "2025-05-25T10:31:41.205866Z"
    },
    "papermill": {
     "duration": 0.009714,
     "end_time": "2025-05-25T10:31:41.207311",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.197597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling\n",
    "scaler = MinMaxScaler()\n",
    "scaled_data = scaler.fit_transform(df[NumCols])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69f516b6",
   "metadata": {
    "papermill": {
     "duration": 0.002521,
     "end_time": "2025-05-25T10:31:41.212490",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.209969",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Splitting Data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "797a7612",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.218484Z",
     "iopub.status.busy": "2025-05-25T10:31:41.218304Z",
     "iopub.status.idle": "2025-05-25T10:31:41.227199Z",
     "shell.execute_reply": "2025-05-25T10:31:41.226627Z"
    },
    "papermill": {
     "duration": 0.012975,
     "end_time": "2025-05-25T10:31:41.228175",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.215200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (1152, 60, 2) (1152,)\n",
      "Test shape: (720, 60, 2) (720,)\n"
     ]
    }
   ],
   "source": [
    "# Sliding window multivariate\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "\n",
    "for i in range(window_size, len(scaled_data)):\n",
    "    X.append(scaled_data[i-window_size:i])\n",
    "    y.append(scaled_data[i, 0])  # Index 0 = 'Price'\n",
    "\n",
    "X = np.array(X)\n",
    "y = np.array(y)\n",
    "\n",
    "# Split back to train/test\n",
    "X_train, X_test = X[:-test_size], X[-test_size:]\n",
    "y_train, y_test = y[:-test_size], y[-test_size:]\n",
    "\n",
    "print(\"Train shape:\", X_train.shape, y_train.shape)\n",
    "print(\"Test shape:\", X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2a06b09",
   "metadata": {
    "papermill": {
     "duration": 0.002586,
     "end_time": "2025-05-25T10:31:41.233556",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.230970",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Hyperparameter Tuning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2ef29d42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.239712Z",
     "iopub.status.busy": "2025-05-25T10:31:41.239539Z",
     "iopub.status.idle": "2025-05-25T10:31:41.244531Z",
     "shell.execute_reply": "2025-05-25T10:31:41.244066Z"
    },
    "papermill": {
     "duration": 0.009274,
     "end_time": "2025-05-25T10:31:41.245515",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.236241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define model builder for Keras Tuner\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_1', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_1', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_2', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_2', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_3', 32, 128, step=32)))\n",
    "    model.add(Dropout(hp.Float('dropout_3', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(Dense(1))\n",
    "\n",
    "    lr = hp.Float('lr', 1e-4, 1e-2, sampling='log')\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), loss='mean_squared_error')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00d1ea6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:41.251870Z",
     "iopub.status.busy": "2025-05-25T10:31:41.251679Z",
     "iopub.status.idle": "2025-05-25T10:31:43.771065Z",
     "shell.execute_reply": "2025-05-25T10:31:43.770278Z"
    },
    "papermill": {
     "duration": 2.52408,
     "end_time": "2025-05-25T10:31:43.772461",
     "exception": false,
     "start_time": "2025-05-25T10:31:41.248381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748169102.457209      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748169102.457956      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "# Keras Tuner Random Search\n",
    "tuner = kt.RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='gru_tuner_dir',\n",
    "    project_name='gru_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0e06bf1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:31:43.779422Z",
     "iopub.status.busy": "2025-05-25T10:31:43.779208Z",
     "iopub.status.idle": "2025-05-25T10:33:21.181563Z",
     "shell.execute_reply": "2025-05-25T10:33:21.180880Z"
    },
    "papermill": {
     "duration": 97.406967,
     "end_time": "2025-05-25T10:33:21.182603",
     "exception": false,
     "start_time": "2025-05-25T10:31:43.775636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 13s]\n",
      "val_loss: 0.0011013837065547705\n",
      "\n",
      "Best val_loss So Far: 0.00019856823200825602\n",
      "Total elapsed time: 00h 01m 37s\n"
     ]
    }
   ],
   "source": [
    "# Tuning\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "tuner.search(X_train, y_train, validation_data=(X_test, y_test),\n",
    "             epochs=20, batch_size=32,\n",
    "             callbacks=[early_stop], verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1a93e2f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:33:21.189961Z",
     "iopub.status.busy": "2025-05-25T10:33:21.189530Z",
     "iopub.status.idle": "2025-05-25T10:33:22.679786Z",
     "shell.execute_reply": "2025-05-25T10:33:22.679126Z"
    },
    "papermill": {
     "duration": 1.494955,
     "end_time": "2025-05-25T10:33:22.680841",
     "exception": false,
     "start_time": "2025-05-25T10:33:21.185886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:713: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 24 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step\n",
      "MSLE: 7.848712786073393e-05\n",
      "TUNED GRU -> RMSE: 0.014091424693766156, MAE: 0.010728306956631899, MAPE: 0.020419945714936313, R2: 0.9943539861512958\n"
     ]
    }
   ],
   "source": [
    "# Best model from tuning\n",
    "best_model = tuner.get_best_models(num_models=1)[0]\n",
    "\n",
    "# Evaluation\n",
    "preds = best_model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, preds)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, preds)\n",
    "mape = mean_absolute_percentage_error(y_test, preds)\n",
    "r2 = r2_score(y_test, preds)\n",
    "\n",
    "msle = mean_squared_log_error(y_test, preds)\n",
    "print(f\"MSLE: {msle}\")\n",
    "print(f\"TUNED GRU -> RMSE: {rmse}, MAE: {mae}, MAPE: {mape}, R2: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f284eb55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T10:33:22.688635Z",
     "iopub.status.busy": "2025-05-25T10:33:22.688423Z",
     "iopub.status.idle": "2025-05-25T10:33:22.947173Z",
     "shell.execute_reply": "2025-05-25T10:33:22.946482Z"
    },
    "papermill": {
     "duration": 0.264316,
     "end_time": "2025-05-25T10:33:22.948730",
     "exception": false,
     "start_time": "2025-05-25T10:33:22.684414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisasi Prediksi vs Aktual\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(y_test, label='Actual Price')\n",
    "plt.plot(preds, label='Predicted Price')\n",
    "plt.title('GRU Prediction vs Actual')\n",
    "plt.xlabel('Time Step')\n",
    "plt.ylabel('Normalized Price')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 124.252092,
   "end_time": "2025-05-25T10:33:26.166987",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-25T10:31:21.914895",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
